file C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS

file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\uLCD-43PT.fnc

000001  000001  #platform "uLCD-43PT"
000002  000001  #platform "uLCD-43PT"
000003  000008  */
000004  000009      #constant uLCD_43PT_GFX2
000005  000009      #constant uLCD_43PT_GFX2
000006  000010        
000007  000011      #IFNOT EXISTS PICASO_FUNCTIONS
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\PicasoFunctions.fnc

000008  000012          #inherit "PicasoFunctions.fnc"        // inherit the generic functions
000009  000012          #inherit "PicasoFunctions.fnc"        // inherit the generic functions
000010  000001        
000011  000002  // Common inheritance for PicasoGFX2 platforms
000012  000003        
000013  000004  #constant PICASO_FUNCTIONS
000014  000004  #constant PICASO_FUNCTIONS
000015  000005        
000016  000006        
000017  000007  #CONST
000018  000017  #END
000019  000018        
000020  000019  #CONST
000021  000025  #END
000022  000026        
000023  000027        
000024  000028  #CONST
000025  000040  #END
000026  000041        
000027  000042        
000028  000043  #CONST
000029  000208  #END
000030  000209        
000031  000210        
000032  000211  // baud divisor rates for setbaud(n);
000033  000212  #CONST
000034  000234  #END
000035  000235        
000036  000236        
000037  000237        
000038  000238        
000039  000243  */
000040  000244        
000041  000245        
000042  000246  //==============================================//
000043  000247  // EVE bios functions                           //
000044  000248  //==============================================//
000045  000249                                                  //
000046  000250  func serin(), 1;                // read a byte from COM0
000047  000251  // Syntax: serin();
000048  000252  // Usage : char := serin();
000049  000253  // Notes : Receives a character from the Serial Port COM0. The transmission format is:
000050  000254  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000051  000255  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000052  000256  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000053  000257  //     : Returns: -1 if no character is available
000054  000258  //     : Returns: -2 if a framing error or over-run has occurred (auto cleared)
000055  000259  //     : Returns: positive value 0 to 255 for a valid character received
000056  000260        
000057  000261  func putch("char"), 0;                // write single char to current output device
000058  000262  // Syntax: putch("char");
000059  000263  // Usage : putch("A");
000060  000264  // Notes : Transmits a single byte from the Serial Port COM0. The transmission format is:
000061  000265  //     : No Parity, 1 Stop Bit, 8 Data Bits (N,8,1).
000062  000266  //     : The default Baud Rate is 115,200 bits per second or 115,200 baud. The baud rate can be
000063  000267  //     : changed under program control by using the setbaud(...) or the com_SetBaud(...) function.
000064  000268  //     : The arguments can be a variable, array element, expression or constant
000065  000269        
000066  000270  func serout("char"), 0;                // write a byte to COM0
000067  000271  // Syntax: serout1("char");
000068  000272  // Usage : serout1(ch);
000069  000273  // Notes : send character to COM1
000070  000274        
000071  000275  func setbaud("baudnum"), 0;            // set baud rate of COM0
000072  000276  // Syntax: setbaud(baud_number);
000073  000277  // Usage : setbaud(BAUD_128000);        //Set baud rate to 128000bps
000074  000278  // *Notes : argument specifies the baud rate using pre-defined constant.
000075  000279  //       : The pre-defined constant is a value of 0-19 , and internally
000076  000280  //       : this is used as a table pointer to get the baud rate divisor
000077  000281  //       : value for one of the 20 selected baud rates, control is then
000078  000282  //       : passed to com_SetBaud(COM0, baudlookup[baud_number]);
000079  000283  //       : The pre-defined constants equate to a value of 0-19.
000080  000284  //       : If a value other than 0-19 is used, a run time error (eror 25)
000081  000285  //       : will occur.
000082  000286        
000083  000287  func to("device"), 1;                // output device redirection
000084  000288  // Syntax: to(outstream);
000085  000289  // Usage : to(APPEND); putstr("TWO ");
000086  000290  // Notes : outstream: A variable or constant specifying destination for putch, putstr, putnum and print functions.
000087  000291  //     :
000088  000292  //     : to() sends the printed output to destinations other than the screen. Normally, print just
000089  000293  //     : sends its output to the display in TEXT mode which is the default, however, the output from
000090  000294  //     : print can be sent to COM0, and MDA (media) 'streams'. The to(...) function can also stream
000091  000295  //     : to a memory array . Note that once the to(...) function has taken effect, the stream reverts
000092  000296  //     : back to the default stream which is TEXT as soon as putch, putstr, putnum or print has
000093  000297  //     : completed its action. The APPEND argument is used to send the printed output to the same
000094  000298  //     : place as the previous redirection. This is most useful for building string arrays, or adding
000095  000299  //     : sequential data to a media stream.
000096  000300  //     :
000097  000301  //     : Predefined Name Constant    putch(), putstr(), putnum(), print() redirection
000098  000302  //     : APPEND         0x0000      Output is directed to the same stream that was previously assigned. Output is
000099  000303  //     :                            appended to user memory if previous redirection was to an array.
000100  000304  //     : COM0           0xFF04      Output is redirected to the COM (serial) port.
000101  000305  //     : TEXT           0xFF08      Output is directed to the screen (default).
000102  000306  //     : MDA            0xFF10      Output is directed to the SD or FLASH media.
000103  000307  //     : I2C            0xF820      Output is directed to the I2C port.
000104  000308  //     : memory pointer             Output is redirect to the memory pointer argument, eg to(myarray); print("HELLO");
000105  000309        
000106  000310        
000107  000311  func pause("milliseconds"), 0;            // blocking delay
000108  000312  // Syntax: pause(milliseconds);
000109  000313  // Usage : pause(1000);                //pause for 1 second
000110  000314  // Notes : Pause for a number of milli second.Maximum delay could be 65535 milli seconds
000111  000315        
000112  000316  func putnum("arg1","arg2"), 1;            // print number to current output device
000113  000317  // Syntax: putnum(format, value);
000114  000318  // Usage : var := putnum(HEX, val);
000115  000319  // Notes : prints a 16bit number in various formats to the current output stream, usually the display.
000116  000320  //     : Format: A constant that specifies the number format
000117  000321  //     : Value : The number to be printed
000118  000322  //     : (      DECIMAL   )    (   UNSIGNED DECIMAL )    (    HEX         )     (    BINARY          )
000119  000323  //     : DEC     DECZ     DECZB     UDEC     UDECZ     UDECZB     HEX     HEXZ     HEXZB     BIN     BINZ     BINZB
000120  000324  //     : DEC1 DEC1Z     DEC1ZB     UDEC1     UDEC1Z     UDEC1ZB HEX1     HEX1Z     HEX1ZB     BIN1     BIN1Z     BIN1ZB
000121  000325  //     : DEC2 DEC2Z     DEC2ZB     UDEC2     UDEC2Z     UDEC2ZB HEX2     HEX2Z     HEX1ZB     BIN2     BIN2Z     BIN2ZB
000122  000326  //     : DEC3 DEC3Z     DEC3ZB     UDEC3     UDEC3Z     UDEC3ZB HEX3     HEX3Z     HEX1ZB     BIN3     BIN3Z     BIN3ZB
000123  000327  //     : DEC4 DEC4Z     DEC4ZB     UDEC4     UDEC4Z     UDEC4ZB HEX4     HEX4Z     HEX1ZB     BIN4     BIN4Z     BIN4ZB
000124  000328  //     : DEC5 DEC5Z     DEC5ZB     UDEC5     UDEC5Z     UDEC5ZB             BIN5     BIN5Z     BIN5ZB
000125  000329  //     :                                     BIN6     BIN6Z     BIN6ZB
000126  000330  //     :                                     BIN7     BIN7Z     BIN7ZB
000127  000331  //     :                                     BIN8     BIN8Z     BIN8ZB
000128  000332  //     :                                     BIN9     BIN9Z     BIN9ZB
000129  000333  //     :                                     BIN10     BIN10Z     BIN10ZB
000130  000334  //     :                                     BIN11     BIN11Z     BIN11ZB
000131  000335  //     :                                     BIN12     BIN12Z     BIN12ZB
000132  000336  //     :                                     BIN13     BIN13Z     BIN13ZB
000133  000337  //     :                                     BIN14     BIN14Z     BIN14ZB
000134  000338  //     :                                     BIN15     BIN15Z     BIN15ZB
000135  000339  //     :                                     BIN16     BIN16Z     BIN16ZB
000136  000340  //     : field: Returns the the default width of the numeric field (digit count), usually ignored.
000137  000341  //     : bit 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0
000138  000342  //     : | | | | \___ ___/ \__ __/ \_____ _____/
000139  000343  //     : | | | | V V V
000140  000344  //     : | | | | | | |
000141  000345  //     : | | | | | |
000142  000346  //     : | | | | (nb 0 = 16) | |____BASE (usually 2,10 or 16)
000143  000347  //     : | | | | digit count |
000144  000348  //     : | | | | |___reserved (not used on GOLDELOX)
000145  000349  //     : | | | |
000146  000350  //     : | | | |
000147  000351  //     : | | | |
000148  000352  //     : | | | |
000149  000353  //     : | | | |
000150  000354  //     : | | | |______ 1 = leading zeros included
000151  000355  //     : | | | 0 = leading zeros suppressed
000152  000356  //     : | | |
000153  000357  //     : | | |
000154  000358  //     : | | |_______ 1 = leading zero blanking
000155  000359  //     : | |
000156  000360  //     : | |_____ sign bit (0 = signed, 1 = unsigned)
000157  000361  //     : |
000158  000362  //     : |______ 1 = space before unsigned number
000159  000363        
000160  000364        
000161  000365  func translate("arg1","arg2","arg3","arg4"), 1; // list translator (internal use only, not usable)
000162  000366        
000163  000367  func putstr("string"), 1;                       // print string to current output device
000164  000368  // Syntax: putstr(pointer);
000165  000369  // Usage : putstr("HELLO\n");
000166  000370  // Notes : putstr prints a string to the current output stream, usually the display. The argument can be
000167  000371  //       : a string constant, a word aligned pointer to a string, a pointer to an array, or a pointer to
000168  000372  //       : a data statement. Note that string constants and data statement pointers are byte aligned.
000169  000373  //       : The output of putstr can be redirected to the communications port, the media, or memory
000170  000374  //       : using the to(...); function.
000171  000375  //       : A string constant is automatically terminated with a zero.
000172  000376  //       : A string in a data statement is not automatically terminated with a zero.
000173  000377  //       : All variables in 4DGL are 16bit, if an array is used for holding 8 bit characters, each array
000174  000378  //       : element packs 1 or 2 characters.
000175  000379        
000176  000380        
000177  000381  func strlen("varAddress"), 1;                   // return length of a var packed string in character units
000178  000382  // Syntax: strlen("varAddress);
000179  000383  // Usage : strlen("HELLO\n");
000180  000384  // Notes : gives the length of a string that is packed into regular var array
000181  000385  //       : Use str_Length(ptr)  for string pointer mode
000182  000386        
000183  000387        
000184  000388  //==============================================//
000185  000389  // Memory Access Function Prototypes            //
000186  000390  //==============================================//
000187  000391                                                  //
000188  000392  func peekW("address"), 1;                       // read a word from system memory
000189  000393  func pokeW("address", "wordvalue"), 0;          // write a word to system memory
000190  000394  // refer to address map of internal variables   //
000191  000395  //==============================================//
000192  000396  // Math Functions                               //
000193  000397  //==============================================//
000194  000398                                                  //
000195  000399  func ABS("value"), 1;                           // return a positive number
000196  000400  // Syntax: ABS(value);
000197  000401  // Usage : var := ABS(arg);
000198  000402  // Notes : Returns the absolute value of an argument
000199  000403        
000200  000404  func MIN("value1", "value2"), 1;                // return the smaller of 2 numbers
000201  000405  // Syntax: MIN(value1, value2);
000202  000406  // Usage : var := MIN(arg1, arg2);
000203  000407  // Notes : Returns the minimum of 2 arguments
000204  000408        
000205  000409  func MAX("value1", "value2"), 1;                // return the larger of 2 numbers
000206  000410  // Syntax: MAX(value1, value2);
000207  000411  // Usage : var := MAX(arg1, arg2);
000208  000412  // Notes : Returns the maximum of 2 arguments
000209  000413        
000210  000414  func SWAP("&var", "&var"), 0;                   // swap 2 variables, arguments must point to variables
000211  000415  // Syntax: SWAP(&var1, &var2);
000212  000416  // Usage : SWAP(&var1, &var2);
000213  000417  // Notes : Swaps the contents of 2 variables or memory locations
000214  000418        
000215  000419  func SIN("angle"), 1;                           // return SIN of angle
000216  000420  // Syntax: SIN(angle);
000217  000421  // Usage : var := SIN(arg);
000218  000422  // Notes : Returns the sine in radians of an argument in degrees
000219  000423  //       : the returned value range is from 127 to -127. The real
000220  000424  //       : cosine values vary from 1.0 to -1.0 so appropriate
000221  000425  //       : scaling must be done in user code.
000222  000426        
000223  000427  func COS("angle"), 1;                           // return COS of angle
000224  000428  // Syntax: COS(angle);
000225  000429  // Usage : var := COS(arg);
000226  000430  // Notes : Returns the cosine in radians of an argument in degrees
000227  000431  //       : the returned value range is from 127 to -127. The real
000228  000432  //       : cosine values vary from 1.0 to -1.0 so appropriate
000229  000433  //       : scaling must be done in user code.
000230  000434        
000231  000435  func RAND(), 1;                                 // return a pseudo random number
000232  000436  // Syntax: RAND();
000233  000437  // Usage : var := RAND();
000234  000438  // Notes : Returns a random number between 0 and 0xFFFF.
000235  000439  //       : The random number generator must first be seeded
000236  000440  //       : by using the SEED(number) function.
000237  000441        
000238  000442  func SEED("number"), 0;                         // re-seed the pseudo random number generator
000239  000443  // Syntax: SEED(number);
000240  000444  // Usage : SEED(arg);
000241  000445  // Notes : Seeds the random number generator.
000242  000446        
000243  000447  func OVF(), 1;                                  // returns upper 16bits of 32bit results
000244  000448  // Syntax: OVF();
000245  000449  // Usage : loWord := 0x2710 * 0x2710;           // (10000 * 10000 in hex format)
000246  000450  //       : hiWord := OVF();
000247  000451  // Notes : This function returns the high order 16 bits from certain math and shift functions..
000248  000452        
000249  000453  func SQRT("number"), 1;                         // return square root of a number
000250  000454  // Syntax: SQRT(number);
000251  000455  // Usage : SQRT(arg);
000252  000456  // Notes : Returns the integer square root of a number.
000253  000457  //------------------------------------------------------------------//
000254  000458  //          Text Related Function Prototypes
000255  000459  //------------------------------------------------------------------//
000256  000460        
000257  000461  func txt_MoveCursor("line", "column"), 0;
000258  000462  // Syntax: txt_SetCursor(line, column);
000259  000463  // Usage : txt_SetCursor(arg1, arg2);
000260  000464  // Notes : Moves the text Cursor to a new screen position set by
000261  000465  //       : line,column parameters.
000262  000466        
000263  000467  func txt_Set("mode", "value"), 0;
000264  000468  // Syntax: txt_Set(mode, value);
000265  000469  // Usage : txt_Set(arg1, arg2);
000266  000470  // Returns : Original value before the change
000267  000471  // Notes : Sets various text related parameters used by other functions
000268  000472  //       : This allows the features to be set programatically with a
000269  000473  //       : single function call.It is strongly recommended to use the
000270  000474  //       : pre-defined constants rather than the mode numbers.
000271  000475  //       : NB:- Although it is often required to be able to set text
000272  000476  //       : functions with a single function call for graphics engine
000273  000477  //       : related functions, there is a complete set of single parameter
000274  000478  //       : shortcut functions that have exactly the same function as
000275  000479  //       : each of the txt_Set modes and saves 1 parameter / uses less memory
000276  000480  //       :
000277  000481  //       : mode = TEXT_COLOUR (mode 0)
000278  000482  //       : txt_Set(TEXT_COLOUR, value);
000279  000483  //       : value = 0 to 0xFFFF, Black to White
000280  000484  //       : Sets the Text colour for the display
000281  000485  //       : Default = LIME.
000282  000486  //       :
000283  000487  //       : mode = TEXT_HIGHLIGHT (mode 1)
000284  000488  //       : txt_Set(TEXT_HIGHLIGHT, value);
000285  000489  //       : value = 0 to 0xFFFF, Black to White
000286  000490  //       : Sets the Text background colour for the display. Effective
000287  000491  //       : when text mode is Opaque.
000288  000492  //       : Default = BLACK.
000289  000493  //       :
000290  000494  //       : mode = FONT_ID (mode 2)
000291  000495  //       : txt_Set(FONT_ID, value);
000292  000496  //       : value = FONT1, FONT2 or FONT3 for internal fonts
000293  000497  //       : else this value is the name of a font included
000294  000498  //       : in a users program in a data statement.
000295  000499  //       : Default = FONT SIZE 3.
000296  000500  //       :
000297  000501  //       : mode = TEXT_WIDTH  (mode 3)
000298  000502  //       : txt_Set(TEXT_WIDTH, value);
000299  000503  //       : value = 1 to 16
000300  000504  //       : Sets the Text Width multiplier
000301  000505  //       : text will be printed magnified horizontally
000302  000506  //       : by this factor, Default = 1.
000303  000507  //       :
000304  000508  //       : mode = TEXT_HEIGHT  (mode 4)
000305  000509  //       : txt_Set(TEXT_HEIGHT, value);
000306  000510  //       : value = 1 to 16
000307  000511  //       : Sets the Text Height multiplier
000308  000512  //       : text will be printed magnified vertically
000309  000513  //       : by this factor, Default = 1.
000310  000514  //       :
000311  000515  //       : mode = TEXT_XGAP  (mode 5)
000312  000516  //       : txt_Set(TEXT_XGAP, value);
000313  000517  //       : value = 1 to 32
000314  000518  //       : Sets the horizontal gap between characters
000315  000519  //       : The gap is in pixel units, Default = 0
000316  000520  //       :
000317  000521  //       : mode = TEXT_YGAP  (mode 6)
000318  000522  //       : txt_Set(TEXT_YGAP, value);
000319  000523  //       : value = 1 to 32
000320  000524  //       : Sets the vertical gap below characters
000321  000525  //       : The gap is in pixel units, Default = 0
000322  000526  //       :
000323  000527  //       : mode = TEXT_PRINTDELAY  (mode 7) DEPRECATED
000324  000528  //       : txt_Set(TEXT_PRINTDELAY, value);
000325  000529  //       : value = 0 to 255
000326  000530  //       : Sets the delay time (in ms) during character
000327  000531  //       : printing to give a 'teletype' like effect.
000328  000532  //       : Often used to attract attention to a string
000329  000533  //       : being printed which can often be missed if
000330  000534  //       : just suddenly appearing or changing.
000331  000535  //       : Default = 0 ms.
000332  000536  //       :
000333  000537  //       : mode = TEXT_OPACITY (mode 8)
000334  000538  //       : txt_Set(TEXT_OPACITY, value);
000335  000539  //       : value = TRANSPARENT (0) = Text Trasparent
000336  000540  //       : value = OPAQUE (1) = Text Opaque
000337  000541  //       : Sets the Opacity/Transparency of the text
000338  000542  //       : Default = 0 or TRANSPARENT
000339  000543  //       :
000340  000544  //       : mode = TEXT_BOLD (mode 9)
000341  000545  //       : txt_Set(TEXT_BOLD, value);
000342  000546  //       : value = dont care
000343  000547  //       : Sets Bold Text mode for the next string or char
000344  000548  //       : The feature automatically resets after printing
000345  000549  //       : using putstr or print has completed
000346  000550  //       :
000347  000551  //       : mode = TEXT_ITALIC (mode 10)
000348  000552  //       : txt_Set(TEXT_ITALIC, value);
000349  000553  //       : value = dont care
000350  000554  //       : Sets Italic Text mode for the next string or char
000351  000555  //       : The feature automatically resets after printing
000352  000556  //       : using putstr or print has completed
000353  000557        
000354  000558  //       : mode = TEXT_INVERSE (mode 11)
000355  000559  //       : txt_Set(TEXT_INVERSE, value);
000356  000560  //       : value = dont care
000357  000561  //       : Sets Inverse Text mode for the next string or char
000358  000562  //       : The feature automatically resets after printing
000359  000563  //       : using putstr or print has completed
000360  000564  //       :
000361  000565  //       : mode = TEXT_UNDERLINED (mode 12)
000362  000566  //       : txt_Set(TEXT_UNDERLINED, value);
000363  000567  //       : value = dont care
000364  000568  //       : Sets Underlined Text mode for the next string or char
000365  000569  //       : The feature automatically resets after printing
000366  000570  //       : using putstr or print has completed
000367  000571  //       :
000368  000572  //       : mode = TEXT_ATTRIBUTES (mode 13)
000369  000573  //       : txt_Set(TEXT_ATTRIBUTES, value);
000370  000574  //       : value = bits are defined as:
000371  000575  //       :  BOLD        16          // TEXT_ATTRIBUTES bold text (auto reset)
000372  000576  //       :  ITALIC      32          // TEXT_ATTRIBUTES italic text (auto reset)
000373  000577  //       :  INVERSE     64          // TEXT_ATTRIBUTES inverse text (auto reset)
000374  000578  //       :  UNDERLINED  128         // TEXT_ATTRIBUTES underlined text (auto reset)
000375  000579  //       : Allows a combination of text attributes to be defined together
000376  000580  //       : by 'or'ing the bits together.
000377  000581  //       : Example: txt_Set(TEXT_ATTRIBUTES, BOLD | INVERSE); // bold + inverse
000378  000582  //       : The feature automatically resets after printing
000379  000583  //       : using putstr or print has completed.
000380  000584  //       : Bits 0-3 and 8-15 are reserved for future attributes.
000381  000585  //       :
000382  000586  //       : mode = TEXT_WRAP (mode 14)
000383  000587  //       : txt_Set(TEXT_WRAP , value);
000384  000588  //       : Sets the position where text wrap will occur
000385  000589  //       : The feature automatically resets when screen
000386  000590  //       : mode is changed. If the value is set to 0,
000387  000591  //       : text wrap is turned off.
000388  000592  //       : of the current screen. Default value is 0
000389  000593  // Notes : The value is in pixel units.
000390  000594  //       :
000391  000595        
000392  000596  //       : txt_Set mode 15 reserved for future use
000393  000597  //       :
000394  000598        
000395  000599        
000396  000600        
000397  000601  //=====================================================//
000398  000602  // Single parameter short-cuts                         //
000399  000603  // for the txt_Set functions                           //
000400  000604  // These functions return the existing value before    //
000401  000605  // the change is made.                                 //
000402  000606  //=====================================================//
000403  000607  func txt_FGcolour("colour"), 1;             // 0  text foreground colour
000404  000608  func txt_BGcolour("colour"), 1;             // 1  text background colour
000405  000609  func txt_FontID("id"), 1;                   // 2  text font ID (0 = system font)
000406  000610  func txt_Width("multiplier"), 1;            // 3  text width multiplier
000407  000611  func txt_Height("multiplier"), 1;           // 4  text height multiplier
000408  000612  func txt_Xgap("pixelcount"), 1;             // 5  text gap between characters
000409  000613  func txt_Ygap("pixelcount"), 1;             // 6  text gap between lines
000410  000614  func txt_Delay("millisecs"), 1;             // 7  text printing delay factor
000411  000615  func txt_Opacity("mode"), 1;                // 8  text OPAQUE or TRANSPARENT
000412  000616  func txt_Bold("mode"), 1;                   // 9  text bold ON/OFF
000413  000617  func txt_Italic("mode"), 1;                 // 10 text italic ON/OFF
000414  000618  func txt_Inverse("mode"), 1;                // 11 text inverse ON/OFF
000415  000619  func txt_Underline("mode"), 1;              // 12 text underline ON/OFF
000416  000620  func txt_Attributes("value"), 1;            // 13 text combined bold|italic|inverse|underline
000417  000621  func txt_Wrap("value"), 1;                  // 14 text set text wrap position
000418  000622  func _1F(), 0;                              // 15 text (reserved DO NOT REMOVE)
000419  000623        
000420  000624        
000421  000625  //------------------------------------------------------------------//
000422  000626  //                 Hardware Function Prototypes
000423  000627  //------------------------------------------------------------------//
000424  000628        
000425  000629  // I/O Pin reference:-
000426  000630  //
000427  000631  //    IO1_PIN           is pin 2 of J1
000428  000632  //    IO2_PIN           is pin 1 of J1
000429  000633  //    IO3_PIN           is pin 3 of J1
000430  000634  //    IO4_PIN           is pin 5 of J1 (also used for BUS_RD)
000431  000635  //    IO5_PIN           is pin 9 of J2 (also used for BUS_WR)
000432  000636  //    BUS_RD_PIN        is pin 5 of J1 (alias IO4_PIN)
000433  000637  //    BUS_WR_PIN        is pin 9 of J2 (alias IO5_PIN)
000434  000638  //    BUS_0             is pin 27 of J1
000435  000639  //    BUS_1             is pin 25 of J1
000436  000640  //    BUS_2             is pin 23 of J1
000437  000641  //    BUS_3             is pin 21 of J1
000438  000642  //    BUS_4             is pin 19 of J1
000439  000643  //    BUS_5             is pin 17 of J1
000440  000644  //    BUS_6             is pin 13 of J2
000441  000645  //    BUS_7             is pin 11 of J2
000442  000646  //    BACKLITE          is backlite control pin
000443  000647  //    AUDIO_ENABLE      is amplifier chip control pin
000444  000648        
000445  000649  func pin_Set("mode", "pin"), 1;            // set pin to required mode
000446  000650  // Syntax: pin_Set(mode, pin);
000447  000651  // Usage : pin_Set(arg1, arg2);
000448  000652  // Notes : Sets the appropriate pins to Inputs or Outputs
000449  000653  //       : returns true if the pin number is legal (usually ignored)
000450  000654  //       :
000451  000655  //       : mode = 0 : Set Pin to Output
000452  000656  //       : pin_Set(0, pin);
000453  000657  //       : pin_Set(OUTPUT, pin);
000454  000658  //       : pin = 1  : set IO1_PIN to output (pin 2 J1)
000455  000659  //       : pin = 2  : set IO2_PIN to output (pin 1 J1)
000456  000660  //       : pin = 3  : set IO3_PIN to output (pin 3 J1)
000457  000661  //       : pin = 4  : set IO4_PIN to output (pin 5 J1, also used for BUS_RD)
000458  000662  //       : pin = 5  : set IO5_PIN to output (pin 9 J2, also used for BUS_WR)
000459  000663  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000460  000664  //       : pin = 8  : set BUS_0   to output (pin 27 of J1)
000461  000665  //       : pin = 9  : set BUS_1   to output (pin 25 of J1)
000462  000666  //       : pin = 10 : set BUS_2   to output (pin 23 of J1)
000463  000667  //       : pin = 11 : set BUS_3   to output (pin 21 of J1)
000464  000668  //       : pin = 12 : set BUS_4   to output (pin 19 of J1)
000465  000669  //       : pin = 13 : set BUS_5   to output (pin 17 of J1)
000466  000670  //       : pin = 14 : set BUS_6   to output (pin 13 of J2)
000467  000671  //       : pin = 15 : set BUS_7   to output (pin 11 of J2)
000468  000672  //       : Sets the desired pin to be used as an Output.
000469  000673  //       :
000470  000674  //       : mode = 1 : Set Pin to Input
000471  000675  //       : pin_Set(1, pin);
000472  000676  //       : pin_Set(INPUT, pin);
000473  000677  //       : pin = 1  : set IO1_PIN to input (pin 2 J1)
000474  000678  //       : pin = 2  : set IO2_PIN to input (pin 1 J1)
000475  000679  //       : pin = 3  : set IO3_PIN to input (pin 3 J1)
000476  000680  //       : pin = 4  : set IO4_PIN to input (pin 5 J1, also used for BUS_RD)
000477  000681  //       : pin = 5  : set IO5_PIN to input (pin 9 J2, also used for BUS_WR)
000478  000682  //       : (pin 6,7 are BACKLITE and AMP control and are permanemtly outputs which can't be altered)
000479  000683  //       : pin = 8  : set BUS_0   to input (pin 27 of J1)
000480  000684  //       : pin = 9  : set BUS_1   to input (pin 25 of J1)
000481  000685  //       : pin = 10 : set BUS_2   to input (pin 23 of J1)
000482  000686  //       : pin = 11 : set BUS_3   to input (pin 21 of J1)
000483  000687  //       : pin = 12 : set BUS_4   to input (pin 19 of J1)
000484  000688  //       : pin = 13 : set BUS_5   to input (pin 17 of J1)
000485  000689  //       : pin = 14 : set BUS_6   to input (pin 13 of J2)
000486  000690  //       : pin = 15 : set BUS_7   to input (pin 11 of J2)
000487  000691  //       : Sets the desired pin to be used as an Input.
000488  000692        
000489  000693  func pin_HI("pin"), 1;                    // set pin to logic '1'
000490  000694  // Syntax: pin_HI(pin);
000491  000695  // Usage : pin_HI(arg);
000492  000696  // Notes : Outputs a logic "High" (3.3V) on the appropriate
000493  000697  //       : pin that was previously selected as an Output.
000494  000698  //       : returns true if the pin number is legal (usually ignored)
000495  000699  //       :
000496  000700  //       : pin = 1  : set IO1_PIN to "High" level (pin 2 of J1)
000497  000701  //       : pin = 2  : set IO2_PIN to "High" level (pin 1 of J1)
000498  000702  //       : pin = 3  : set IO3_PIN to "High" level (pin 3 of J1)
000499  000703  //       : pin = 4  : set IO4_PIN to "High" level (pin 5 of J1, also used for BUS_RD)
000500  000704  //       : pin = 5  : set IO5_PIN to "High" level (pin 9 of J2, also used for BUS_WR)
000501  000705  //       : pin = 6  : set DCENB pin to "High" level (BACKLITE ON)
000502  000706  //       : pin = 7  : set AUDIO_ENABL pin to "High" level (AMP OFF)
000503  000707  //       : pin = 8  : set BUS_0   to "High" level (pin 27 of J1)
000504  000708  //       : pin = 9  : set BUS_1   to "High" level (pin 25 of J1)
000505  000709  //       : pin = 10 : set BUS_2   to "High" level (pin 23 of J1)
000506  000710  //       : pin = 11 : set BUS_3   to "High" level (pin 21 of J1)
000507  000711  //       : pin = 12 : set BUS_4   to "High" level (pin 19 of J1)
000508  000712  //       : pin = 13 : set BUS_5   to "High" level (pin 17 of J1)
000509  000713  //       : pin = 14 : set BUS_6   to "High" level (pin 13 of J2)
000510  000714  //       : pin = 15 : set BUS_7   to "High" level (pin 11 of J2)
000511  000715        
000512  000716  func pin_LO("pin"), 1;                    // set pin to logic '0'
000513  000717  // Syntax: pin_LO(pin);
000514  000718  // Usage : pin_LO(arg);
000515  000719  // Notes : Outputs a logic "Low" (0V) on the appropriate
000516  000720  //       : pin that was previously selected as an Output.
000517  000721  //       : returns true if the pin number is legal (usually ignored)
000518  000722  //       :
000519  000723  //       : pin = 1 : set IO1_PIN to "Low" level (pin 2 of J1)
000520  000724  //       : pin = 2 : set IO2_PIN to "Low" level (pin 1 of J1)
000521  000725  //       : pin = 3 : set IO3_PIN to "Low" level (pin 3 of J1)
000522  000726  //       : pin = 4 : set IO4_PIN to "Low" level (pin 5 of J1, also used for BUS_RD)
000523  000727  //       : pin = 5 : set IO5_PIN to "Low" level (pin 9 of J2, also used for BUS_WR)
000524  000728  //       : pin = 6 : set DCENB pin to "Low" level (BACKLITE)
000525  000729  //       : pin = 7 : set AUDIO_ENABL pin to "Low" level (AMP ON)
000526  000730  //       : pin = 8  : set BUS_0  to "Low" level (pin 27 of J1)
000527  000731  //       : pin = 9  : set BUS_1  to "Low" level (pin 25 of J1)
000528  000732  //       : pin = 10 : set BUS_2  to "Low" level (pin 23 of J1)
000529  000733  //       : pin = 11 : set BUS_3  to "Low" level (pin 21 of J1)
000530  000734  //       : pin = 12 : set BUS_4  to "Low" level (pin 19 of J1)
000531  000735  //       : pin = 13 : set BUS_5  to "Low" level (pin 17 of J1)
000532  000736  //       : pin = 14 : set BUS_6  to "Low" level (pin 13 of J2)
000533  000737  //       : pin = 15 : set BUS_7  to "Low" level (pin 11 of J2)
000534  000738        
000535  000739  func pin_Read("pin"), 1;                // read pin, logic or analogue
000536  000740  // Syntax: pin_Read(pin);
000537  000741  // Usage : arg1 := pin_Read(arg2);
000538  000742  // Notes : Reads the logic state of the appropriate
000539  000743  //       : pin that was previously selected as an Input.
000540  000744  //       :
000541  000745  //       : pin = 1  : Read the state of IO1_PIN (pin 2 of J1)
000542  000746  //       : pin = 2  : Read the state of IO2_PIN (pin 1 of J1)
000543  000747  //       : pin = 3  : Read the state of IO3_PIN (pin 3 of J1)
000544  000748  //       : pin = 4  : Read the state of IO4_PIN (pin 5 of J1, also used for BUS_RD)
000545  000749  //       : pin = 5  : Read the state of IO5_PIN (pin 9 of J2, also used for BUS_WR)
000546  000750  //       : pin = 6  : Read the state of DCENB pin to "Low" level (BACKLITE)
000547  000751  //       : pin = 7  : Read the state of AUDIO_ENABL pin to "Low" level (AMP ON)
000548  000752  //       : pin = 8  : Read the state of BUS_0   (pin 27 of J1)
000549  000753  //       : pin = 9  : Read the state of BUS_1   (pin 25 of J1)
000550  000754  //       : pin = 10 : Read the state of BUS_2   (pin 23 of J1)
000551  000755  //       : pin = 11 : Read the state of BUS_3   (pin 21 of J1)
000552  000756  //       : pin = 12 : Read the state of BUS_4   (pin 19 of J1)
000553  000757  //       : pin = 13 : Read the state of BUS_5   (pin 17 of J1)
000554  000758  //       : pin = 14 : Read the state of BUS_6   (pin 13 of J2)
000555  000759  //       : pin = 15 : Read the state of BUS_7   (pin 11 of J2)
000556  000760  //       : Returns a 0 (logic low) or 1 (logic high).
000557  000761        
000558  000762        
000559  000763  //------------------------------------------------------------------//
000560  000764  //                 P1 module BUS I/O control
000561  000765  //------------------------------------------------------------------//
000562  000766        
000563  000767  func bus_In(), 1;
000564  000768  // Syntax: bus_In();
000565  000769  // Usage : arg1 := bus_In();
000566  000770  // Notes : Read the 8bit wide bus into the lower 8 bits of arg1.
000567  000771  //       : The upper 8 bits of arg1 are set to 0.
000568  000772  //       : the BUS_RD and BUS_WR pins are not affected.
000569  000773  //       :
000570  000774  //       : BUS_0 is pin 27 of J1
000571  000775  //       : BUS_1 is pin 25 of J1
000572  000776  //       : BUS_2 is pin 23 of J1
000573  000777  //       : BUS_3 is pin 21 of J1
000574  000778  //       : BUS_4 is pin 19 of J1
000575  000779  //       : BUS_5 is pin 17 of J1
000576  000780  //       : BUS_6 is pin 13 of J2
000577  000781  //       : BUS_7 is pin 11 of J2
000578  000782        
000579  000783  func bus_Out("var"), 0;
000580  000784  // Syntax: bus_Out(var);
000581  000785  // Usage : bus_Out(arg1);
000582  000786  // Notes : The lower 8 bits of arg1 are placed on the 8bit wide bus.
000583  000787  //       : The upper 8 bits of arg1 are ignored.
000584  000788  //       : the BUS_RD and BUS_WR pins are not affected.
000585  000789  //       : NB:- any BUS pins that are set to inputs are not affected.
000586  000790  //       :
000587  000791  //       : BUS_0 is pin 27 of J1
000588  000792  //       : BUS_1 is pin 25 of J1
000589  000793  //       : BUS_2 is pin 23 of J1
000590  000794  //       : BUS_3 is pin 21 of J1
000591  000795  //       : BUS_4 is pin 19 of J1
000592  000796  //       : BUS_5 is pin 17 of J1
000593  000797  //       : BUS_6 is pin 13 of J2
000594  000798  //       : BUS_7 is pin 11 of J2
000595  000799        
000596  000800  func bus_Set("var"), 0;
000597  000801  // Syntax: bus_Set(var);
000598  000802  // Usage : bus_Set(arg1);
000599  000803  // Notes : The lower 8 bits of arg1 are placed in the BUS direction register.
000600  000804  //       : a '1' sets a pin to be an input, a '0' sets a pin to be output.
000601  000805  //       : The upper 8 bits of arg1 are ignored.
000602  000806  //       : the BUS_RD and BUS_WR pins are not affected.
000603  000807  //       :
000604  000808  //       : BUS_0 is pin 27 of J1
000605  000809  //       : BUS_1 is pin 25 of J1
000606  000810  //       : BUS_2 is pin 23 of J1
000607  000811  //       : BUS_3 is pin 21 of J1
000608  000812  //       : BUS_4 is pin 19 of J1
000609  000813  //       : BUS_5 is pin 17 of J1
000610  000814  //       : BUS_6 is pin 13 of J2
000611  000815  //       : BUS_7 is pin 11 of J2
000612  000816        
000613  000817  func bus_Write("var"), 0;
000614  000818  // Syntax: bus_Write(var);
000615  000819  // Usage : bus_Write(arg1);
000616  000820  // Notes : The lower 8 bits of arg1 are placed on the BUS, then, after
000617  000821  //       : a settling delay of approx 50nsec, the BUS_WR pin is strobed
000618  000822  //       : LO for approx 50nsec then set back HI.
000619  000823  //       : The upper 8 bits of arg1 are ignored.
000620  000824  //       : NB:- the BUS_WR pin is automatically pre-set to an output to
000621  000825  //       : ensure BUS write integrity.
000622  000826  //       :
000623  000827  //       : BUS_0 is pin 27 of J1
000624  000828  //       : BUS_1 is pin 25 of J1
000625  000829  //       : BUS_2 is pin 23 of J1
000626  000830  //       : BUS_3 is pin 21 of J1
000627  000831  //       : BUS_4 is pin 19 of J1
000628  000832  //       : BUS_5 is pin 17 of J1
000629  000833  //       : BUS_6 is pin 13 of J2
000630  000834  //       : BUS_7 is pin 11 of J2
000631  000835        
000632  000836  func bus_Read(), 1;
000633  000837  // Syntax: bus_Read();
000634  000838  // Usage : arg1 := bus_Read();
000635  000839  // Notes : The BUS_RD pin set to LO, then, after a settling delay
000636  000840  //       : of approx 50nsec, the BUS is read into the lower 8 bits of arg
000637  000841  //       : (the upper 8 bits being set to 0)
000638  000842  //       : the BUS_RD pin is then set back to a HI level.
000639  000843  //       : NB:- the BUS_RD pin is automatically pre-set to an output to
000640  000844  //       : ensure BUS write integrity.
000641  000845  //       :
000642  000846  //       : BUS_0 is pin 27 of J1
000643  000847  //       : BUS_1 is pin 25 of J1
000644  000848  //       : BUS_2 is pin 23 of J1
000645  000849  //       : BUS_3 is pin 21 of J1
000646  000850  //       : BUS_4 is pin 19 of J1
000647  000851  //       : BUS_5 is pin 17 of J1
000648  000852  //       : BUS_6 is pin 13 of J2
000649  000853  //       : BUS_7 is pin 11 of J2
000650  000854        
000651  000855        
000652  000856  //------------------------------------------------------------------//
000653  000857  //   Graphics Functions
000654  000858  //------------------------------------------------------------------//
000655  000859  func gfx_Set("mode", "value"), 0;            // set various graphics functions
000656  000860  // Syntax: gfx_Set(mode, value);
000657  000861  // Usage : gfx_Set(arg1, arg2);
000658  000862  // Notes : Sets various graphics parameters used by other functions
000659  000863  //       : This allows the features to be set programatically with a
000660  000864  //       : single function call.It is strongly recommended to use the
000661  000865  //       : pre-defined constants rather than the mode numbers.
000662  000866  //       : NB:- Although it is often required to be able to set graphics
000663  000867  //       : functions with a single function call for graphics engine
000664  000868  //       : related functions, there is a complete set of single parameter
000665  000869  //       : shortcut functions that have exactly the same function as
000666  000870  //       : each of the gfx_Set modes and saves 1 parameter / uses less memory
000667  000871  //       :
000668  000872  //       : mode = PEN_SIZE (mode 16)
000669  000873  //       : gfx_Set(PEN_SIZE, value);
000670  000874  //       : value = SOLID (value 0) rectangle and circle objects are solid
000671  000875  //       : value = OUTLINE (value 1) rectangle and circle objects are outlines
000672  000876  //       : Sets the mode of the Pen used by most graphics objects
000673  000877  //       :
000674  000878  //       : mode = BACKGROUND_COLOUR (mode 17)
000675  000879  //       : gfx_Set(BACKGROUND_COLOUR, value);
000676  000880  //       : value = 0 to 0xFFFF, Black to White
000677  000881  //       : Sets the Background colour of the screen
000678  000882  //       :
000679  000883  //       : mode = OBJECT_COLOUR (mode 18)
000680  000884  //       : gfx_Set(OBJECT_COLOUR, value);
000681  000885  //       : value = 0 to 0xFFFF, Black to White
000682  000886  //       : Sets the Object colour used in various functions
000683  000887  //       : LineTo(,,); LineRel(,,); BoxTo(,,); Dot(); etc.
000684  000888  //       :
000685  000889  //       : mode = CLIPPING (mode 19)
000686  000890  //       : gfx_Set(CLIPPING, value);
000687  000891  //       : value = OFF (value 0) Clipping disabled
000688  000892  //       : value = ON (value 1) Clipping enabled
000689  000893  //       : Enables/Disables the Clipping feature
000690  000894  //       :
000691  000895  //       : mode = TRANSPARENT_COLOUR (mode 20) : Image or Animation Transparency Colour.
000692  000896  //       : gfx_Set(TRANSPARENT_COLOUR, value);
000693  000897  //       : value = 0 to 0xFFFF Black to White
000694  000898  //       : Sets Bitmap, Image or Animation Transparency Colour.
000695  000899  //       : NB not implemented
000696  000900  //       :
000697  000901  //       : mode = TRANSPARENCY (mode 21) : Bitmap/Image/Animation Transparency
000698  000902  //       : gfx_Set(5, value);
000699  000903  //       : value = OFF (value 0) Transparency disabled
000700  000904  //       : value = ON (value 1) Transparency enabled
000701  000905  //       : Enables/Disables the Transparency feature
000702  000906  //       : NB not implemented
000703  000907  //       :
000704  000908  //       : mode = FRAME_DELAY (mode 22) : Inter-Frame Delay
000705  000909  //       : gfx_Set(FRAME_DELAY, value);
000706  000910  //       : value = 0 to 65535 ms
000707  000911  //       : Sets the Video/Animation clip inter-frame delay. This setting will
000708  000912  //       : over-ride the embedded frame delay of the clip. After the event,
000709  000913  //       : the setting will auto disable and if further inter-frame delays need
000710  000914  //       : overriding the setting must be re-issued.
000711  000915  //       :
000712  000916  //       : mode = SCREEN_MODE (mode 23) : Set required screen behaviour
000713  000917  //       : gfx_Set(SCREEN_MODE, value);
000714  000918  //       : value = LANDSCAPE   (value 0)
000715  000919  //       : value = LANDSCAPE_R (value 1)
000716  000920  //       : value = PORTRAIT    (value 2)
000717  000921  //       : value = PORTRAIT_R  (value 3)
000718  000922  //       :
000719  000923  //       : mode = OUTLINE_COLOUR (mode 24) : Outline Colour
000720  000924  //       : gfx_Set(OUTLINE_COLOUR, value);
000721  000925  //       : value = 1 to 0xFFFF, if 0, featre is OFF
000722  000926  //       : Sets the filled Rectangle or Circle objects outline colour
000723  000927  //       : If outline colour, is 0, OUTLINE_COLOUR feature is disabled
000724  000928  //       : gfx_Set(OUTLINE_COLOUR, OFF); may be used for this
000725  000929  //       :
000726  000930  //       : Only supports variable contrast for uOLED Modules
000727  000931  //       : mode = CONTRAST (mode 25) : Contrast
000728  000932  //       : gfx_Set(CONTRAST, value);
000729  000933  //       : value = 0 to 9, 0=off, 1=lowest, 8=highest contrast
000730  000934  //       : when contrast=0, display is placed in low power mode.
000731  000935  //       : This function should be called with contrast=0 when
000732  000936  //       : powering down the module.
000733  000937  //       :
000734  000938  //       : mode = LINE_PATTERN (mode 26) : Line Pattern
000735  000939  //       : gfx_Set(LINE_PATTERN, value);
000736  000940  //       : gfx_Set(LINE_PATTERN, 0b1111000011110000); // draw dotted line
000737  000941  //       : gfx_Set(LINE_PATTERN, OFF); // line patterning OFF
000738  000942  //       : a value of 0 turns the feature off
000739  000943  //       :
000740  000944  //       : mode = COLOUR_MODE (mode 27) : 8/16 bit colour mode
000741  000945  //       : gfx_Set(COLOUR_MODE , COLOUR16);   // set 16bit colour mode
000742  000946  //       : gfx_Set(COLOUR_MODE , COLOUR8);   // set 8bit colour mode
000743  000947  //       : NB not implemented, default is COLOUR16
000744  000948  //       :
000745  000949  //       : mode = BEVEL_WIDTH (mode 28) : set button and slider bevel width
000746  000950  //       : gfx_Set(BEVEL_WIDTH , 5);   // set bevel lines to 5 pixels wide
000747  000951  //       : sets the button and slider objects bevel width
000748  000952  //       :
000749  000953  //       : mode = BEVEL_SHADOW (mode 29) : set bevel shadowing depth for buttons and sliders
000750  000954  //       : gfx_Set(BEVEL_SHADOW , 5);
000751  000955  //       : sets the button and slider objects darken and lighten depth for the bevel colour
000752  000956  //       :
000753  000957  //       : mode = X_ORIGIN (mode 29) : set x offset for screen
000754  000958  //       : gfx_Set(X_ORIGIN , 25);  // object are offset 25 pixels from LHS
000755  000959  //       : sets the origin of drawn objects to a position other than 0,0
000756  000960  //       :
000757  000961  //       : mode = Y_ORIGIN (mode 29) : set y offset for screen
000758  000962  //       : gfx_Set(Y_ORIGIN , 30);  // object are offset 30 pixels from TOP
000759  000963  //       : sets the origin of drawn objects to a position other than 0,0
000760  000964        
000761  000965        
000762  000966  func gfx_Cls(), 0;                    // clear the screen
000763  000967  // Syntax: gfx_Cls();
000764  000968  // Usage : gfx_Cls();
000765  000969  // Notes : Clears the screen with current background colour
000766  000970        
000767  000971  func gfx_MoveTo("x", "y"), 0;                // set glb_X1 and glb_Y1 to required co-ordinate
000768  000972  // Syntax: gfx_MoveTo(x, y);
000769  000973  // Usage : gfx_MoveTo(arg1, arg2);
000770  000974  // Notes : Moves the origin to a new x,y position
000771  000975        
000772  000976  func gfx_MoveRel("x", "y"), 0;                // set glb_X1 and glb_Y1 to new relative offset
000773  000977  // Syntax: gfx_MoveRel(x, y);
000774  000978  // Usage : gfx_MoveRel(arg1, arg2);
000775  000979  // Notes : Moves the origin to a new x,y position
000776  000980  //       : relative to the current origing
000777  000981        
000778  000982  func gfx_LineTo("x1", "y1"), 0;                     // draw line from current origin to new point
000779  000983  // Syntax: gfx_LineTo(x1, y1);
000780  000984  // Usage : gfx_LineTo(arg1, arg2);
000781  000985  // Notes : Draws a Line from the origin x,y to x1,y1.
000782  000986  //       : The new origin is then set to x1, y1. Line colour needs
000783  000987  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000784  000988        
000785  000989  func gfx_LineRel("x1", "y1"), 0;                    // draw line from current origin to new relative offset
000786  000990  // Syntax: gfx_LineRel(x1, y1);
000787  000991  // Usage : gfx_LineRel(arg1, arg2);
000788  000992  // Notes : Draws a Line from the origin x,y to x1,y1.
000789  000993  //       : Unlike gfx_MoveTo() the origin is not updated with x1, y1. Line colour needs
000790  000994  //       : to be preset with "Set Object colour" using gfx_Set(OBJECT_COLOUR, colour);
000791  000995        
000792  000996  func gfx_Line("x1", "y1", "x2", "y2", "colr"), 0;   // draw line, can be patterned
000793  000997  // Syntax: gfx_Line(x1, x2, y2, colr);
000794  000998  // Usage : gfx_Line(arg1, arg2, arg3, arg4, arg5);
000795  000999  // Notes : Plots a coloured Line from x1,y1 to x2,y2 on the screen
000796  001000        
000797  001001  func gfx_Hline("y", "x1", "x2", "colr"), 1;         // draw Hline, can be patterned
000798  001002  // Syntax: gfx_Line(x1, x2, y, colr);
000799  001003  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000800  001004  // Notes : Plots a coloured Horizontal line from x1,y to x2,y on the screen
000801  001005        
000802  001006  func gfx_Vline("x", "y1", "y2", "colr"), 1;         // draw Vline, can be patterned
000803  001007  // Syntax: gfx_Line(y1, y2, x, colr);
000804  001008  // Usage : gfx_Line(arg1, arg2, arg3, arg4);
000805  001009  // Notes : Plots a coloured Vertical line from x,y1 to x,y2 on the screen
000806  001010        
000807  001011  func gfx_Rectangle("x1" ,"y1", "x2", "y2", "colr"), 0;    // draw open rectangle,line can be patterned
000808  001012  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colr);
000809  001013  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000810  001014  // Notes : Plots a coloured Outline Rectangle from top corner (x1,y1) to
000811  001015  //       : bottom corner (x2,y2) on the screen.
000812  001016        
000813  001017  func gfx_RectangleFilled("x1","y1","x2","y2","colr"), 0;    // draw filled rectangle
000814  001018  // Syntax: gfx_Rectangle(x1, y1, x2, y2, colour);
000815  001019  // Usage : gfx_Rectangle(arg1, arg2, arg3, arg4, arg5);
000816  001020  // Notes : Plots a coloured Solid Rectangle from top corner (x1,y1) to
000817  001021  //       : bottom corner (x2,y2) on the screen.
000818  001022        
000819  001023  func gfx_Circle("x", "y", "rad", "colr"), 0;        // draw open circle
000820  001024  // Syntax: gfx_Circle(x, y, rad, colr);
000821  001025  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000822  001026  // Notes : Plots a coloured outline Circle on the screen at centre x,y with radius = rad
000823  001027        
000824  001028  func gfx_CircleFilled("x", "y", "rad", "colr"), 0;    // draw filled circle
000825  001029  // Syntax: gfx_Circle(x, y, rad, colr);
000826  001030  // Usage : gfx_Circle(arg1, arg2, arg3, arg4);
000827  001031  // Notes : Plots a coloured Solid Circle on the screen at centre x,y with radius = rad
000828  001032        
000829  001033  func gfx_PutPixel("x", "y", "colr"), 0;            // set point at x y
000830  001034  // Syntax: gfx_PutPixel(x, y, colr);
000831  001035  // Usage : gfx_PutPixel(arg1, arg2, arg3);
000832  001036  // Notes : Plots a coloured pixel on the screen at x,y location
000833  001037        
000834  001038  func gfx_GetPixel("x", "y"), 1;                // read colour at point x y
000835  001039  // Syntax: gfx_GetPixel(x, y);
000836  001040  // Usage : var := gfx_GetPixel(arg1, arg2);
000837  001041  // Notes : Reads and returns the colour value of a pixel at location x,y
000838  001042        
000839  001043  func gfx_Triangle("x1","y1","x2","y2","x3","y3","colr"), 0; // draw an open triangle
000840  001044  // Syntax: gfx_Triangle(x1, y1, x2, y2, x3, y3, colr);
000841  001045  // Usage : gfx_Triangle(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000842  001046  // Notes : Plots a coloured outline Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000843  001047  //       : Vertices must be specified in an anti-clockwise fashion
000844  001048        
000845  001049  func gfx_OrbitInit("&x_orb", "&y_orb"), 0;        // set result holders for orbit command
000846  001050  // Syntax: gfx_OrbitInit(&x_orb, &y_orb);
000847  001051  // Usage : gfx_OrbitInit(&arg1, &arg2);
000848  001052  // Notes : Sets up the Orbit function parameters.
000849  001053  //       : &x_orb, &y_orb: calcualted Orbit coordiantes. These are pointers to local
000850  001054  //       : variables that get updated after calling gfx_Orbit(,,) function.
000851  001055  //       : The coordiantaes are calculated relative to the origin
000852  001056  //       : obtained by using the gfx_MoveTo(x, y) function.
000853  001057        
000854  001058  func gfx_Orbit("angle", "distance"), 0;            // calculate point at angle, distance
000855  001059  // Syntax: gfx_Orbit(angle, distance);
000856  001060  // Usage : gfx_Orbit(arg1, arg2);
000857  001061  // Notes : The Orbit function calcualtes the x, y coordinates of a distant point whose
000858  001062  //       : only known parameters are the angle and the distance from the current origin.
000859  001063        
000860  001064  func gfx_Polyline("n", "&vx", "&vy", "colr"), 0;    // draw a polyline from a table of vertices
000861  001065  // Syntax: gfx_Polyline(numbVertices, &vertices_x, &vertices_y, colour);
000862  001066  // Usage : gfx_Polyline(arg1, x[array], y[array], arg2);
000863  001067  // Notes : This function is very similar to the Ploygon function
000864  001068  //       : with the exception of the 1st and the last vertices not joined.
000865  001069        
000866  001070  func gfx_Polygon("n", "&vx", "&vy", "colr"), 0;        // draw a polygon from a table of vertices
000867  001071  // Syntax: gfx_Polygon(numbVertices, &vx, &y, colour);
000868  001072  // Usage : gfx_Polygon(arg1, x[array], y[array], arg2);
000869  001073  // Notes : Plots a coloured outline Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
000870  001074  //       : Vertices must be minimum of 3 and can be specified in any fashion
000871  001075        
000872  001076  func gfx_Dot(), 0;                    // set point at glb_X glb_Y, default colour
000873  001077  // Syntax: gfx_Dot();
000874  001078  // Usage : gfx_Dot();
000875  001079  // Notes : Places a coloured dot at the origin
000876  001080        
000877  001081        
000878  001082  func gfx_Bullet("r"), 0;                // draw circle at glb_X glb_Y, default colour
000879  001083  // Syntax: gfx_Bullet();
000880  001084  // Usage : gfx_Bullet();
000881  001085  // Notes : Places a coloured circle at the origin
000882  001086  //       : filled or unfilled state is controlled by PenSize
000883  001087        
000884  001088  func gfx_IncX(), 1;                    // increment global origin glb_X, returning new value
000885  001089  // Syntax: gfx_IncX();
000886  001090  // Usage : var := gfx_IncX();
000887  001091  // Notes : Increments the x coordinate of the origin
000888  001092        
000889  001093  func gfx_IncY(), 1;                    // increment global origin glb_Y, returning new value
000890  001094  // Syntax: gfx_IncY();
000891  001095  // Usage : var := gfx_IncY();
000892  001096  // Notes : Increments the y coordinate of the origin
000893  001097        
000894  001098  func gfx_BoxTo("x1", "y1"), 0;                // draw rectangle from current origin to x1 y1
000895  001099  // Syntax: gfx_BoxTo(x1, y1);
000896  001100  // Usage : gfx_BoxTo(arg1, arg2);
000897  001101  // Notes : Draws a Rectangle from the origin x,y to x1,y1.
000898  001102  //       : The new origin is then set to x1,y1. Rectangle colour needs
000899  001103  //       : to be preset with "Set Object colour" using gfx_Set(mode=2, colour);
000900  001104  //       : and the PenSize setting determines if Box is solid or outline.
000901  001105        
000902  001106  func gfx_ClipWindow("x1" ,"y1", "x2", "y2"), 0;         // set the cipping area
000903  001107  // Syntax: gfx_ClipWindow(x1, y1, x2, y2);
000904  001108  // Usage : gfx_ClipWindow(arg1, arg2, arg3, arg4);
000905  001109  // Notes : Specifies a clipping window region on the screen such that any objects
000906  001110  //       : and text placed onto the screen will be clipped and displayed only
000907  001111  //       : within that region. For the clipping window to take effect, "Clipping"
000908  001112  //       : must be enabled seperately using the gfx_Set(CLIPPING, ON) command.
000909  001113        
000910  001114        
000911  001115  func gfx_ChangeColour("oldcolr", "newcolr"), 0;         // change pixel colour in clipping area
000912  001116  // Syntax: gfx_ChangeColour(oldcolr, newcolr);
000913  001117  // Usage : gfx_ChangeColour(0xFF00, 0XFFFF);
000914  001118  // *Notes:
000915  001119        
000916  001120  func gfx_SetClipRegion(), 0;                            // set clipping area to the most recent extents
000917  001121  // Syntax: gfx_SetClipRegion();
000918  001122  // Usage : var := gfx_SetClipRegion();
000919  001123  // *Notes:
000920  001124        
000921  001125  func gfx_Ellipse("x", "y", "xrad", "yrad", "colour"), 0;
000922  001126  // Syntax: gfx_Ellipse(x, y, xrad, yrad, colour);
000923  001127  // Usage : gfx_Ellipse(arg1, arg2, arg3, arg4, arg5);
000924  001128  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000925  001129  //       : with xradius = xrad and yradius = yrad.
000926  001130  //       : if PenSize = 0 Ellipse is Solid
000927  001131  //       : if PenSize = 1 Ellipse is Outline
000928  001132        
000929  001133        
000930  001134  func gfx_EllipseFilled("x", "y", "xrad", "yrad", "colour"), 0;
000931  001135  // Syntax: gfx_EllipseFilled(x, y, xrad, yrad, colour);
000932  001136  // Usage : gfx_EllipseFilled(arg1, arg2, arg3, arg4, arg5);
000933  001137  // Notes : Plots a coloured Ellipse on the screen at centre x,y
000934  001138  //       : with xradius = xrad and yradius = yrad.
000935  001139        
000936  001140  func gfx_Button("state", "x", "y", "buttonColour", "textColour", "font", "textWidth", "textHeight", "text"), 0;
000937  001141  // Syntax: gfx_Button(mode, x, y, buttonColour, textColour, font, textWidth, textHeight, text);
000938  001142  // Usage : gfx_Button(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
000939  001143  // Notes : Draws a 3 dimensional Text Button at screen location defined by
000940  001144  //       : x,y arguments (top left corner). The size of the button depends on
000941  001145  //       : the font, width, height and length of the text.
000942  001146  //       : The button appearance will depend on the state parameter setting:
000943  001147  //       :         state = 0 : Button Pressed
000944  001148  //       :         state = 1 : Button Raised
000945  001149        
000946  001150  func gfx_Panel("state", "x", "y", "width", "height", "colour"), 0;
000947  001151  // Syntax: gfx_Panel("style", "x", "y", "width", "height", "colour"), 0;
000948  001152  // Usage : gfx_Panel(PANEL_RAISED, x, y, w, h, GRAY);
000949  001153  // Notes : Draws a panel (groupbox) at screen location defined by
000950  001154  //       : x, y, width and height with colour "colour".
000951  001155  //       :         state = 0 : recessed
000952  001156  //       :         state = 1 : raised
000953  001157        
000954  001158  func gfx_Slider("mode", "x1", "y1", "x2", "y2", "colour", "scale", "value"), 1;
000955  001159  // Syntax: gfx_Slider(mode, x1, y1, x2, y2, colour, scale, value);
000956  001160  // Usage : gfx_Slider(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
000957  001161  // Notes : Draws a 3 dimensional Slider Bar on the screen.
000958  001162  //       : Slider parameters are as follows:
000959  001163  //       :         mode = 0 : Slider recessed
000960  001164  //       :         mode = 1 : Slider raised
000961  001165  //       :         x1, y1 = top left corner
000962  001166  //       :         x2, y2 = bottom right corner
000963  001167  //       :         scale = n : sets the full scale range from 0 to n
000964  001168  //       :         value = m : sets the relative position of the thumb 0 <= m <= n
000965  001169  //       : returns:-
000966  001170        
000967  001171        
000968  001172  func gfx_ScreenCopyPaste("xs", "ys", "xd", "yd", "width", "height"), 0;
000969  001173  // Syntax: gfx_ScreenCopyPaste(xs, ys, xd, yd, width, height);
000970  001174  // Usage : gfx_ScreenCopyPaste(arg1, arg2, arg3, arg4, arg5, arg6);
000971  001175  // Notes : Copies an area of a screen from xs,ys of size given by width and height
000972  001176  //       : and pastes it to another location determined by xd, yd.
000973  001177        
000974  001178  func gfx_RGBto565("RED", "GREEN", "BLUE"), 1;
000975  001179  // Syntax: gfx_RGBto565(red, green, blue);
000976  001180  // Usage : gfx_RGBto565(arg1, arg2, arg3);
000977  001181  // Notes : Returns the 16bit (565 format) colour value of a 24bit (R,G,B format) colour
000978  001182        
000979  001183  func gfx_332to565("COLOUR8BIT"), 1;
000980  001184  // Syntax: gfx_332to565(colour);
000981  001185  // Usage : gfx_332to565(arg);
000982  001186  // Notes : Returns the 16bit (565 format) colour value of an 8 bit (332 format) colour
000983  001187        
000984  001188  func gfx_Selection("index", "backcolor", "textcolor"), 0;
000985  001189  // Syntax: gfx_Selection("index", "backcolor", "textcolor"), 0;
000986  001190  // Usage : gfx_Selection(1, RED, YELLOW);
000987  001191  // Notes : Called prior to drawing a button, this function
000988  001192  //       : hilites the required text line on a multiline button.
000989  001193        
000990  001194  func gfx_TriangleFilled("x1","y1","x2","y2","x3","y3","colr"), 0; // draw a filled triangle
000991  001195  // Syntax: gfx_TriangleFilled(x1, y1, x2, y2, x3, y3, colr);
000992  001196  // Usage : gfx_TriangleFilled(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
000993  001197  // Notes : Plots a coloured Solid Triangle from between 3 vertices: x1,y1 x2,y2 x3,y3
000994  001198  //       : Vertices must be specified in an anti-clockwise fashion
000995  001199        
000996  001200        
000997  001201  func gfx_PolygonFilled("n", "&vx", "&vy", "colr"), 0;        // draw a filled polygon from a table of vertices
000998  001202  // Syntax: gfx_PolygonFilled(numbVertices, &vx, &y, colour);
000999  001203  // Usage : gfx_PolygonFilled(arg1, x[array], y[array], arg2);
001000  001204  // Notes : Plots a solid Polygon between specified vertices: x1,y1 x2,y2 .. xn,yn
001001  001205  //       : Vertices must be minimum of 3 and can be specified in any fashion
001002  001206        
001003  001207        
001004  001208  func gfx_Origin("x", "y"), 0;            // set relative screen offset for graphics objects
001005  001209  // Syntax: gfx_Offset(x, y);
001006  001210  // Usage : gfx_Offset(arg1, arg2);
001007  001211  // Notes : Set the screen offset
001008  001212        
001009  001213        
001010  001214        
001011  001215  func gfx_Get("mode"), 1;
001012  001216  // Syntax: gfx_Get(mode);
001013  001217  // Usage : arg1 := gfx_Get(arg);
001014  001218  // Notes : Returns various parameters to caller
001015  001219  //       :
001016  001220  //       : mode = X_MAX (mode 0) : current orientations maximum X value
001017  001221  //       : var := gfx_Get(X_MAX);
001018  001222  //       : Returns the maximum horizontal value of the display
001019  001223  //       :
001020  001224  //       : mode = Y_MAX (mode 1) : Vcurrent orientations maximum Y value
001021  001225  //       : var := gfx_Get(Y_MAX);
001022  001226  //       : Returns the maximum vertical value of the display
001023  001227  //       :
001024  001228  //       : mode = LEFT_POS (mode 2) : Left location of last Object
001025  001229  //       : var := gfx_Get(LEFT_POS);
001026  001230  //       : Returns the left location of the last drawn object
001027  001231  //       : such as a slider or button or an image/video
001028  001232  //       :
001029  001233  //       : mode = TOP_POS (mode 3) : Top location of Object
001030  001234  //       : var := gfx_Get(TOP_POS);
001031  001235  //       : Returns the top location of the last drawn object
001032  001236  //       : such as a slider or button or an image/video
001033  001237  //       :
001034  001238  //       : mode = RIGHT_POS (mode 4) : Right location of last Object
001035  001239  //       : var := gfx_Get(RIGHT_POS);
001036  001240  //       : Returns the right location of the last drawn object
001037  001241  //       : such as a slider or button or an image/video
001038  001242  //       :
001039  001243  //       : mode = BOTTOM_POS  (mode 5) : Bottom location of Object
001040  001244  //       : var := gfx_Get(BOTTOM_POS );
001041  001245  //       : Returns the bottom location of the last drawn object
001042  001246  //       : such as a slider or button or an image/video
001043  001247  //       :
001044  001248        
001045  001249        
001046  001250  //==================================================//
001047  001251  // Single parameter short-cuts                      //
001048  001252  // for the gfx_Set functions                        //
001049  001253  // These functions return the existing value before //
001050  001254  // the change is made.                              //
001051  001255  //==================================================//
001052  001256  func gfx_PenSize("mode"), 1;                        // 0  graphics pen size, SOLD or OUTLINE
001053  001257  func gfx_BGcolour("colour"), 1;                     // 1  graphics background colour
001054  001258  func gfx_ObjectColour("colour"), 1;                 // 2  graphics object colour
001055  001259  func gfx_Clipping("mode"), 0;                       // 3  graphics clipping ON/OFF
001056  001260  func gfx_TransparentColour("colour"), 1;            // 4  graphics image transparent mask colour
001057  001261  func gfx_Transparency("mode"), 1;                   // 5  graphics image transparent mode ON/OFF
001058  001262  func gfx_FrameDelay("milliseconds"), 1;             // 6  graphics animation frame delay
001059  001263  func gfx_ScreenMode("mode"), 1;                     // 7  graphics orientation LANDSCAPE, LANDSCAPE_R, PORTRAIT, PORTRAIT_R
001060  001264  func gfx_OutlineColour("colour"), 1;                // 8  graphics rectangle/circle outline colour
001061  001265  func gfx_Contrast("value"), 1;                      // 9  graphics hardware value 0 to 9, 0=off, 1=lowest, 8=highest (only for AMOLED devices)
001062  001266  func gfx_LinePattern("value"), 1;                   // 10 graphics line draw tesselation pattern (16 linear bits, 1=pixel off)
001063  001267  func gfx_ColourMode("mode"), 1;                     // 11 graphics colour mode COLOUR8 or COLOUR16 (default colour 16)
001064  001268  func gfx_BevelWidth("mode"), 1;                     // 12 graphics button bevel width
001065  001269  func gfx_BevelShadow("value"), 1;                   // 13 graphics button bevel shadow depth
001066  001270  func gfx_Xorigin("offset"), 1;                      // 14 graphics  X origin
001067  001271  func gfx_Yorigin("offset"), 1;                      // 15 graphics  Y origin
001068  001272        
001069  001273        
001070  001274  //==================================================//
001071  001275  // uSD/FLASH Function Prototypes                    //
001072  001276  //==================================================//
001073  001277  func media_Video("x", "y"), 0;                      // display movie at position x y
001074  001278  // Syntax: media_Video(x, y);
001075  001279  // Usage : media_Video(arg1, arg2);
001076  001280  // Notes : Play a Video/Animation clip from the uSD card at screen location
001077  001281  //       : specified by x,y (top left corner). The location of the clip in the
001078  001282  //       : uSD card must be specified by media_setSector(Video_Sector_Add) function.
001079  001283        
001080  001284  func media_VideoFrame("x", "y","framenumber"), 0;   // display required frame from a movie at x y
001081  001285  // Syntax: media_VideoFrame(Frame_number);
001082  001286  // Usage : arg1 := media_VideoFrame();
001083  001287  // Notes : After a pointer to a valid video has been set with media_SetSector,
001084  001288  //       : calling this function shows each fram sequentially, returning
001085  001289  //       : the number of frames remaining. The position of the image is
001086  001290  //     : at the current origin as set with gfx_MoveTo(...);
001087  001291        
001088  001292  func media_SetAdd("HiWord", "LoWord"), 0;           // set stream byte address
001089  001293  // Syntax: media_SetAdd(AddHiWord, AddLoWord);
001090  001294  // Usage : media_SetAdd(arg1, arg2);
001091  001295  // Notes : Set uSD internal Address pointer for bytewise access
001092  001296        
001093  001297  func media_SetSector("HiWord", "LoWord"), 0;        // set stream sector address
001094  001298  // Syntax: media_SetSector(SectHiWord, SectLoWord);
001095  001299  // Usage : media_SetSector(arg1, arg2);
001096  001300  // Notes : Set uSD internal Sector pointer for sector block access
001097  001301        
001098  001302  func media_RdSector("*destination"), 1;
001099  001303  // Syntax: media_RdSector(*destination);
001100  001304  // Usage : media_RdSector(rdblock);
001101  001305  // Notes : Reads and Returns 512 bytes (256 words) into a destination
001102  001306  //       : block (eg rdblock[256]) pointed to by the internal Sector pointer.
001103  001307  //       : After the read the Sector pointer is automatically incremented by 1.
001104  001308  //       : Returns TRUE if uSD response was TRUE
001105  001309        
001106  001310  func media_WrSector("*source"), 1;
001107  001311  // Syntax: media_WrSector(*source);
001108  001312  // Usage : media_WrSector(wrblock);
001109  001313  // Notes : Writes 512 bytes (256 words) from a source memory block
001110  001314  //       : (eg wrblock[256]) into the uSD card. After the write the Sector
001111  001315  //       : pointer is automatically incremented by 1.
001112  001316  //       : Returns TRUE if uSD response was TRUE
001113  001317        
001114  001318  func media_ReadByte(), 1;                // read a byte at the current stream position
001115  001319  // Syntax: media_RdByte();
001116  001320  // Usage : var := media_RdByte();
001117  001321  // Notes : Reads and Returns a single byte of data from the
001118  001322  //       : uSD card pointed to by the internal Address pointer.
001119  001323  //       : After the read the Address pointer is automatically
001120  001324  //       : incremented by 1.
001121  001325        
001122  001326  func media_ReadWord(), 1;                // read a word at the current stream position
001123  001327  // Syntax: media_ReadWord();
001124  001328  // Usage : var := media_ReadWord();
001125  001329  // *Notes : Reads and Returns a single word of data from the
001126  001330  //       : uSD card pointed to by the internal Address pointer.
001127  001331  //       : After the read the Address pointer is automatically
001128  001332  //       : incremented by 2.
001129  001333        
001130  001334  func media_WriteByte("byte"), 1;              // write a byte to the current stream position
001131  001335  // Syntax: media_WriteByte(arg1);
001132  001336  // Usage : var := media_WriteByte(arg1);
001133  001337  // *Notes : Writes and Returns xxxxx
001134  001338  //       : After the write the Address pointer is automatically
001135  001339  //       : incremented by 1.
001136  001340        
001137  001341  func media_WriteWord("word"), 1;            // write a word to the current stream position
001138  001342  // Syntax: media_WriteWord(arg1);
001139  001343  // Usage : var := media_WriteWord(arg1);
001140  001344  // *Notes : Writes and Returns xxxxx
001141  001345  //       : After the write the Address pointer is automatically
001142  001346  //       : incremented by 2.
001143  001347        
001144  001348  func media_Image("x", "y"), 0;            // display image at position x y
001145  001349  // Syntax: media_Image(x, y);
001146  001350  // Usage : media_Image(arg1, arg2);
001147  001351  // Notes : Display an image from the uSD card at screen location
001148  001352  //       : specified by x,y (top left corner). The location of the
001149  001353  //       : Image in the uSD card must be specified by
001150  001354  //       : media_setSector(Image_Sector_Add) function.
001151  001355        
001152  001356  func media_Flush(), 1;                    // after writing to media, flush the sector and write
001153  001357  // Syntax: media_Flush();
001154  001358  // Usage : var := media_Flush();
001155  001359  // *Notes : After writing any data to a sector, media_Flush() should be called to ensure that the current sector that
001156  001360  //       : is being written is correctly stored back to the media else write operations may be unpredictable.
001157  001361        
001158  001362  func media_Init(), 1;                    // initialize uSD card
001159  001363  // Usage : media_Init();
001160  001364  // Notes : Initialise uSD CARD
001161  001365  //       : Response: 0 = No Card
001162  001366  //       :           1 = Card Initialised
001163  001367        
001164  001368        
001165  001369  //==============================================//
001166  001370  // Communications Function Prototypes           //
001167  001371  //==============================================//
001168  001372  func com_Init("buf","bufsize","qualifier"), 0;  // set up a interrupt driven ring buffer for comms
001169  001373  // Syntax: com_Init(buffer, bufsize, qualifier);
001170  001374  // Usage1: com_Init(mybuf, 20, 0);
001171  001375  // Usage2: com_Init(mybuf, 20, ':');
001172  001376  // Notes : initialize a serial capture buffer for the comms input
001173  001377  //       : The program must declare a var array as a circular buffer.
001174  001378  //       : Usage1 declares a circular buffer which will continually
001175  001379  //       : buffer characters.
001176  001380  //       : Usage2 must receive ':' before any characters will
001177  001381  //       : accumulate in the buffer.
001178  001382        
001179  001383  func com_Reset(), 0;                 // reset the comms receiver
001180  001384  // Syntax: com_Reset();
001181  001385  // Usage : com_Reset();
001182  001386  // Notes : reset comms to default polled mode
001183  001387        
001184  001388  func com_Count(), 1;                // return count of characters in receive buffer
001185  001389  // Syntax: com_Count();
001186  001390  // Usage : arg := com_Count();
001187  001391  // Notes : return count of buffered characters in buffer attachment
001188  001392        
001189  001393  func com_Full(), 1;                // return TRUE if receiver buffer filled to capcity
001190  001394  // Syntax: com_Full();
001191  001395  // Usage : if (com_Full() ,,,, go read buffer;
001192  001396  // Notes : return true if buffer full (not necessarily an error if
001193  001397  //       : buffer is sized to a packet size)
001194  001398        
001195  001399  func com_Error(), 1;                // return comms errors comms error occurred
001196  001400  // Syntax: com_Error();
001197  001401  // Usage : if (com_Error() ) ...... take recovery action;
001198  001402  // Notes : return non zero if any errors low level comms errors occured
001199  001403  // returns :
001200  001404  // bit0 = Receiver Overflow Error
001201  001405  // bit1 = Receiver Framing Error
001202  001406  // bit2 = Transmit Buffer Overflow
001203  001407        
001204  001408  func com_Sync(), 1;                // returns TRUE if qualifier has been received
001205  001409  // Syntax: com_Sync();
001206  001410  // Usage : com_Sync();
001207  001411  // return true if sync character has been received in com_Init("...") mode
001208  001412        
001209  001413        
001210  001414  func com_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001211  001415  // Syntax: com_TXbuffer("buf", "bufsize", "pin");
001212  001416  // Usage : com_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001213  001417  // Usage : com_TXbuffer(0, 0, 0);              // revert to non buffered service
001214  001418  // Notes : initialize a serial buffer for the COM0 output.
001215  001419  //       : The program must declare a var array as a circular buffer.
001216  001420  //       : When a TX buffer is declared for comms, the transmission
001217  001421  //       : of characters becomes non blocking. The only time
001218  001422  //       : blocking will occur is if the buffer has insufficient space
001219  001423  //       : to accept the next character, in which case the function
001220  001424  //       : will wait for buffer space to become available. If the
001221  001425  //       : TX buffer is no longer required, just set the buffer pointer
001222  001426  //       : to zero, the size in this case doesnt matter and is ignored.
001223  001427  //       : The function can resize or reallocated to another buffer at
001224  001428  //       : any time. The buffer is flushed before any changes are made.
001225  001429  //       : "pin" designates an IO pin to control a bi-directional 
001226  001430  //       : control device for half duplex mode. "pin" will go HI at the
001227  001431  //       : start of a transmission, and will return low after the final
001228  001432  //       : byte is transmitted. If not required, just set "pin" to zero.
001229  001433        
001230  001434        
001231  001435  func com_TXcount(), 1;                // return count of characters in COM0 TX buffer
001232  001436  // Syntax: com_TXcount();
001233  001437  // Usage : arg := com_Count();
001234  001438  // Notes : return count of characters remaining in COM0 transmit buffer
001235  001439  //       : that was previously allocated with com_TXbuffer(...);
001236  001440        
001237  001441        
001238  001442  func com_TXemptyEvent("function"), 1;  // sets a function to be called when COM0 TX buffer empty
001239  001443  // Syntax: com_TXemptyEvent(function);
001240  001444  // Usage : arg := com_TXemptyEvent();
001241  001445  // Notes : If a comms TX buffer that was previously allocated with
001242  001446  //       : com_TXbuffer(...);, this function can be used to set up
001243  001447  //       : a function to be called when the COM0 TX buffer is empty.
001244  001448  //       : This is useful for either reloading the TX buffer, setting
001245  001449  //       : or clearing a pin to change the direction of eg a RS485
001246  001450  //       : line driver, or any other form of traffic control.
001247  001451  //       : The event function must not have any parameters.
001248  001452  //       : To disable the event, simply call com_TXemptyEvent(0).
001249  001453  //       : com_TXbuffer(...); also resets any active event.
001250  001454  //       : com_TXemptyEvent returns any previous event function
001251  001455  //       : address, or zero if there was no previous function.
001252  001456        
001253  001457        
001254  001458  func com_TXbufferHold("state"), 1; // hold or release a com_TXbuffer
001255  001459  // Usage : arg := com_TXbufferHold(ON);  // hold the buffer while we fill it
001256  001460  // Usage : arg := com_TXbufferHold(OFF);  // start sending the buffer
001257  001461  // Notes : Expecting that a comms TX buffer that was previously allocated with
001258  001462  //       : com_TXbuffer(...);, com_TXbufferHold(ON) can be used to stop
001259  001463  //       : the buffer being sent wile it is being loaded. Mormally, when
001260  001464  //       : using buffered comms, the transmit process will begin
001261  001465  //       : immediately. This is often undesirable for 2 reasons,
001262  001466  //       : 1] you may wish to build a packet then send it later
001263  001467  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001264  001468  //       : as the FIFO buffer is constantly trying to empty while
001265  001469  //       : you are busy tring to fill it.
001266  001470  // return -1 if function is called illegally when TX comms is not buffered.
001267  001471  // return buffer count when called with argument of 1, eg com_TXbufferHold(ON)
001268  001472  // return 0 when argument is zero, eg com_TXbufferHold(OFF)
001269  001473        
001270  001474        
001271  001475  //=============================================================//
001272  001476  // Auxilliary Communications Function Prototypes
001273  001477  //=============================================================//
001274  001478  func com1_Init("buffer", "bufsize", "qualifier"), 0;
001275  001479  // Syntax: com_Init(buffer, bufsize, qualifier);
001276  001480  // Usage1: com_Init(mybuf, 20, 0);
001277  001481  // Usage2: com_Init(mybuf, 20, ':');
001278  001482  // Notes : initialize a serial capture buffer for the comms input
001279  001483  //       : The program must declare a var array as a circular buffer.
001280  001484  //       : Usage1 declares a circular buffer which will continually
001281  001485  //       : buffer characters.
001282  001486  //       : Usage2 must receive ':' before any characters will
001283  001487  //       : accumulate in the buffer.
001284  001488        
001285  001489  func com1_Reset(), 0;
001286  001490  // Syntax: com_Reset();
001287  001491  // Usage : com_Reset();
001288  001492  // Notes : reset comms receiver to default polled mode
001289  001493        
001290  001494  func com1_Count(), 1;
001291  001495  // Syntax: com_Count();
001292  001496  // Usage : arg := com_Count();
001293  001497  // Notes : return count of characters in receive buffer
001294  001498        
001295  001499  func com1_Full(), 1;
001296  001500  // Syntax: com_Full();
001297  001501  // Usage : if (com_Full() ,,,, go read buffer;
001298  001502  // Notes : return true if receive buffer full
001299  001503        
001300  001504  func com1_Error(), 1;
001301  001505  // Syntax: com_Error();
001302  001506  // Usage : if (com_Error() ) ...... take recovery action;
001303  001507  // Notes : return non zero if any level comms errors occured
001304  001508  // returns :
001305  001509  // bit0 = Receiver Overflow Error
001306  001510  // bit1 = Receiver Framing Error
001307  001511  // bit2 = Transmit Buffer Overflow
001308  001512        
001309  001513  func com1_Sync(), 1;
001310  001514  // Syntax: com_Sync();
001311  001515  // Usage : com_Sync();
001312  001516  // Notes : return true if sync character has been received in com_Init("...") mode
001313  001517        
001314  001518        
001315  001519  func com1_TXbuffer("buf", "bufsize", "pin"), 0;    // sets the buffer location for buffered transmission
001316  001520  // Syntax: com1_TXbuffer("buf", "bufsize", "pin");
001317  001521  // Usage : com1_TXbuffer(mybuf, 1024, IO1_PIN);    // set the TX buffer, usin IO1_PIN for turnaround
001318  001522  // Usage : com1_TXbuffer(0, 0, 0);              // revert to non buffered service
001319  001523  // Notes : initialize a serial buffer for the COM1 output.
001320  001524  //       : The program must declare a var array as a circular buffer.
001321  001525  //       : When a TX buffer is declared for comms, the transmission
001322  001526  //       : of characters becomes non blocking. The only time
001323  001527  //       : blocking will occur is if the buffer has insufficient space
001324  001528  //       : to accept the next character, in which case the function
001325  001529  //       : will wait for buffer space to become available. If the
001326  001530  //       : TX buffer is no longer required, just set the buffer pointer
001327  001531  //       : to zero, the size in this case doesnt matter and is ignored.
001328  001532  //       : The function can resize or reallocated to another buffer at
001329  001533  //       : any time. The buffer is flushed before any changes are made.
001330  001534  //       : "pin" designates an IO pin to control a bi-directional 
001331  001535  //       : control device for half duplex mode. "pin" will go HI at the
001332  001536  //       : start of a transmission, and will return low after the final
001333  001537  //       : byte is transmitted. If not required, just set "pin" to zero.
001334  001538        
001335  001539        
001336  001540  func com1_TXcount(), 1;                // return count of characters in COM1 TX buffer
001337  001541  // Syntax: com1_TXcount();
001338  001542  // Usage : arg := com1_Count();
001339  001543  // Notes : return count of characters remaining in COM1 transmit buffer
001340  001544  //       : that was previously allocated with com1_TXbuffer(...);
001341  001545        
001342  001546        
001343  001547  func com1_TXemptyEvent("function"), 1;  // sets a function to be called when COM1 TX buffer empty
001344  001548  // Syntax: com1_TXemptyEvent(function);
001345  001549  // Usage : arg := com1_TXemptyEvent();
001346  001550  // Notes : If a comms TX buffer that was previously allocated with
001347  001551  //       : com1_TXbuffer(...);, this function can be used to set up
001348  001552  //       : a function to be called when the COM1 TX buffer is empty.
001349  001553  //       : This is useful for either reloading the TX buffer, setting
001350  001554  //       : or clearing a pin to change the direction of eg a RS485
001351  001555  //       : line driver, or any other form of traffic control.
001352  001556  //       : The event function must not have any parameters.
001353  001557  //       : To disable the event, simply call com1_TXemptyEvent(0).
001354  001558  //       : com1_TXbuffer(...); also resets any active event.
001355  001559  //       : com1_TXemptyEvent returns any previous event function
001356  001560  //       : address, or zero if there was no previous function.
001357  001561        
001358  001562        
001359  001563  func com1_TXbufferHold("state"), 1; // hold or release a com1_TXbuffer
001360  001564  // Usage : arg := com1_TXbufferHold(ON);  // hold the buffer while we fill it
001361  001565  // Usage : arg := com1_TXbufferHold(OFF);  // start sending the buffer
001362  001566  // Notes : Expecting that a comms TX buffer that was previously allocated with
001363  001567  //       : com1_TXbuffer(...);, com1_TXbufferHold(ON) can be used to stop
001364  001568  //       : the buffer being sent wile it is being loaded. Mormally, when
001365  001569  //       : using buffered comms, the transmit process will begin
001366  001570  //       : immediately. This is often undesirable for 2 reasons,
001367  001571  //       : 1] you may wish to build a packet then send it later
001368  001572  //       : 2] when using com_TXemptyEvent erroneous empty events will occur
001369  001573  //       : as the FIFO buffer is constantly trying to empty while
001370  001574  //       : you are busy tring to fill it.
001371  001575  // return -1 if function is called illegally when TX comms is not buffered.
001372  001576  // return buffer count when called with argument of 1, eg com1_TXbufferHold(ON)
001373  001577  // return 0 when argument is zero, eg com1_TXbufferHold(OFF)
001374  001578        
001375  001579  func serin1(), 1;
001376  001580  // Syntax: serin1();
001377  001581  // Usage : char := serin1();
001378  001582  // Notes : return the next available character from COM1
001379  001583        
001380  001584  func serout1("char"), 0;
001381  001585  // Syntax: serout1("char");
001382  001586  // Usage : serout1(ch);
001383  001587  // Notes : send character to COM1
001384  001588        
001385  001589  func com_SetBaud("comport","baudrate/10"), 1;
001386  001590  // Syntax: com_SetBaud("comport","baudrate/10");
001387  001591  // Usage : com_SetBaud(COM1, 960);   // set COM1 to 9600 baud
001388  001592  // Notes : sets to any viable baud rate from 160 to 655350
001389  001593  // return true if baud rate was acceptable
001390  001594        
001391  001595        
001392  001596        
001393  001597  //==============================================//
001394  001598  // Display Access                               //
001395  001599  //==============================================//
001396  001600  func disp_Init(), 0;                            // initialize display with required tables
001397  001601  // Syntax: disp_Init();
001398  001602  // Usage : disp_Init();
001399  001603  // Notes : Initialises or reinitialises the display.
001400  001604  //       : Normally used after restoration of peripheral power
001401  001605  //       : and after DeepSleep.
001402  001606        
001403  001607  func disp_SetReg("register", "data"), 0;
001404  001608  // Syntax: display_SetReg(register, data);
001405  001609  // Usage : display_SetReg(arg1, arg2);
001406  001610  // Notes : Sets uLCD specific display driver registers. Refer
001407  001611  //       : to appropriate display driver data sheet.
001408  001612        
001409  001613  func disp_setGRAM("x1","y1","x2","y2"), 0;    // set GRAM window
001410  001614  // Syntax: disp_setGRAM(x1, y1, x2, y2);
001411  001615  // Usage : disp_setGRAM(arg1, arg2, arg3, arg4);
001412  001616  // Notes : Prepares the GRAM area for user access.
001413  001617  //       : Data can now be written with disp_GRAM.
001414  001618  //       : GRAM will be set accordingly for the correct screen mode.
001415  001619  //       : the LO word of the 32 bit pixel count is returned. This is
001416  001620  //       : usually all that is needed unlse GRAM area exceeds 256^2
001417  001621  //       : A copy of the 32bit value can be found in
001418  001622  //       : GRAM_PIXEL_COUNT_LO and GRAM_PIXEL_COUNT_HI
001419  001623        
001420  001624  func disp_WrGRAM("colour"), 0;
001421  001625  // Syntax: display_WrGRAM(colour);
001422  001626  // Usage : display_WrGRAM(arg);
001423  001627  // Notes : Data can be written to the GRAM consecutively using
001424  001628  //       : this function once the GRAM access window has been setup.
001425  001629        
001426  001630  func disp_WriteControl("value"), 0;             // write a control byte to the display
001427  001631  func disp_WriteWord("value"), 0;                // write a word to the display
001428  001632        
001429  001633        
001430  001634  func disp_ReadWord(), 1;                        // read a word from the display
001431  001635  // Syntax: disp_ReadWord();
001432  001636  // Usage : x:=disp_ReadWord();
001433  001637  // Notes : Read a word from the controller
001434  001638  // Eg:   : disp_WriteControl(0);         // select Ilitek ID register
001435  001639  //       : print(disp_ReadWord());        // print ID
001436  001640  //       : (Many displays are write only)
001437  001641        
001438  001642                                                  //
001439  001643  //==============================================//
001440  001644  // unadorned SPI functions                      //
001441  001645  //==============================================//
001442  001646  func spi_Init("speed","ip_mode","op_mode"), 0;  // set the SPI port, not used if uSD active
001443  001647  func spi_Read(), 1;                             // read a raw byte from SPI (lowers CS)
001444  001648  func spi_Write("byte"), 0;                      // write a raw byte to SPI (lowers CS)
001445  001649  func spi_Disable(), 0;                          // disable SPI reading or writing (raise CS)
001446  001650                                                  //
001447  001651  //==============================================//
001448  001652  // flash device specific functions              //
001449  001653  //==============================================//
001450  001654  func flash_SIG(), 1;                            // read Jedecsignature from SPI Flash device
001451  001655  func flash_ID(), 1;                             // read ID code from FLASH device
001452  001656  func flash_BulkErase(), 0;                      // erase the entire FLASH device
001453  001657  func flash_BlockErase("block"), 1;              // erase the required 64k flash block
001454  001658                                                  //
001455  001659                                                  //
001456  001660  //==============================================//
001457  001661  // string and character size function           //
001458  001662  //==============================================//
001459  001663  func charwidth("char"), 1;                      // return width of a character in pixel units
001460  001664  func charheight("char"), 1;                     // return height of a character in pixel units
001461  001665  func strwidth("pointer"), 1;                    // return width of a string in pixel units
001462  001666  func strheight(), 1;                            // return height of a string in pixel units
001463  001667        
001464  001668        
001465  001669  //------------------------------------------------------------------//
001466  001670  //        I2C Function Prototypes
001467  001671  //------------------------------------------------------------------//
001468  001672  func I2C_Open("speed"), 0;
001469  001673  // Syntax: I2C_Open(speed),
001470  001674  // Usage : I2C_Open(I2C_MED);
001471  001675  // Notes : configures the I2C module
001472  001676  //       : speed can be I2C_SLOW, I2C_MED, I2C_FAST (100khz, 400khz, 1mhz)
001473  001677        
001474  001678  func I2C_Close(), 0;
001475  001679  // Syntax: I2C_Close();
001476  001680  // Usage : I2C_Close();
001477  001681  // Notes : disables the I2C1 module.
001478  001682        
001479  001683  func I2C_Start(), 1;
001480  001684  // Syntax: I2C_Start();
001481  001685  // Usage : I2C_Start();
001482  001686  // Notes : generates a Start condition.
001483  001687  //       : returns true if successful (usually ignored)
001484  001688        
001485  001689  func I2C_Stop(), 1;
001486  001690  // Syntax: I2C_Stop();
001487  001691  // Usage : I2C_Stop();
001488  001692  // Notes : generates a Stop condition.
001489  001693  //       : returns true if successful (usually ignored)
001490  001694        
001491  001695  func I2C_Restart(), 1;
001492  001696  // Syntax: I2C_Restart();
001493  001697  // Usage : I2C_Restart();
001494  001698  // Notes : generates a Restart condition.
001495  001699  //       : returns true if successful (usually ignored)
001496  001700        
001497  001701  func I2C_Read(), 1;
001498  001702  // Syntax: I2C_Read();
001499  001703  // Usage : ch := I2C_Read();
001500  001704  // Notes : reads a single byte from the I2C Bus.
001501  001705        
001502  001706  func I2C_Write("byte"), 1;
001503  001707  // Syntax: I2C_Write(byte);
001504  001708  // Usage : r := I2C_Write(ch);
001505  001709  // Notes : is used to write a byte to the I2C bus.
001506  001710  //       : Returns 0 if failed, 1 if no ack, 2 if ack
001507  001711        
001508  001712  func I2C_Ack(), 0;
001509  001713  // Syntax: I2C_Ack();
001510  001714  // Usage : I2C_Ack();
001511  001715  // Notes : generates the acknowledge condition.
001512  001716        
001513  001717  func I2C_Nack(), 0;
001514  001718  // Syntax: I2C_Nack();
001515  001719  // Usage : I2C_Nack();
001516  001720  // Notes : generates the negative acknowledge condition.
001517  001721        
001518  001722  func I2C_AckStatus(), 0;
001519  001723  // Syntax: I2C_AckStatus();
001520  001724  // Usage : r := I2C_AckStatus();
001521  001725  // Notes : returns the ACK status from the device.
001522  001726        
001523  001727  func I2C_AckPoll("control"), 1;
001524  001728  // Syntax: I2C_AckPoll();
001525  001729  // Usage : r := I2C_AckPoll(0xA0);
001526  001730  // Notes : waits for a device to return from ACK polling.
001527  001731        
001528  001732  func I2C_Idle(), 0;
001529  001733  // Syntax: I2C_Idle();
001530  001734  // Usage : I2C_Idle();
001531  001735  // Notes : waits until the I2C Bus is Inactive.
001532  001736        
001533  001737  func I2C_Gets("buffer", "size"), 1;
001534  001738  // Syntax: I2C_Gets("buffer", "size");
001535  001739  // Usage : r := I2C_Gets(mybuf, 16);
001536  001740  // Notes : only reads up to "size" characters into "buffer"
001537  001741  //       : Reads up to asciiz terminator including terminator
001538  001742        
001539  001743  func I2C_Getn("buffer", "size"), 1;
001540  001744  // Syntax: I2C_Gets("buffer", "size");
001541  001745  // Usage : r := I2C_Gets(mybuf, 16);
001542  001746  // Notes : reads "size" bytes into "buffer"
001543  001747  //       :
001544  001748        
001545  001749  func I2C_Puts("buffer"), 1;
001546  001750  // Syntax: I2C_Puts("buffer");
001547  001751  // Usage : r := I2C_Puts(mybuf);
001548  001752  // Notes : writes an asciiz string to the I2C device
001549  001753  //       : returns count of characters written
001550  001754        
001551  001755  func I2C_Putn("buffer", "count"), 1;
001552  001756  // Syntax: I2C_Putn("buffer","count");
001553  001757  // Usage : r := I2C_Puts(mybuf,10);
001554  001758  // Notes : writes up to "size" bytes to the I2C device
001555  001759  //       : returns number of bytes written
001556  001760        
001557  001761        
001558  001762  //------------------------------------------------------------------//
001559  001763  //        Image Control Function Prototypes
001560  001764  //------------------------------------------------------------------//
001561  001765  func img_SetPosition("handle", "index", "xpos", "ypos"), 1;
001562  001766  // Syntax: img_SetPosition(handle, index, xpos, ypos);
001563  001767  // Usage : r := img_SetPosition(hImageList, imagenum, x, y);
001564  001768  // Notes : set the position where the image will be displayed
001565  001769  //       : returns true if index was ok and function was successful.
001566  001770  //       : you may turn off an image so when img_Refresh is called,
001567  001771  //       : the image will not be shown
001568  001772        
001569  001773  func img_Enable("handle", "index"), 1;
001570  001774  // Syntax: img_Enable(handle, index);
001571  001775  // Usage : r := img_Enable(hImageList, imagenum);
001572  001776  // Notes : enable image in a image list
001573  001777  //       : returns true if index was ok and function was successful.
001574  001778  //       : this is the default state so when img_Refresh is called,
001575  001779  //       : all the images in the list will be shown
001576  001780  //       : if index is set to -1, all of the images are enabled
001577  001781        
001578  001782  func img_Disable("handle", "index"), 1;
001579  001783  // Syntax: img_Disable(handle, index);
001580  001784  // Usage : r := img_Disable(hImageList, imagenum);
001581  001785  // Notes : disable image in a image list
001582  001786  //       : returns true if index was ok and function was successful.
001583  001787  //       : you must turn off an image so when img_Refresh is called,
001584  001788  //       : the image will not be shown.
001585  001789  //       : if index is set to -1, all of the images are disabled
001586  001790        
001587  001791        
001588  001792  func img_Darken("handle", "index"), 1;
001589  001793  // Syntax: img_Darken(handle, index);
001590  001794  // Usage : r := img_Darken(hImageList, imagenum);
001591  001795  // Notes : darken image in a image list
001592  001796  //       : returns true if index was ok and function was successful.
001593  001797  //       : if index is set to -1, all of the images are darkened
001594  001798  //       : NB:- this feature will only work for the next refresh, then
001595  001799  //       : the image reverts back to normal when displayed again.
001596  001800        
001597  001801        
001598  001802  func img_Lighten("handle", "index"), 1;
001599  001803  // Syntax: img_Lighten(handle, index);
001600  001804  // Usage : r := img_Lighten(hImageList, imagenum);
001601  001805  // Notes : lighten image in a image list
001602  001806  //       : returns true if index was ok and function was successful.
001603  001807  //       : if index is set to -1, all of the images are lightened
001604  001808  //       : NB:- this feature will only work for the next refresh, then
001605  001809  //       : the image reverts back to normal when displayed again.
001606  001810        
001607  001811  func img_SetWord("handle", "index", "offset", "word"), 1;
001608  001812  // Syntax: img_SetWord(handle, index, offset, word);
001609  001813  // Usage : img_SetWord(hndl, 5, IMAGE_XPOS, 10);
001610  001814  // Notes : set specified word (0-7) in a image entry
001611  001815  //       : returns TRUE if successful, return value usually ignored.
001612  001816        
001613  001817  func img_GetWord("handle", "index", "offset"), 1;
001614  001818  // Syntax: myvar := img_GetWord("handle", "index", "offset");
001615  001819  // Usage : myvar := img_GetWord(hndl, 5, IMAGE_YPOS);
001616  001820  // Notes : returns specified word (0-14) from an image entry
001617  001821  //       : refer to image control entry offsets.
001618  001822        
001619  001823  func img_Show("handle", "index"), 1;
001620  001824  // Syntax: img_Show(handle, index);
001621  001825  // Usage : display image entry (regardless of enable/disable)
001622  001826  //       : returns TRUE if successful, return value usually ignored.
001623  001827        
001624  001828  func img_SetAttributes("handle", "index","value"), 1;
001625  001829  // Syntax: img_SetAttributes("handle", "index","offset");
001626  001830  // Usage : img_SetAttributes(hndl, 5, I_TOPMOST);
001627  001831  // Notes : This function SETS one or more bits in the IMAGE_FLAGS field
001628  001832  //       : of an image control entry. "value" refers to various bits in
001629  001833  //       : the image control entry (see image attribute flags).
001630  001834  //       : A '1' bit in the "value" field SETS the respective bit
001631  001835  //       : in the IMAGE_FLAGS field of the image control entry.
001632  001836  //       : returns TRUE if successful, return value usually ignored.
001633  001837        
001634  001838  func img_ClearAttributes("handle", "index","value"), 1;
001635  001839  // Syntax: img_ClearAttributes("handle", "index","offset");
001636  001840  // Usage : img_ClearAttributes(hndl, 5, I_TOPMOST);
001637  001841  // Notes : This function CLEARS one or more bits in the IMAGE_FLAGS field
001638  001842  //       : of an image control entry. "value" refers to various bits in
001639  001843  //       : the image control entry (see image attribute flags)
001640  001844  //       : a '1' bit in the "value" field CLEARS the respective bit
001641  001845  //       : in the IMAGE_FLAGS field of the image control entry.
001642  001846  //       : returns TRUE if successful, return value usually ignored.
001643  001847        
001644  001848  func img_Touched("handle", "index"), 1;
001645  001849  // Syntax: r := img_Touched(handle, index);
001646  001850  // Usage : img_Touched(hndl, 17);
001647  001851  //       : returns -1 if image not touched, or returns index
001648  001852  // Notes : if index is passed as -1, function tests all images,
001649  001853  //       : and returns -1 if image not touched, or returns index.
001650  001854        
001651  001855        
001652  001856        
001653  001857        
001654  001858  //------------------------------------------------------------------//
001655  001859  //        Timer Function Prototypes
001656  001860  //------------------------------------------------------------------//
001657  001861  func sys_T(), 1;
001658  001862  // Syntax: sys_T();
001659  001863  // Usage : t := sys_T();
001660  001864  // Notes : return the current value of the rolling system timer (1msec) LO word
001661  001865        
001662  001866  func sys_T_HI(), 1;
001663  001867  // Syntax: sys_T_HI();
001664  001868  // Usage : t := sys_T_HI();
001665  001869  // Notes : return the current value of the rolling system timer (1msec) HI word
001666  001870        
001667  001871  func sys_SetTimer("timernum","value"), 0;
001668  001872  // Syntax: sys_SetTimer("timernum", "value");
001669  001873  // Usage : sys_SetTimer(TIMER5, 10000);
001670  001874  // Notes : set a countdown on the selected timer, or 'top up' if required.
001671  001875  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001672  001876  //       : Maximum timeout period is 65.535 seconds
001673  001877  //       : A timer can be read with the sys_GetTimer("timernum") function
001674  001878        
001675  001879  func sys_GetTimer("timernum"), 1;
001676  001880  // Syntax: t := sys_GetTimer("timernum");
001677  001881  // Usage : t := sys_GetTimer(TIMER3);
001678  001882  // Notes : returns 0 if timer has expired, or the current countdown value.
001679  001883  //       : There ar 8 timers TIMER0 to TIMER7 which stop at the count of 0
001680  001884  //       : Maximum timeout period is 65.535 seconds
001681  001885  //       : A timer must be set with the sys_SetTimer("timernum","value") function
001682  001886        
001683  001887  func sys_SetTimerEvent("timernum","function"), 1;
001684  001888  // Syntax: sys_SetTimerFunction("timernum", "function");
001685  001889  // Usage : sys_SetTimer(TIMER5, myfunc);
001686  001890  // Notes : set a function to be called for selected timer.
001687  001891  //       : When the timer reaches zero, the function is called.
001688  001892  //       : The called function must not have any parameters
001689  001893  //       : sys_SetTimerEvent returns any previous event function
001690  001894  //       : address, or zero if there was no previous function.
001691  001895        
001692  001896  func sys_EventQueue(), 1;
001693  001897  // Syntax: sys_EventQueue();
001694  001898  // Usage : tasks := sys_EventQueue();
001695  001899  // Notes : returns the max number of events that were pending
001696  001900  //       : in the timer queue since the last call to this function.
001697  001901  //       : This can be used to assess timer event overhead burden,
001698  001902  //       : especially after or during a sys_EventsPostpone action.
001699  001903        
001700  001904  func sys_EventsPostpone(), 0;
001701  001905  // Syntax: sys_EventPostpone();
001702  001906  // Usage : sys_EventPostpone();   // postpone the event queue
001703  001907  // Notes : postpone any events until the sys_EventResume function is executed
001704  001908  //       : The timer event queue will continue to queue events, but no action
001705  001909  //       : will take place untill a sys_EventResume function is encountered.
001706  001910  //       : The queue will continue to receive up to 32 events before discarding
001707  001911  //       : any further events. This function is required to allow a sequence of
001708  001912  //       : instructions or functions to occur that would otherwise be corrupted
001709  001913  //       : by an event occuring during the sequence of instructions or functions.
001710  001914  //       : A good example of this is when you set a position to print, if there
001711  001915  //       : was no way of locking the current sequence, an event may occur which
001712  001916  //       : does a similar thing, and a contention would occur - printing to
001713  001917  //       : the wrong position. This function should be used wisely, if any action
001714  001918  //       : that is required would take considerable time, it is better to disable
001715  001919  //       : any conflicting event functions with a bypass flag, then restart the
001716  001920  //       : conflicting event by re-issuing a timer value.
001717  001921        
001718  001922  func sys_EventsResume(), 0;
001719  001923  // Syntax: sys_EventsResume();
001720  001924  // Usage : sys_EventsResume();   // resume the event queue
001721  001925  // Notes : resume any postponed events. The queue will try to execute any timer
001722  001926  //       : events that were incurred during the postponed period.
001723  001927        
001724  001928        
001725  001929  func sys_Sleep("units"), 1;
001726  001930  // Syntax: t := sys_Sleep("units");
001727  001931  // Usage : t := sys_Sleep(10);
001728  001932  // Notes : sets the display into low power mode for a period of time.
001729  001933  //       : Touching the touch screen will also wake from sleep.
001730  001934  //       : Returns remaining sleep units.
001731  001935        
001732  001936  func iterator("offset"), 0;
001733  001937  // Syntax: t :=  iterator("offset");
001734  001938  // Usage : t :=  iterator(10);
001735  001939  // Notes : set the iterator size for ++/--
001736  001940  //       : The next postinc,postdec,preinc of predec will alter
001737  001941  //       : by the specified value.
001738  001942  //       : The offset will return to 1 after the next operation.
001739  001943        
001740  001944        
001741  001945        
001742  001946        
001743  001947  //------------------------------------------------------------------//
001744  001948  //         Touch Screen Function Prototypes
001745  001949  //------------------------------------------------------------------//
001746  001950        
001747  001951  func touch_DetectRegion("x1" ,"y1", "x2", "y2"), 0;
001748  001952  // Syntax: touch_DetectRegion(x1, y1, x2, y2);
001749  001953  // Usage : touch_DetectRegion(arg1, arg2, arg3, arg4);
001750  001954  // Notes : Specifies a new touch detect region on the screen
001751  001955  //       : such that only touch activity in that region will
001752  001956  //       : be reported by the status poll touch_Get(TOUCH_STATUS);
001753  001957        
001754  001958  func touch_Set("mode"), 0;
001755  001959  // Syntax: touch_Set(mode);
001756  001960  // Usage : touch_Set(arg);
001757  001961  // Notes : Sets various Touch Screen related parameters
001758  001962  //       :
001759  001963  //       : mode = TOUCH_ENABLE (mode 0)  Enable Touch Screen
001760  001964  //       : touch_Set(TOUCH_ENABLE);
001761  001965  //       : Enables and initialises Touch Screen hardware
001762  001966  //       :
001763  001967  //       : mode = TOUCH_DISABLE (mode 1)  Disable Touch Screen
001764  001968  //       : touch_Set(TOUCH_DISABLE );
001765  001969  //       : Disables the Touch Screen
001766  001970  //       : Note: Touch Screen runs in the background and disabling
001767  001971  //       : it when not in use will free up extra resources
001768  001972  //       : such as 4DVM CPU cycles.
001769  001973  //       :
001770  001974  //       : mode = TOUCH_REGIONDEFAULT (mode 2)  Default Touch Region
001771  001975  //       : touch_Set(TOUCH_REGIONDEFAULT);
001772  001976  //       : This will reset the current active region to default
001773  001977  //       : to the full screen without the application having to
001774  001978  //       : set a new active region for the full screen.
001775  001979  //       : (NB for 'no touch' devices - like uVGAII or OLED's/LCD's
001776  001980  //       : that requre to be interfaced with an external pointing
001777  001981  //       : device, values that are poked into TOUCH_DRIVE will be
001778  001982  //       : read with the touch_Get() function)
001779  001983        
001780  001984        
001781  001985  func touch_Get("mode"), 1;
001782  001986  // Syntax: touch_Get(mode);
001783  001987  // Usage : arg1 := touch_Get(arg);
001784  001988  // Notes : Returns various Touch Screen parameters to caller
001785  001989  //       :
001786  001990  //       : mode = TOUCH_STATUS  (mode 0)
001787  001991  //       : var := touch_Get(TOUCH_STATUS);
001788  001992  //       : Returns the various states of the touch screen
001789  001993  //       : 0 = NOTOUCH
001790  001994  //       : 1 = TOUCH_PRESSED
001791  001995  //       : 2 = TOUCH_RELEASED
001792  001996  //       : 3 = TOUCH_MOVING
001793  001997  //       :
001794  001998  //       : mode = TOUCH_GETX   (mode 1)
001795  001999  //       : var := touch_Get(TOUCH_GETX);
001796  002000  //       : Returns the X coordinates of the touch
001797  002001  //       :
001798  002002  //       : mode = TOUCH_GETY   (mode 2)
001799  002003  //       : var := touch_Get(TOUCH_GETY);
001800  002004  //       : Returns the Y coordinates of the touch
001801  002005        
001802  002006  //------------------------------------------------------------------//
001803  002007  //        CTYPE Function Prototypes
001804  002008  //------------------------------------------------------------------//
001805  002009        
001806  002010  func isdigit("char"), 1;    //Returns a 1 if the character is an ascii digit else returns a 0
001807  002011  // Syntax: isdigit("char");
001808  002012  // Usage : Var := isdigit(ch);
001809  002013  // Notes : char specifies the ascii character for the test
001810  002014  //     : 0 : char is not an ascii digit.
001811  002015  //     : 1 : char is an ascii digit..
001812  002016  //     : Valid range is "0123456789"
001813  002017        
001814  002018  func isxdigit("char"), 1;    //Returns a 1 if the character is an ascii hexadecimal digit else returns a 0
001815  002019  // Syntax: isxdigit("char");
001816  002020  // Usage : Var := isxdigit(ch);
001817  002021  // Notes : char specifies the ascii character for the test
001818  002022  //     : 0 : char is not an ascii hexadecimal digit.
001819  002023  //     : 1 : char is an ascii hexadecimal digit..
001820  002024  //     : Valid range is "0123456789ABCDEF"
001821  002025        
001822  002026  func isupper("char"), 1;    //Returns a 1 if the character is an ascii upper case letter else returns a 0
001823  002027  // Syntax: isupper("char");
001824  002028  // Usage : Var := isupper(ch);
001825  002029  // Notes : char specifies the ascii character for the test
001826  002030  //     : 0 : char is not an ascii upper-case letter.
001827  002031  //     : 1 : char is an ascii upper-case letter.
001828  002032  //     : Valid range is "ABCD....WXYZ"
001829  002033        
001830  002034  func islower("char"), 1;    //Returns a 1 if the character is an ascii lower case letter else returns a 0
001831  002035  // Syntax: islower("char");
001832  002036  // Usage : Var := islower(ch);
001833  002037  // Notes : char specifies the ascii character for the test
001834  002038  //     : 0 : char is not an ascii lower-case letter.
001835  002039  //     : 1 : char is an ascii lower-case letter.
001836  002040  //     : Valid range is "abcd....wxyz"
001837  002041        
001838  002042  func isalpha("char"), 1;    //Returns a 1 if the character is an ascii lower or upper case letter else returns a 0
001839  002043  // Syntax: isalpha("char");
001840  002044  // Usage : Var := isalpha(ch);
001841  002045  // Notes : char specifies the ascii character for the test
001842  002046  //     : 0 : char is not an ascii lower or upper case letter.
001843  002047  //     : 1 : char is an ascii lower or upper case letter.
001844  002048  //     : Valid range is "ABCD...XYZ", "abcd....wxyz"
001845  002049        
001846  002050  func isalnum("char"), 1;    //Returns a 1 if the character is an ascii alpha numeric else returns a 0
001847  002051  // Syntax: isalnum("char");
001848  002052  // Usage : Var := isalnum(ch);
001849  002053  // Notes : char specifies the ascii character for the test
001850  002054  //     : 0 : char is not an ascii alphanumeric character.
001851  002055  //     : 1 : char is an ascii alphanumeric character.
001852  002056  //     : Valid range is "ABCD...XYZ", "abcd....wxyz", "0123456789"
001853  002057        
001854  002058  func isprint("char"), 1;    //Returns a 1 if the character is a printible ascii char else returns a 0
001855  002059  // Syntax: isprint("char");
001856  002060  // Usage : Var := isprint(ch);
001857  002061  // Notes : char specifies the ascii character for the test
001858  002062  //     : 0 : char is not a printable ascii character.
001859  002063  //     : 1 : char is a printable ascii character.
001860  002064  //     : Valid range is "0x20...0x7F"
001861  002065        
001862  002066  func isspace("char"), 1;    //Returns a 1 if the character is any one of the space type chars else returns a 0
001863  002067  // Syntax: isspace("char");
001864  002068  // Usage : Var := isspace(ch);
001865  002069  // Notes : char specifies the ascii character for the test
001866  002070  //     : 0 : char is not a space type character.
001867  002071  //     : 1 : char is a space type character.
001868  002072  //     : Valid range is space, formfeed, newline, carriage return, tab, vertical tab
001869  002073        
001870  002074  //unformatted
001871  002075  func iswhite("char"), 1;    //
001872  002076  // Syntax: iswhite("char");
001873  002077  // Usage : Var := iswhite(ch);
001874  002078  // Notes : char specifies the ascii character for the test
001875  002079  //     : 0 : char is not a space or tab character.
001876  002080  //     : 1 : char is not a space or tab character.
001877  002081  //     : Valid range is space or tab
001878  002082        
001879  002083  func toupper("char"), 1; //if character is lower case it returns the upper case equivalent else returns the passed char
001880  002084  // Syntax: toupper("char");
001881  002085  // Usage : Var := toupper(ch);
001882  002086  // Notes : char specifies the ascii character for the test
001883  002087  //     : "ABCD....XYZ" : if character is a lower case letter.
001884  002088  //     : char : if character is not a lower case letter.
001885  002089  //     : Valid range is "abcd....wxyz"
001886  002090        
001887  002091  func tolower("char"), 1; //if character is upper case it returns the lower case equivalent else returns the passed char
001888  002092  // Syntax: tolower("char");
001889  002093  // Usage : Var := tolower(ch);
001890  002094  // Notes : char specifies the ascii character for the test
001891  002095  //     : "abcd....xyz" : if character is an upper case letter.
001892  002096  //     : char : if character is not an upper case letter.
001893  002097  //     : Valid range is "ABCD....WXYZ"
001894  002098        
001895  002099  func LObyte("var"), 1;        //Returns the lower byte (lower 8 bits) of a 16 bit variable.
001896  002100  // Syntax: LObyte(var);
001897  002101  // Usage : myVar := LObyte(myvar2);
001898  002102  // Notes : var specifies the user variable
001899  002103  //     : Returns the lower byte (lower 8 bits) of a 16 bit variable
001900  002104        
001901  002105  func HIbyte("var"), 1;        //Returns the High byte (upper 8 bits) of a 16 bit variable.
001902  002106  // Syntax: HIbyte(var);
001903  002107  // Usage : myVar := HIbyte(myvar2);
001904  002108  // Notes : var specifies the user variable
001905  002109  //     : Returns the high byte (upper 8 bits) of a 16 bit variable
001906  002110        
001907  002111        
001908  002112  func ByteSwap("var"), 1;    //Returns the swapped upper and lower bytes of a 16 bit variable.
001909  002113  // Syntax: ByteSwap(var);
001910  002114  // Usage : myVar := ByteSwap(myvar2);
001911  002115  // Notes : var specifies the user variable
001912  002116  //     : Returns the endian swapped value of a 16 bit variable
001913  002117        
001914  002118        
001915  002119  //------------------------------------------------------------------//
001916  002120  //        Memory Allocation Function Prototypes
001917  002121  //------------------------------------------------------------------//
001918  002122        
001919  002123  func mem_Alloc("size"), 1;
001920  002124  // Syntax: mem_Alloc(bytesize);
001921  002125  // Usage : myvar := mem_Alloc(100);
001922  002126  // Notes : Allocate a block of memory to pointer myvar
001923  002127  //       : The allocated memory contains garbage but is a fast allocation.
001924  002128  //       : The block must later be released with mem_Free();
001925  002129  //       : returns 0 if function fails
001926  002130        
001927  002131  func mem_AllocV("size"), 1;
001928  002132  // Syntax: mem_AllocV(bytesize);
001929  002133  // Usage : myvar := mem_AllocV(100);
001930  002134  // Notes : Allocate a block of memory to pointer myvar
001931  002135  //       : The block of memory is filled with signature values
001932  002136  //       : the block starts with A5,5A then fills with incrementing
001933  002137  //       : number eg:- A5,5A,00,01,02,03...FF,00,11....
001934  002138  //       : This can be helpful when debugging
001935  002139  //       : The block must later be released with mem_Free();
001936  002140  //       : returns 0 if function fails
001937  002141        
001938  002142  func mem_AllocZ("size"), 1;
001939  002143  // Syntax: mem_AllocZ(bytesize);
001940  002144  // Usage : myvar := mem_AllocC(100);
001941  002145  // Notes : Allocate a zeroed block of memory to pointer myvar
001942  002146  //       : The block of memory is filled with zeroes
001943  002147  //       : The block must later be released with mem_Free();
001944  002148  //       : returns 0 if function fails
001945  002149        
001946  002150  func mem_Realloc("ptr", "size"), 1;
001947  002151  // Syntax: myvar := mem_Realloc("ptr", "size");
001948  002152  // Usage : myvar := mem_Realloc(ptr, size);
001949  002153  // Notes : The function may move the memory block to a new location,
001950  002154  //       : in which case the new location is returned.
001951  002155  //       : The content of the memory block is preserved up to the lesser
001952  002156  //       : of the new and old sizes, even if the block is moved.
001953  002157  //       : If the new size is larger, the value of the newly allocated
001954  002158  //       : portion is indeterminate. In case that ptr is NULL,
001955  002159  //       : the function behaves exactly as mem_Alloc, assigning a new block
001956  002160  //       : of size bytes and returning a pointer to the beginning of it.
001957  002161  //       : In case that the size is 0, the memory previously allocated in
001958  002162  //       : ptr is deallocated as if a call to mem_Free()was made, and a NULL
001959  002163  //       : pointer is returned.
001960  002164        
001961  002165  func mem_Free("allocation"), 1;
001962  002166  // Syntax: myvar := mem_Free(allocation);
001963  002167  // Usage : myvar := mem_Free(myvar);
001964  002168  // Notes : De-allocate a block of memory previously created with
001965  002169  //       : mem_Alloc(...), mem_AllocV(...); or mem_AllocZ(...);
001966  002170  //       : returns 0 if function fails
001967  002171        
001968  002172  func mem_Heap(), 1;
001969  002173  // Syntax: myvar := mem_Heap();
001970  002174  // Usage : myvar := mem_Heap();
001971  002175  // Notes : returns bytecount available in heap
001972  002176  //       :
001973  002177        
001974  002178  func mem_Set("ptr","char","size"), 1;
001975  002179  // Syntax: mem_Set(ptr,char,bytesize);
001976  002180  // Usage : mem_Set(p, 'A', 100);
001977  002181  // Notes : fill a block of memory with a byte value
001978  002182  //       : returns ptr
001979  002183        
001980  002184  func mem_Copy("src", "dest", "bytecount"), 1;
001981  002185  // Syntax: myvar := mem_Copy(src, dest, bytesize);
001982  002186  // Usage : myvar := mem_Copy(p1, p2, 100);
001983  002187  // Notes : copy a word aligned block of memory from src to dest
001984  002188  //       : Note that count is a byte count, this facilitates
001985  002189  //       : copying word aligned byte arrays when using word
001986  002190  //       : aliggned packed strings.
001987  002191  //       : returns src
001988  002192        
001989  002193  func mem_Compare("ptr1","ptr2","count"), 1;
001990  002194  // Syntax: myvar := mem_Compare(ptr1,ptr2,bytesize);
001991  002195  // Usage : myvar := mem_Compare(p1, p2, 100);
001992  002196  // Notes : compare blocks of memory at src, dest
001993  002197  //       : returns 0 if we have a match
001994  002198        
001995  002199  //------------------------------------------------------------------//
001996  002200  //        FAT16 Function Prototypes
001997  002201  //------------------------------------------------------------------//
001998  002202        
001999  002203  func file_Error(), 1;
002000  002204  // Syntax: myvar := file_Error();
002001  002205  // Usage : e := file_Error();
002002  002206  // Notes : return the most recent file error.
002003  002207  //       :
002004  002208        
002005  002209  func file_Count("filename"), 1;
002006  002210  // Syntax: count := file_Count("filename");
002007  002211  // Usage : count := file_Count("*.4dg");
002008  002212  // Notes : returns number of files found that match the criteria
002009  002213        
002010  002214  func file_Dir("filename"), 1;
002011  002215  // Syntax: count := file_Dir("filename");
002012  002216  // Usage : count := file_Dir("*.4dg");
002013  002217  // Notes : streams a string of filenames that agree with the search key
002014  002218  //       : returns number of files found that match the criteria
002015  002219        
002016  002220  func file_FindFirst("fname"), 1;
002017  002221  // Syntax: res := file_FindFirst("fname");
002018  002222  // Usage : if (file_FindFirst("*.4xe") ....
002019  002223  // Notes : returns true if at least 1 file exists
002020  002224  //       : that satisfies the file argument.
002021  002225  //       : Wildcards are usually used so if
002022  002226  //       : file_FindFirst returns true, further
002023  002227  //       : tests can be made using file_FindNext();
002024  002228  //       : to find all the files that match the
002025  002229  //       : wildcard class. Note that the stream behaviour
002026  002230  //       : is the same as file_Dir.
002027  002231  //       :
002028  002232        
002029  002233  func file_FindNext(), 1;
002030  002234  // Syntax: res := file_FindNext();
002031  002235  // Usage : while ((file_FindNext()) ....
002032  002236  // Notes : returns true if more file exists
002033  002237  //       : that satisfies the file argument
002034  002238  //       : that was given for  file_FindFirst.
002035  002239  //       : Wildcards must be used for
002036  002240  //       : file_FindFirst, else this function will
002037  002241  //       : always return zero as the only occurence
002038  002242  //       : will have already been found.
002039  002243  //       : Note that the stream behaviour
002040  002244  //       : is the same as file_Dir.
002041  002245  //       :
002042  002246        
002043  002247  func file_Exists("fname"), 1;
002044  002248  // Syntax: res := file_Exists("fname"),
002045  002249  // Usage : if(file_Exists("myfile") ....
002046  002250  // Notes : returns true if file exists
002047  002251  //       :
002048  002252        
002049  002253  func file_Open("fname", "mode"), 1;
002050  002254  // Syntax: handle := file_Open("fname","mode"),
002051  002255  // Usage : handle := file_Open("myfile.txt", 'r');
002052  002256  // Notes : returns handle if file exists
002053  002257  //       :
002054  002258        
002055  002259  func file_Close("handle"), 1;
002056  002260  // Syntax: res := file_Close("handle");
002057  002261  // Usage : res := file_Close(hnd1);
002058  002262  // Notes : returns true if file closed ok
002059  002263  //       :
002060  002264        
002061  002265  func file_Read("*dest", "size", "handle"), 1;
002062  002266  // Syntax: res := file_Read("*dest", "size", "handle"),
002063  002267  // Usage : res := file_Read(memblock,20,hnd1);
002064  002268  // Notes : returns number of characters read
002065  002269  //       : if "dest" is zero, data is read direct to GRAM window
002066  002270  //       :
002067  002271        
002068  002272        
002069  002273  func file_Seek("handle", "HiWord", "LoWord"), 1;
002070  002274  // Syntax: res := file_Seek("handle", "HiWord", "LoWord")
002071  002275  // Usage : res := file_Seek(hSource, 0, 0x1234);
002072  002276  // Notes : set file position to 0x00001234 (byte position 4660)
002073  002277  //       : for the file handle so subsequent data may be read
002074  002278  //       : from that position onwards with file_GetC(...),
002075  002279  //       : file_GetW(...) or file_GetS(...), or an image
002076  002280  //       : can be displayed with file_Image(...)
002077  002281  // Notes : returns true if ok, usually ignored
002078  002282        
002079  002283  func file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002080  002284  // Syntax: file_Index("handle", "HiSize", "LoSize","recordnum"), 1;
002081  002285  // Usage : res := file_Index(hsource, 0, 1000, 123), 1;
002082  002286  // Notes : set file seek position to 123000
002083  002287  //       : for the file handle so subsequent data may be read
002084  002288  //       : from that record position onwards with file_GetC(...),
002085  002289  //       : file_GetW(...) or file_GetS(...), or an image
002086  002290  //       : can be displayed with file_Image(...)
002087  002291  // Notes : returns true if ok, usually ignored
002088  002292        
002089  002293  func file_Tell("handle", "&HiWord", "&LoWord"), 1;
002090  002294  // Syntax: file_Tell("handle", &HiWord, &LoWord);
002091  002295  // Usage : file_Tell(fhndl, &SizeHi, &SizeLo);
002092  002296  // Notes : Reads the 32 bit file pointer and stores it into 2 variables.
002093  002297  //       : returns true if function succeeded
002094  002298        
002095  002299  func file_Write("*source", "size", "handle"), 1;
002096  002300  // Syntax: res := fwrite("*source", "size", "handle"),
002097  002301  // Usage : res := fwrite(memblock, 20, hnd1);
002098  002302  // Notes : returns number of bytes written
002099  002303  //       :
002100  002304        
002101  002305  func file_Size("handle", "&HiWord", "&LoWord"), 1;
002102  002306  // Syntax: file_Size("handle", &HiWord, &LoWord);
002103  002307  // Usage : file_Size(fhndl, &SizeHi, &SizeLo);
002104  002308  // Notes : Reads the 32 bit file size and stores it into 2 variables.
002105  002309  //       : returns true if function succeeded
002106  002310        
002107  002311  func file_Image("x", "y", "handle"), 1;
002108  002312  // Syntax: file_Image(x, y, handle);
002109  002313  // Usage : file_Image(10, 10, hnd1);
002110  002314  // Notes : Display an image from a file at the current file position.
002111  002315  //       : The image is displayed at x,y (with respect to top left corner).
002112  002316  //       : If there is more than 1 image in the file, it can be
002113  002317  //       : accessed with file_Seek(...)
002114  002318        
002115  002319  func file_ScreenCapture("x", "y", "width", "height", "handle"), 1;
002116  002320  // Syntax: file_ScreenCapture(x, y, w, h, handle);
002117  002321  // Usage : file_ScreenCapture(10, 10, 50,50, hnd1);
002118  002322  // Notes : Save a image from screen to file at the current file position.
002119  002323  //       : The image can later be displayed with file_Image(...);
002120  002324  //       : The file may be opened in append mode to accumulate multiple
002121  002325  //       : images. Later, the images can be accessed with file_Seek(...);
002122  002326  //       : Note that the image will be sector aligned.
002123  002327  //       : All image headers must start on a sector boundary.
002124  002328  //       : The image is saved from x, y (with respect to top left corner)
002125  002329  //       : and the capture area is determined by "width" and "height".
002126  002330  //       : returns 0 if function succeeded
002127  002331        
002128  002332  func file_PutC("char","handle"), 1;
002129  002333  // Syntax: file_PutC("char", "handle");
002130  002334  // Usage : file_PutC('x', hndl);
002131  002335  // Notes : returns true if function succeeded
002132  002336        
002133  002337  func file_GetC("handle"), 1;
002134  002338  // Syntax: file_GetC("handle");
002135  002339  // Usage : mychar := fgetC("handle");
002136  002340  // Notes : returns next char from file
002137  002341        
002138  002342  func file_PutW("word","handle"), 1;
002139  002343  // Syntax: file_PutW("word","handle");
002140  002344  // Usage : file_PutW(0x1234, hndl);
002141  002345  // Notes : returns true if function succeeded
002142  002346        
002143  002347  func file_GetW("handle"), 1;
002144  002348  // Syntax: file_GetW("handle");
002145  002349  // Usage : myword := fgetW("handle");
002146  002350  // Notes : returns next word in file
002147  002351        
002148  002352  func file_PutS("*source", "handle"), 1;
002149  002353  // Syntax: res := file_Puts("*source", "handle"),
002150  002354  // Usage : res := file_Puts(mystring, hnd1);
002151  002355  // Notes : returns number of characters written
002152  002356  //       :
002153  002357        
002154  002358  func file_GetS("*string", "size", "handle"), 1;
002155  002359  // Syntax: res := file_Gets("*string", "size", "handle");
002156  002360  // Usage : res := file_Gets(mystr , 81, hnd1); // read up to 80 chars
002157  002361  // Notes : get a string from a file
002158  002362  //       : returns pointer to string or null if failed.
002159  002363  //       : file_GetS(...) automatically appends a null-terminator to the data read.
002160  002364  //       : NB:- only reads up to "size-1" characters into "string"
002161  002365  //       : file_GetS(...) will stop reading when any of the following conditions are true:
002162  002366  //       : A] It has read n-1 bytes (one character is reserved for the null-terminator)
002163  002367  //       : B] It encounters a newline character (a line-feed in the compilers tested here), or
002164  002368  //       : C] It reaches the end of file
002165  002369  //       : D] A read error occurs.
002166  002370        
002167  002371        
002168  002372  func file_Erase("fname"), 1;
002169  002373  // Syntax: res := file_Erase("fname");
002170  002374  // Usage : res := file_Erase("myfile.txt");
002171  002375  // Notes : returns true if successful
002172  002376  //       :
002173  002377        
002174  002378  func file_Rewind("handle"), 1;
002175  002379  // Syntax: res := file_Rewind("handle");
002176  002380  // Usage : res := file_Rewind(hnd1);
002177  002381  // Notes : returns true if file rewound ok (usually ignored)
002178  002382  //       : resets the file pointer the the beginning of the open file.
002179  002383        
002180  002384  func file_LoadFunction("fname.4xe"), 1;
002181  002385  // Syntax: res := file_LoadFunction("fname.4fn");
002182  002386  // Usage : myfunc := file_LoadFunction(myfuncname);
002183  002387  // Notes : Load a function or program from disk and
002184  002388  //       : return a function pointer to the allocation.
002185  002389  //       : The function can then be invoked just like any other
002186  002390  //       : function would be called via a function pointer.
002187  002391  //       : Parameters may be passed to it in a conventional way.
002188  002392  //       : The function may be discarded at any time when no
002189  002393  //       : longer required, thus freeing its memory resources.
002190  002394  //       : The loaded function can be discarded with mem_Free(..)
002191  002395  //       : eg:
002192  002396  //       : popupWindow := file_LoadFunction("popupWindow1.4fn");
002193  002397  //       : if(!popupWindow) goto LoadFunctionFailed; // could not load the function !!!
002194  002398  //       : then elsewhere in your program:-
002195  002399  //       : res := popupWindow(MYMODE,"My Title","My Popup Text");
002196  002400  //       : if(res == QUIT_APPLICATION) goto exitApp;
002197  002401  //       : Later in your program, when popupWindow is no longer
002198  002402  //       : required for the application:-
002199  002403  //       : res := mem_Free(popupWindow);
002200  002404  //       : if(!res) goto FreeFunctionFailed; // should never happen if memory not corrupted
002201  002405  //       : The callers stack is shared by the loaded function,
002202  002406  //       : however any global variables in the loaded function
002203  002407  //       : are private to that function.
002204  002408  //
002205  002409        
002206  002410  func file_Run("fname.4xe", "arglistptr"), 1;
002207  002411  // Syntax: res := file_Run("fname.4xe","arglistptr");
002208  002412  // Usage : res := file_Run(fname, argptr);
002209  002413  // Notes : current program releases any allocated memory but
002210  002414  //       : retains the stack and global memory.
002211  002415  //       : If arglistptr is 0, no arguments are passed, else
002212  002416  //       : arglist points to an array, the first element being
002213  002417  //       : the number of elements in the array.
002214  002418  //       : func 'main' in the called program accepts
002215  002419  //       : the arguments, if any. THe arguments can only
002216  002420  //       : be passed by value, no pointers or references can be
002217  002421  //       : used as all memory is cleared before the file
002218  002422  //       : is loaded. Refer to file_Exec and file_LoadFunction
002219  002423  //       : for functions that can pass by reference.
002220  002424        
002221  002425  func file_Exec("fname.4xe", "arglistptr"), 1;
002222  002426  // Syntax: res := file_Exec("fname.4xe","arglistptr");
002223  002427  // Usage : res := file_Exec("fname.4xe","arglistptr");
002224  002428  // Notes : returns like a function, current program
002225  002429  //       : calling program is kept active and control returns to it.
002226  002430  //       : If arglistptr is 0, no arguments are passed, else
002227  002431  //       : arglist points to an array, the first element being
002228  002432  //       : the number of elements in the array.
002229  002433  //       : func 'main' in the called program accepts the arguments.
002230  002434  //       : This function is similar to file_LoadFunction(...), however,
002231  002435  //       : the function argument list is passed by pointer, and
002232  002436  //       : the memory consumed by the function is released as
002233  002437  //       : soon as the function completes.
002234  002438        
002235  002439  func file_LoadImageControl("fname1", "fname2", "mode"), 1;
002236  002440  // Syntax: hImagelist := file_LoadImageControl ("controlfile", "imagefile", "mode"),
002237  002441  // Usage : hImagelist := file_LoadImageControl ("resource.dat", "resource.gci", 0);
002238  002442  // Notes : Reads a control file to create an image list.
002239  002443  //       : Returns NULL if function fails.
002240  002444  //       : Returns a handle (pointer to the memory allocation) to the
002241  002445  //       : image control list that has been created.
002242  002446  //       : "fname1" is the control list filename "*.dat"
002243  002447  //       : "fname2" is the image filename "*.gci"
002244  002448        
002245  002449  // Notes : This function Calculates the size of a chunk of memory required for
002246  002450  //       : a image list and populates it from the image control file ("*.dat")
002247  002451  //       : therefore, when imagelist is no longer required, you must de-allocate
002248  002452  //       : the image list memory by using eg:- mem_Free(hImagelist);
002249  002453  //       : to restore the heap.
002250  002454  //       :
002251  002455  //       : mode 0:- it is assumed that there is a graphics file with the
002252  002456  //       : file extension "fname2.gci". In this case, the images have been stored
002253  002457  //       : in a FAT16 file concurrently, and the offsets that ar derived from the
002254  002458  //       : "fname1.dat" file are saved in the image control so that the image control
002255  002459  //       : can open the file (*.gci) and us file_Seek to get to the position of the
002256  002460  //       : image which can then automatically be displayed using file_Image(xpos, ypos, hSource);
002257  002461  //       : mode 0 builds the image control quickly as it only scans the *.dat file
002258  002462  //       : for the file offsets and save them in the relevant entries in the image control.
002259  002463  //       : The penalty is that images take longer to find when displayed due to file_Seek
002260  002464  //       : overheads.
002261  002465  //
002262  002466  //       : mode 1:- it is assumed that there is a graphics file with the
002263  002467  //       : file extension "fname2.gci". In this case, the images have been stored
002264  002468  //       : in a FAT16 file concurrently, and the offset of the images are saved
002265  002469  //       : in the image control so that image file (*.gci) can be mapped to directly.
002266  002470  //       : The absolute cluster/sector is mapped so file seek does not need to be called
002267  002471  //       : internally. This means that there is no seek time penalty, however, the
002268  002472  //       : image list takes a lot longer to build, as all the seeking is done at control
002269  002473  //       : build time.
002270  002474        
002271  002475  //       : mode 2:- the graphics file with the is placed in a partitioned area
002272  002476  //       : In this case, the images have been stored in a in a known raw area of the FAT16
002273  002477  //       : disk, and the absolute address of the images are saved in the DAT file
002274  002478  //       : This is the fastest operation of the image control as there is no seeking
002275  002479  //       : or other disk activity taking place.
002276  002480        
002277  002481  func file_Mount(), 1;
002278  002482  // Syntax: r := file_Mount();
002279  002483  // Usage : r := file_Mount();
002280  002484  // Notes : Create a control block for FAT16 and mount the File System
002281  002485        
002282  002486  func file_Unmount(), 0;
002283  002487  // Syntax: file_Unmount();
002284  002488  // Usage : file_Unmount();
002285  002489  // Notes : release any control block and buffers for FAT16
002286  002490  //       : and unmount the File System
002287  002491        
002288  002492  func file_PlayWAV("fname1"), 1;
002289  002493  // Syntax: file_PlayWAV("fname1");
002290  002494  // Usage : file_PlayWAV("ding.wav");
002291  002495  // Notes : Play a wave file with filename "fname1"
002292  002496  //       : This function automatically grabs a chunk
002293  002497  //       : of memory for a file buffer, and a wave
002294  002498  //       : buffer. The minimum memory requirement is
002295  002499  //       : about 580 bytes for the disk io service and
002296  002500  //       : a minimum wave buffer size of 1024. The siz
002297  002501  //       : of the wave buffer allocation
002298  002502  //       : can be increased by the snd_BufSize function.
002299  002503  //       : The default size 1024 bytes.
002300  002504  //       : NB the memory is only required during the
002301  002505  //       : duration of play, and is automatically
002302  002506  //       : released while not in use.
002303  002507  //       : See the Sound Class services for other associated controls.
002304  002508  //       : If there are no errors, returns number of blocks to play (1 to 32767)
002305  002509  //       : If errors occured, the folling is returned
002306  002510  //       : -7  : Insufficient memory available for WAV buffer and file
002307  002511  //       : -6  : cant play this rate
002308  002512  //       : -5  : no data chunk found in first rsector
002309  002513  //       : -4  : no format data
002310  002514  //       : -3  : no wave chunk signature
002311  002515  //       : -2  : bad wave file format
002312  002516  //       : -1  : file not found
002313  002517        
002314  002518        
002315  002519        
002316  002520  //------------------------------------------------------------------//
002317  002521  //        Sound Class Services
002318  002522  //------------------------------------------------------------------//
002319  002523        
002320  002524  func snd_Volume("var"), 0;
002321  002525  // Syntax: snd_Volume("var");
002322  002526  // Usage : snd_Volume(30);
002323  002527  // Notes : set sound playback volume.  Var must
002324  002528  //       : be in the range from 8 (min volume)
002325  002529  //       : to 127 (max volume). If var is less
002326  002530  //       : than 8 volume is set to 8, and if
002327  002531  //       : var > 127 it is set to 127.
002328  002532        
002329  002533  func snd_Pitch("pitch"), 1;
002330  002534  // func snd_Pitch("freq"), 1;
002331  002535  // func snd_Pitch(7000), 1; // play the wave file with a sample frequency of 7khz
002332  002536  // Notes : sets the samples playback rate to a different frequency
002333  002537  //       : The minimum value is 4khz
002334  002538  //       : Setting the pitch to zero restores the original sample rate
002335  002539  //       : Return value is the samples original sample rate.
002336  002540        
002337  002541  func snd_BufSize("var"), 0;
002338  002542  // Syntax: snd_BufSize("var");
002339  002543  // Usage : snd_BufSize(2);
002340  002544  // Notes : specify the a memory chunk size for the wavefile buffer.
002341  002545  //       : default size 1024 bytes.
002342  002546  //       : 0 = 1024 bytes (default)
002343  002547  //       : 1 = 2048 bytes
002344  002548  //       : 2 = 4096 bytes
002345  002549  //       : 3 = 8192 bytes
002346  002550        
002347  002551  func snd_Stop(), 0;
002348  002552  // Syntax: snd_Stop();
002349  002553  // Usage : snd_Stop();
002350  002554  // Notes : stop any sound that is playing, releasing
002351  002555  //       : buffers and closes any open wav file.
002352  002556        
002353  002557  func snd_Pause(), 0;
002354  002558  // Syntax: snd_Pause();
002355  002559  // Usage : snd_Pause();
002356  002560  // Notes : pauses any sound that is playing, does nothing
002357  002561  //       : until sound is resumed with snd_Continue().
002358  002562  //       : The sample cam be terminated with snd_Stop.
002359  002563  //       : buffers and closes any open wav file.
002360  002564        
002361  002565  func snd_Continue(), 0;
002362  002566  // Syntax: snd_Continue();
002363  002567  // Usage : snd_Continue();
002364  002568  // Notes : resume any sound that is paused by snd_Pause.
002365  002569        
002366  002570  func snd_Playing(), 1;
002367  002571  // Syntax: snd_Playing();
002368  002572  // Usage : r := snd_Playing();
002369  002573  // Notes : returns 0 if sound has finished playing,
002370  002574  //       : else return number of 512 byte blocks to go.
002371  002575        
002372  002576        
002373  002577        
002374  002578  //------------------------------------------------------------------//
002375  002579  //        String Class Services
002376  002580  //------------------------------------------------------------------//
002377  002581        
002378  002582  func str_Ptr("&var"), 1;
002379  002583  // Syntax: str_Ptr(&var);
002380  002584  // Usage : p := str_Ptr(&var);
002381  002585  // Notes : return a byte pointer to a word region
002382  002586        
002383  002587  func str_GetD("&ptr", "&var"), 1;
002384  002588  // Syntax: str_GetD(&ptr, &var);
002385  002589  // Usage : ok := str_GetD(&ptr, &var);
002386  002590  // Notes : convert number in a string to DWORD ( myvar[2] )
002387  002591  //       : returns true if function succeeds, advancing ptr
002388  002592        
002389  002593  func str_GetW("&ptr", "&var"), 1;
002390  002594  // Syntax: str_GetW(&ptr, &var);
002391  002595  // Usage : ok := str_GetW(&ptr, &var);
002392  002596  // Notes : convert number in a string to WORD ( myvar )
002393  002597  //       : returns true if function succeeds, advancing ptr
002394  002598        
002395  002599  func str_GetHexW("&ptr", "&var"), 1;
002396  002600  // Syntax: str_GetHexW(&ptr, &var);
002397  002601  // Usage : ok := str_GetHexW(&ptr, &var);
002398  002602  // Notes : convert HEX number in a string to WORD ( myvar )
002399  002603  //       : returns true if function succeeds, advancing ptr
002400  002604        
002401  002605  func str_GetC("&ptr", "&var"), 1;
002402  002606  // Syntax: str_GetC(&ptr, &var);
002403  002607  // Usage : ok := str_GetC(&ptr, &var);
002404  002608  // Notes : get a valid ascii char in a string to WORD ( myvar )
002405  002609  //       : returns true if function succeeds, advancing ptr
002406  002610        
002407  002611  func str_GetByte("ptr"), 1;
002408  002612  // Syntax: str_GetByte(ptr);
002409  002613  // Usage : myvar := str_GetByte(ptr);
002410  002614  // Notes : get a byte to myvar
002411  002615  //       : returns value
002412  002616        
002413  002617  func str_GetWord("ptr"), 1;
002414  002618  // Syntax: GetWord(ptr);
002415  002619  // Usage : GetWord(ptr);
002416  002620  // Notes : get a word to myvar
002417  002621  //       : returns value
002418  002622        
002419  002623  func str_PutByte("ptr","val"), 0;
002420  002624  // Syntax: str_PutByte(ptr);
002421  002625  // Usage : myvar := str_PutByte(ptr);
002422  002626  // Notes : put a byte at ptr
002423  002627  //       : returns value
002424  002628        
002425  002629  func str_PutWord("ptr","val"), 0;
002426  002630  // Syntax: str_PutWord("ptr","val");
002427  002631  // Usage : str_PutWord(p,100);
002428  002632  // Notes : put word 100 at current pointer location
002429  002633  //       : returns value
002430  002634        
002431  002635  func str_Match("&ptr", "*str"), 1;
002432  002636  // Syntax: str_Match(&ptr, *str);
002433  002637  // Usage : r := str_Match(&p, "hello");
002434  002638  // Notes : Case sensitive match
002435  002639  //       : returns true if function succeded, andvancing pointer to position past
002436  002640  //       : the matched item. Note that any whitespace characters are skipped
002437  002641  //       : in the source string prior to the test.
002438  002642        
002439  002643  func str_MatchI("&ptr", "*str"), 1;
002440  002644  // Syntax: str_MatchI(&ptr, *str);
002441  002645  // Usage : r := str_MatchI(&p, "hello");
002442  002646  // Notes : Case insensitive match
002443  002647  //       : returns true if function succeded, andvancing pointer to position past
002444  002648  //       : the matched item. Note that any whitespace characters are skipped
002445  002649  //       : in the source string prior to the test.
002446  002650        
002447  002651  func str_Find("&ptr", "*str"), 1;
002448  002652  // Syntax: str_Find(&ptr, *str);
002449  002653  // Usage : n := str_Find(&p, "hello");
002450  002654  // Notes : given the address of a pointer to a source string as the
002451  002655  //       : first argument, and a pointer to a test string as the second
002452  002656  //       : argument, attempt to find the position of the matching string
002453  002657  //       : in the source string. The test is performed with case sensitivity.
002454  002658  //       : return 0 if not found, else returns the address of the first
002455  002659  //       : character of the match. NB:- The source pointer is not altered.
002456  002660        
002457  002661  func str_FindI("&ptr", "*str"), 1;
002458  002662  // Syntax: str_Find(&ptr, *str);
002459  002663  // Usage : n := str_Find(&p, "hello");
002460  002664  // Notes : given the address of a pointer to a source string as the
002461  002665  //       : first argument, and a pointer to a test string as the second
002462  002666  //       : argument, attempt to find the position of the matching string
002463  002667  //       : in the source string. The test is performed with no case
002464  002668  //       : sensitivity, eg upper and lower case chars are accepted.
002465  002669  //       : return 0 if not found, else returns the address of the first
002466  002670  //       : character of the match. NB:- The source pointer is not altered.
002467  002671        
002468  002672  func str_Length("ptr"), 1;
002469  002673  // Syntax: str_Length(ptr);
002470  002674  // Usage : len := str_Ptr(mystring);
002471  002675  // Notes : return the length of a byte aligned string excluding terminator
002472  002676        
002473  002677  func str_Printf("&ptr", "*format"), 1;
002474  002678  // Syntax: str_Printf("&ptr", "*format");
002475  002679  // Usage : r := str_Printf(&p, "hello");
002476  002680  // Notes : refer to documentation
002477  002681  //       :
002478  002682        
002479  002683  func str_Cat("dest","src"), 1;
002480  002684  // Syntax: str_Append("&dest","&src");
002481  002685  // Usage : str_Append(&buf,"Hello");
002482  002686  // Notes : Appends a copy of the source string to the destination string.
002483  002687  //       : The terminating null character in destination is overwritten by
002484  002688  //       : the first character of source, and a new null-character is appended
002485  002689  //       : at the end of the new string formed by the concatenation of both in destination.
002486  002690  //       : returns destination.
002487  002691        
002488  002692  func str_CatN("dest","src","count"), 1;
002489  002693  // Syntax: str_Append("&dest","&src","count");
002490  002694  // Usage : str_Append(&buf,"Monday",3);
002491  002695  // Notes : Appends a copy of the source string to the destination string.
002492  002696  //       : The number of characters copied is limited by "count".
002493  002697  //       : The terminating null character in destination is overwritten by
002494  002698  //       : the first character of source, and a new null-character is appended
002495  002699  //       : at the end of the new string formed by the concatenation of both in destination.
002496  002700  //       : returns destination.
002497  002701        
002498  002702        
002499  002703  func sys_StoreTouchCalibration(), 1;
002500  002704  // Syntax: sys_StoreTouchCalibration();
002501  002705  // Usage : r := sys_StoreTouchCalibration();
002502  002706  // Notes : Store the touch calibration values in non-volatile memory.
002503  002707  //       : Returns true if the values have been accepted and stored,
002504  002708  //       : else returns false if write could not be performed, or
002505  002709  //       : touch calibration values are improbable.
002506  002710  //       : The values that are stored are obtained from:-
002507  002711  //     : TOUCH_XMINCAL             78  // touch calibration value
002508  002712  //     : TOUCH_YMINCAL             79  // touch calibration value
002509  002713  //       : TOUCH_XMAXCAL             80  // touch calibration value
002510  002714  //       : TOUCH_YMAXCAL             81  // touch calibration value
002511  002715  //       : refer to the 4DGL example touchCalibrate.4DG for further information.
002512  002716  //       : This function is not supported on uVGA, Capicitive touch
002513  002717  //       : and 4.3" resistive touch modules.
002514  002718        
002515  002719        
002516  002720  func unicode_page("charbeg","charend","charoffset"), 1;
002517  002721  // Syntax: unicode_page("charbeg","charend","charoffset");
002518  002722  // Usage : eg:  F_Traditional_0x20_0xFF
002519  002723  // Notes : After selecting a unicode image control with txt_FontID,
002520  002724  //       : this function is called to set the required font within the
002521  002725  //       : unicode set. The file "Unicode.inc" contains wrappers for
002522  002726  //       : this function, and it is not normally called directly.
002523  002727  //       : Returns count of characters in the set.
002524  002728  //       : Refer to "Unicode.inc" for further information.
002525  002729        
002526  002730        
002527  002731  func EVE_SP(), 1;
002528  002732  // Syntax: EVE_SP();
002529  002733  // Usage : eg:  print(EVE_SP());
002530  002734  // Notes : Used for debugging to assess the current stack level,
002531  002735  //       : mainly for checking stack leaks
002532  002736        
002533  002737  func EVE_SSIZE(), 1;
002534  002738  // Syntax: EVE_SSIZE();
002535  002739  // Usage : eg:  print(EVE_SSIZE());
002536  002740  // Notes : Used to get the stack size,
002537  002741  //       : mainly for debugging purposes
002538  002742        
002539  002743        
002540  002744  // uVGAII extended functions
002541  002745  func disp_Sync("line"), 0;                      //  (uVGA only)  wait till scanline reaches "line"
002542  002746  // Syntax: disp_Sync(line);
002543  002747  // Usage : disp_Sync(480);
002544  002748  // Notes : Waits till the hardware gets to a certain line.
002545  002749  //       : Allows the program to synchronise writing to the hardware for flicker free operation.
002546  002750  //       : Some experimentation may be needed to find an optimum line for disp_Sync
002547  002751  //       : depending on the graphics operation. The higher the value, the slower
002548  002752  //       : the throughput. A cetain point will be reached (number of scanlines + blanking lines
002549  002753  //       : within the vertical retrace period) where it will just 'hang up' stopping the
002550  002754  //       : entire process. Eg, in 640x480 mode, if the 'lines' value is 507, operation will
002551  002755  //       : be slowest (as its actually right at the end of the blanking period) and 508
002552  002756  //       : will cause a hangup situation as it is above the highes scanline value.
002553  002757  //       : Currently, this function is only supported on displays with SSD1963 driver.
002554  002758        
002555  002759        
002556  002760  // New functions added to PmmC v2.8
002557  002761  //================================================================
002558  002762  func CY(), 1;
002559  002763  // Syntax: CY();
002560  002764  // Usage : myvar := 0xFFF8 + 9;                 // result = 1
002561  002765  //       : print(myvar," "CY(),"\n");           // carry = 1
002562  002766  // Notes : This function returns the carry status of an
002563  002767  // unsigned overflow from any 16 or 32bit additions or sutractions.
002564  002768  //================================================================
002565  002769        
002566  002770        
002567  002771  //================================================================
002568  002772  func str_ByteMove("src", "dest", "count"), 1;
002569  002773  // func str_ByteMove("src", "dest", "count"), 1;
002570  002774  // Syntax   : str_ByteMove(src, dest, bytecount);
002571  002775  // Input    : STR *source points to byte aligned source.
002572  002776  //          : STR *dest   points to byte aligned destination.
002573  002777  //          : VAR count   number of bytes to transfer.
002574  002778  // Usage    : nextpos := str_ByteMove(s, d, 100);
002575  002779  // Notes    : copy bytes from "src" to "dest", stopping only
002576  002780  //          : when "count" is exhausted.
002577  002781  //          : No terminator is appended, it is purely a
002578  002782  //          : byte copy, and any zeroes encountered will
002579  002783  //          : also be copied.
002580  002784  // Returns  : returns a pointer to the end of the destination
002581  002785  //          : (which is "dest" + "count")
002582  002786  //================================================================
002583  002787        
002584  002788        
002585  002789  //================================================================
002586  002790  func str_Copy("dest", "src"), 1;
002587  002791  // Syntax   : str_Copy(dest, src);
002588  002792  // Input    : STR *dest   points to byte aligned destination.
002589  002793  //          : STR *source points to byte aligned source.
002590  002794  // Usage    : nextplace := str_Copy(d, s);
002591  002795  // Notes    : copy a string from "src" to "dest", stopping only
002592  002796  //          : when the end of source string "src" is encountered
002593  002797  //          : (0x00 terminator).
002594  002798  //          : The terminator is always appended, even if "src" is
002595  002799  //          : an empty string.
002596  002800  // Returns  : returns a pointer to the 0x00 string terminator at
002597  002801  //          : end of "dest" (which is "dest" + str_Length(src); )
002598  002802  //================================================================
002599  002803        
002600  002804  //================================================================
002601  002805  func str_CopyN("dest", "src", "count"), 1;
002602  002806  // Syntax   : str_CopyN(dest, src, bytecount);
002603  002807  // Input    : STR *dest   points to byte aligned destination.
002604  002808  //          : STR *source points to byte aligned source.
002605  002809  //          : VAR count   max number of chars to copy.
002606  002810  // Usage    : nextplace := str_CopyN(d, s, 100);
002607  002811  // Notes    : copy a string from "src" to "dest", stopping only
002608  002812  //          : when "count" is exhausted, or end of source
002609  002813  //          : string "str" is encountered (0x00 string terminator).
002610  002814  //          : The terminator is always appended, even if
002611  002815  //          : "count" is zero, or "src" is a null string.
002612  002816  // Returns  : returns a pointer to the 0x00 string terminator
002613  002817  //          : (which is "dest" + whatever was copied)
002614  002818  //================================================================
002615  002819        
002616  002820  //================================================================
002617  002821  func umul_1616("&res32", "val1", "val2"), 1;
002618  002822  // Syntax   : umul_1616(&res32, varA, varB);
002619  002823  // Input    : DWORD *result   points to 32bit result register.
002620  002824  //          : VAR   val1  16bit register or constant
002621  002825  //          : VAR   val2  16bit register or constant
002622  002826  // Usage    : var res32[2];
002623  002827  //          : umul_1616(&res32, myvar, 50000);
002624  002828  // Notes    : performs an unsigned multiply of 2 x 16bit values
002625  002829  //          : placing the 32bit result in a 2 word array.
002626  002830  // Returns  : the pointer to the 32bit result.
002627  002831  //          : carry and overflow are not affected.
002628  002832  //================================================================
002629  002833        
002630  002834  //================================================================
002631  002835  func uadd_3232("&res32", "&val1", "&val2"), 1;
002632  002836  // Syntax   : cmp_3232(&res32, &varA, &varB);
002633  002837  // Input    : DWORD *res32 points to optional result (or zero for compare)
002634  002838  //          : DWORD *val1 points to 32bit augend
002635  002839  //          : DWORD *val2 points to 32bit addend
002636  002840  // Usage    : var res32[2];
002637  002841  //          : res := cmp_3232(res32, val1, val2);
002638  002842  // Notes    : performs an unsigned addition of 2 x 32bit values
002639  002843  //          : placing the 32bit result in a 2 word array.
002640  002844  // Returns  : returns 1 on 32bit unsigned overflow (carry).
002641  002845  //          ; carry flag is also set on 32bit unsigned overflow
002642  002846  //          ; and can be read with the CY() function.
002643  002847  //================================================================
002644  002848        
002645  002849  //================================================================
002646  002850  func usub_3232("&res32", "&val1", "&val2"), 1;
002647  002851  // Syntax   : cmp_3232(&res32, &varA, &varB);
002648  002852  // Input    : DWORD *res32 points to optional result (or zero for compare)
002649  002853  //          : DWORD *val1 points to first 32bit minuend
002650  002854  //          : DWORD *val2 points to 32bit subtrahend
002651  002855  // Usage    : var res32[2];
002652  002856  //          : res := cmp_3232(res32, val1, val2);
002653  002857  // Notes    : performs an unsigned subtraction of 2 x 32bit values
002654  002858  //          : placing the 32bit result in a 2 word array.
002655  002859  // Returns  : returns 1 on 32bit unsigned overflow (borrow).
002656  002860  //          ; carry flag is also set on 32bit unsigned underflow
002657  002861  //          ; and can be read with the CY() function.
002658  002862  //================================================================
002659  002863        
002660  002864  //================================================================
002661  002865  func ucmp_3232("&val1", "&val2"), 1;
002662  002866  // Syntax   : cmp_3232(&varA, &varB);
002663  002867  // Input    : DWORD *val1 points to 32bit minuend
002664  002868  //          : DWORD *val2 points to 32bit sutrahend
002665  002869  // Usage    : res := cmp_3232(val1, val2);
002666  002870  // Notes    : performs an unsigned comparison of 2 x 32bit values.
002667  002871  //          : The result of the subtraction is returned.
002668  002872  // Returns  : 0  if equal
002669  002873  //          : 1  if val1 > val2
002670  002874  //          : -1 if val1 < val2
002671  002875  //          : This function does not affect the carry flag.
002672  002876  //================================================================
002673  002877        
002674  002878  func disp_Disconnect(), 0;                     // Disconnect display to ensure reduced power after disabling peripheral power. New in v3.8
002675  002879  // Syntax: disp_Disconnect();                  New in v3.8
002676  002880  // Usage : disp_Disconnect();
002677  002881  // Notes : Disconnects the display driver pins and/or reconfigures it to achieve
002678  002882  //       : its lowest possible power consumption. Use after disabling peripheral power
002679  002883  //       : to ensure the minimal power usage by the display.
002680  002884  //       : disp_Init() should be used to reinitialise the display.
002681  002885        
002682  002886  func reserved(), 0;                            
002683  002887        
002684  002888  func sys_DeepSleep("units"), 1;
002685  002889  // Syntax: t := sys_DeepSleep("units");       New in v3.8
002686  002890  // Usage : t := sys_DeepSleep(10);
002687  002891  // Notes : sets the display and processor into lowest power mode for a period of time.
002688  002892  //       : When returning from DeepSleep the display should be reinitialised
002689  002893  //       : with disp_Init().
002690  002894  //       : Touching the touch screen will also wake from sleep.
002691  002895  //       : Returns remaining sleep units.
002692  002896        
002693  002897  //------------------------------------------------------------------//
002694  002898  // CONSTANTS
002695  002899  //------------------------------------------------------------------//
002696  002900        
002697  002901  // generic constants
002698  002902  #CONST
002699  002911  #END
002700  002912        
002701  002913  //------------------------------------------------------------------------------
002702  002914  // Pin related constants
002703  002915  //------------------------------------------------------------------------------
002704  002916  #CONST
002705  002934  #END
002706  002935        
002707  002936  //------------------------------------------------------------------------------
002708  002937  //gfx_Set() related constants
002709  002938  //------------------------------------------------------------------------------
002710  002939  #CONST
002711  002956  #END
002712  002957        
002713  002958        
002714  002959  //gfx_Get() related constants
002715  002960  #CONST
002716  002969  #END
002717  002970        
002718  002971        
002719  002972        
002720  002973        
002721  002974  #CONST
002722  002987  #END
002723  002988        
002724  002989        
002725  002990  #CONST
002726  003013  #END
002727  003014        
002728  003015  //------------------------------------------------------------------------------
002729  003016  //txt_Set() related constants
002730  003017  //------------------------------------------------------------------------------
002731  003018  #CONST
002732  003037  #END
002733  003038        
002734  003039        
002735  003040        
002736  003041  //------------------------------------------------------------------------------
002737  003042  //txt_Set() related arguments
002738  003043  // NB:- FONT4 must be inherited if required,
002739  003044  // eg #inherit "FONT4.fnt"
002740  003045  //------------------------------------------------------------------------------
002741  003046  #CONST
002742  003058  #END
002743  003059        
002744  003060        
002745  003061        
002746  003062  //touch_Set() related constants
002747  003063  #CONST
002748  003067  #END
002749  003068        
002750  003069  //touch_Get() related constants
002751  003070  #CONST
002752  003078  #END
002753  003079        
002754  003080  // image control offset related constants
002755  003081  #CONST
002756  003088  #END
002757  003089        
002758  003090  // image attribute flags
002759  003091  // for img_SetAttributes(...) and img_ClearAttributes(...)
002760  003092  #CONST
002761  003106  #END
002762  003107        
002763  003108        
002764  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002765  003109  #constant ALL 0xFFFF // argument for img_xxx functions to update all images
002766  003110        
002767  003111  // image control entry offsets
002768  003112  #CONST
002769  003127  #END
002770  003128        
002771  003129  #CONST
002772  003147  #END
002773  003148        
002774  003149        
002775  003150        
002776  003151        
002777  003152  #CONST
002778  003172  #END
002779  003173        
002780  003174        
002781  003175        
002782  003176  // timer control  related constants
002783  003177  #CONST
002784  003186  #END
002785  003187        
002786  003188  // I2C timing related constants
002787  003189  #CONST
002788  003193  #END
002789  003194        
002790  003195        
002791  003196  // spi_Init(...)  mode arguments
002792  003197  #CONST
002793  003207  #END
002794  003208        
002795  003209  //------------------------------------------------------------------------------
002796  003210  // system WORD variables accesible with peekW and pokeW or pointer access
002797  003211  // Note that the txt_Set variables (0-15) and gfx_set variables (16-31)
002798  003212  // can also be accessed with peekW and pokeW
002799  003213  //------------------------------------------------------------------------------
002800  003214        
002801  003215  #CONST
002802  003309  #END
002803  003310        
002804  003311  //------------------------------------------------------------------------------
002805  003312  // FILEIO Error Code Constants
002806  003313  //------------------------------------------------------------------------------
002807  003314  #CONST
002808  003340  #END
002809  003341        
002810  003342  //==================================================================================================
002811  003343        
002812  003344        
002813  003345        
002814  000013      #ENDIF
002815  000014        
002816  000015        
002817  000016         #CONST
002818  000102      #END
002819  000103        
002820  000104  #constant TOUCH_DRIVE 78      // external pointing device control for gfx_Set(TOUCH_DRIVE, command);
002821  000104  #constant TOUCH_DRIVE 78      // external pointing device control for gfx_Set(TOUCH_DRIVE, command);
002822  000105        
002823  000106        
002824  000107        
002825  000108        
002826  000109        
002827  000110  //===========================================================================================
002828  000111        
002829  000112        
002830  000002        
002831  000003  // generated 3/2/2014 9:32:55 PM
002832  000004        
002833  000005  #MODE RUNFLASH
002834  000006        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\4DGL_16bitColours.fnc

002835  000007  #inherit "4DGL_16bitColours.fnc"
002836  000007  #inherit "4DGL_16bitColours.fnc"
002837  000004  */
002838  000005        
002839  000006        
002840  000007        
002841  000008  #CONST
002842  000149  #END
002843  000150        
002844  000008        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\VisualConst.inc

002845  000009  #inherit "VisualConst.inc"
002846  000009  #inherit "VisualConst.inc"
002847  000001  // Line Patterns
002848  000002  #constant  LPCOARSE    0xF0F0
002849  000002  #constant  LPCOARSE    0xF0F0
002850  000003  #constant  LPMEDIUM    0x3333
002851  000003  #constant  LPMEDIUM    0x3333
002852  000004  #constant  LPFINE      0xAAAA
002853  000004  #constant  LPFINE      0xAAAA
002854  000005  #constant  LPDASHDOT   0x03CF
002855  000005  #constant  LPDASHDOT   0x03CF
002856  000006  #constant  LPDASHDOTDOT 0x0333
002857  000006  #constant  LPDASHDOTDOT 0x0333
002858  000007  #constant  LPSOLID     0x0000
002859  000007  #constant  LPSOLID     0x0000
002860  000010        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\XYposToDegree.inc

002861  000011  #inherit "XYposToDegree.inc"
002862  000011  #inherit "XYposToDegree.inc"
002863  000001  //
002864  000002  // Routine to convert X/Y (Relative to 0,0) position into Degrees
002865  000003  // 0 Degrees is straight down to suit rotary objects
002866  000004  //
002867  000005        
002868  000017  #END
2869  006B
2870  006C
2871  006D
2872  006E
2873  006F
2874  0070
2875  0071
2876  0072
2877  0073
2878  0074
2879  0075
2880  0076
2881  0077
2882  0078
2883  0079
2884  007A
2885  007B
2886  007C
2887  007D
2888  007E
2889  007F
2890  0080
2891  0081
2892  0082
2893  0083
2894  0084
2895  0085
2896  0086
2897  0087
2898  0088
2899  0089
2900  008A
2901  008B
2902  008C
2903  008D
2904  008E
2905  008F
2906  0090
2907  0091
2908  0092
2909  0093
2910  0094
2911  0095
2912  0096
2913  0097
2914  0098
2915  0099
2916  009A
2917  009B
2918  009C
2919  009D
2920  009E
2921  009F
2922  00A0
2923  00A1
2924  00A2
2925  00A3
2926  00A4
2927  00A5
2928  00A6
2929  00A7
2930  00A8
2931  00A9
2932  00AA
2933  00AB
2934  00AC
2935  00AD
2936  00AE
2937  00AF
2938  00B0
2939  00B1
2940  00B2
2941  00B3
2942  00B4
2943  00B5
2944  00B6
2945  00B7
2946  00B8
2947  00B9
2948  00BA
2949  00BB
2950  00BC
2951  00BD
2952  00BE
2953  00BF
2954  00C0
2955  00C1
2956  00C2
2957  00C3
2958  00C4
2959  00C5
2960  00C6
2961  00C7
2962  00C8
2963  00C9
2964  00CA
2965  00CB
2966  00CC
2967  00CD
2968  00CE
2969  00CF
002970  000018        
002971  000019  func XYposToDegree(var curX, var curY)
002972  000020      var delta, deg, adj ;
002973  000021      if (curY < 0)
002974  000022          if (curX < 0)
002975  000023              adj := 1 ;
002976  000024              deg := 90 ;
002977  000025          else
002978  000026              adj := 2 ;
002979  000027              deg := 180 ;
002980  000028          endif
002981  000029      else
002982  000030          if (curX < 0)
002983  000031              deg := 0 ;
002984  000032              adj := 2 ;
002985  000033          else
002986  000034              deg := 270 ;
002987  000035              adj := 1 ;
002988  000036          endif
002989  000037      endif
002990  000038        
002991  000039      curX := ABS(curX) ;
002992  000040      curY := ABS(curY) ;
002993  000041      if (curX < curY)
002994  000042          adj &= 1 ;
002995  000043      else
002996  000044          adj &= 2 ;
002997  000045          SWAP(&curX, &curY) ;
002998  000046      endif
002999  000047      delta := arctan[(curX * 100) / curY] ;
003000  000048      if (adj)
003001  000049          deg += 90 - delta ;
003002  000050      else
003003  000051          deg += delta ;
003004  000052      endif
003005  000053        
003006  000054      return deg ;
003007  000055  endfunc
003008  000056        
003009  000012        
file C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRLConst.inc

003010  000013  #inherit "MCTRLConst.inc"
003011  000013  #inherit "MCTRLConst.inc"
003012  000001  // File generated 3/2/2014 9:32:06 PM
003013  000002  // Warning! This is a generated file, any manual changes will be
003014  000003  // lost during the next generation.
003015  000004        
003016  000005  #constant  Strings1Count    2
003017  000005  #constant  Strings1Count    2
003018  000006  #constant  Strings1Size     20
003019  000006  #constant  Strings1Size     20
003020  000007  #constant  Strings2Count    1
003021  000007  #constant  Strings2Count    1
003022  000008  #constant  Strings2Size     35
003023  000008  #constant  Strings2Size     35
003024  000009  #constant  Strings0Count    1
003025  000009  #constant  Strings0Count    1
003026  000010  #constant  Strings0Size     11
003027  000010  #constant  Strings0Size     11
003028  000011  #constant  Strings3Count    1
003029  000011  #constant  Strings3Count    1
003030  000012  #constant  Strings3Size     22
003031  000012  #constant  Strings3Size     22
003032  000013  #constant  Strings4Count    1
003033  000013  #constant  Strings4Count    1
003034  000014  #constant  Strings4Size     24
003035  000014  #constant  Strings4Size     24
003036  000015  #constant  Strings5Count    1
003037  000015  #constant  Strings5Count    1
003038  000016  #constant  Strings5Size     20
003039  000016  #constant  Strings5Size     20
003040  000017  // object indexes into ImageControl
003041  000018  #CONST
003042  000123  #END
003043  000124        
003044  000125  #constant  Strings1StartH   0x0
003045  000125  #constant  Strings1StartH   0x0
003046  000126  #constant  Strings1StartL   0x0
003047  000126  #constant  Strings1StartL   0x0
003048  000127  #constant  Strings2StartH   0x0
003049  000127  #constant  Strings2StartH   0x0
003050  000128  #constant  Strings2StartL   0x200
003051  000128  #constant  Strings2StartL   0x200
003052  000129  #constant  Strings0StartH   0x0
003053  000129  #constant  Strings0StartH   0x0
003054  000130  #constant  Strings0StartL   0x400
003055  000130  #constant  Strings0StartL   0x400
003056  000131  #constant  Strings3StartH   0x0
003057  000131  #constant  Strings3StartH   0x0
003058  000132  #constant  Strings3StartL   0x600
003059  000132  #constant  Strings3StartL   0x600
003060  000133  #constant  Strings4StartH   0x0
003061  000133  #constant  Strings4StartH   0x0
003062  000134  #constant  Strings4StartL   0x800
003063  000134  #constant  Strings4StartL   0x800
003064  000135  #constant  Strings5StartH   0x0
003065  000135  #constant  Strings5StartH   0x0
003066  000136  #constant  Strings5StartL   0xA00
003067  000136  #constant  Strings5StartL   0xA00
003068  000137  var disk, hndl ;
003069  000014        
file C:\Program Files (x86)\4D Labs\4D Workshop 4 IDE\include\CLPrintStrings.inc

003070  000015  #inherit "CLPrintStrings.inc"
003071  000015  #inherit "CLPrintStrings.inc"
003072  000001  func PrintStrings(var ID, var *msgid, var String)
003073  000002      var StringID, i, ch, offs32[2], res32[2];
003074  000003      StringID := oStringss[1+ID] ;
003075  000004      if (String)
003076  000005          stringsCV[ID] := -1 ;
003077  000006      else
003078  000007          stringsCV[ID] := msgid ;
003079  000008      endif
003080  000009      if ((StringID == -1) || (*(StringID + STForm) != curform)) return ;
003081  000010      txt_FontID(hFonts[ID]) ;
003082  000011      txt_Attributes(*(StringID + STFontAttribs)) ; // >> 4 fix for r25,6,7,8 PmmC
003083  000012  //    txt_Opacity(*(StringID + STTransparent)) ;
003084  000013        
003085  000014      if (*(StringID + STTransparent))
003086  000015          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), *(StringID + STBGColor));
003087  000016      else if (formBGcol[curform] != BGIMAGE)
003088  000017          gfx_RectangleFilled(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2), formBGcol[curform]);
003089  000018      else
003090  000019          gfx_ClipWindow(*(StringID + STx1), *(StringID + STy1), *(StringID + STx2), *(StringID + STy2)) ;
003091  000020          gfx_Clipping(ON) ;
003092  000021          img_Show(hndl,formstidx[curform]) ;
003093  000022          gfx_Clipping(OFF) ;
003094  000023        
003095  000024      endif
003096  000025        
003097  000026      txt_FGcolour(*(StringID + STFGColor)) ;
003098  000027      txt_BGcolour(*(StringID + STBGColor)) ;
003099  000028      txt_Opacity(TRANSPARENT);                // 8  text OPAQUE or TRANSPARENT
003100  000029        
003101  000030      gfx_MoveTo(*(StringID + STx1) , *(StringID + STy1)) ;
003102  000031        
003103  000032      if (String)
003104  000033          i := 0 ;
003105  000034          ch := msgid[i++] ;
003106  000035          while (ch != 0)
003107  000036              putch(ch) ;
003108  000037              ch := msgid[i++] ;
003109  000038          wend
003110  000039      else
003111  000040          umul_1616(offs32, *(StringID + STSize), msgid);
003112  000041          res32[1] := *(StringID + STStartH) ;
003113  000042          res32[0] := *(StringID + STStartL) ;
003114  000043          uadd_3232(res32,res32,offs32) ;
003115  000044          file_Seek(hstrings, res32[1], res32[0]);
003116  000045          repeat
003117  000046              if (*(StringID + STAnsi))
003118  000047                  ch := file_GetC(hstrings) ;
003119  000048              else
003120  000049                  ch := file_GetW(hstrings) ;
003121  000050              endif
003122  000051              putch(ch) ;
003123  000052          until (ch == 0) ;
003124  000053      endif
003125  000054        
003126  000055  endfunc
003127  000056        
003128  000016        
003129  000017  #constant IPDatasize 22
003130  000017  #constant IPDatasize 22
003131  000018        
003132  000019  #CONST
003133  000021  #END
003134  000022        
003135  000023  #CONST
003136  000123  #END
003137  000124        
003138  000271  #END
3139  0B00
3140  0B01
3141  0B02
3142  0B03
3143  0B04
3144  0B05
3145  0B06
3146  0B07
3147  0B08
3148  0B09
3149  0B0A
3150  0B0B
3151  0B0C
3152  0B0D
3153  0B0E
3154  0B0F
3155  0B10
3156  0B11
3157  0B12
3158  0B13
3159  0B14
3160  0B15
3161  0B16
3162  0B17
3163  0B18
3164  0B19
3165  0B1A
3166  0B1B
3167  0B1C
3168  0B1D
3169  0B1E
3170  0B1F
3171  0B20
3172  0B21
3173  0B22
3174  0B23
3175  0B24
3176  0B25
3177  0B26
3178  0B27
3179  0B28
3180  0B29
3181  0B2A
3182  0B2B
3183  0B2C
3184  0B2D
3185  0B2E
3186  0B2F
3187  0B30
3188  0B31
3189  0B32
3190  0B33
3191  0B34
3192  0B35
3193  0B36
3194  0B37
3195  0B38
3196  0B39
3197  0B3A
3198  0B3B
3199  0B3C
3200  0B3D
3201  0B3E
3202  0B3F
3203  0B40
3204  0B41
3205  0B42
3206  0B43
3207  0B44
3208  0B45
3209  0B46
3210  0B47
3211  0B48
3212  0B49
3213  0B4A
3214  0B4B
3215  0B4C
3216  0B4D
3217  0B4E
3218  0B4F
3219  0B50
3220  0B51
3221  0B52
3222  0B53
3223  0B54
3224  0B55
3225  0B56
3226  0B57
3227  0B58
3228  0B59
3229  0B5A
3230  0B5B
3231  0B5C
3232  0B5D
3233  0B5E
3234  0B5F
3235  0B60
3236  0B61
3237  0B62
3238  0B63
3239  0B64
3240  0B65
3241  0B66
3242  0B67
3243  0B68
3244  0B69
3245  0B6A
3246  0B6B
3247  0B6C
3248  0B6D
3249  0B6E
3250  0B6F
3251  0B70
3252  0B71
3253  0B72
3254  0B73
3255  0B74
3256  0B75
3257  0B76
3258  0B77
3259  0B78
3260  0B79
3261  0B7A
3262  0B7B
3263  0B7C
3264  0B7D
3265  0B7E
3266  0B7F
3267  0B80
3268  0B81
3269  0B82
3270  0B83
3271  0B84
3272  0B85
3273  0B86
3274  0B87
3275  0B88
3276  0B89
3277  0B8A
3278  0B8B
3279  0B8C
3280  0B8D
3281  0B8E
3282  0B8F
3283  0B90
3284  0B91
3285  0B92
3286  0B93
3287  0B94
3288  0B95
3289  0B96
3290  0B97
3291  0B98
3292  0B99
3293  0B9A
3294  0B9B
3295  0B9C
3296  0B9D
3297  0B9E
3298  0B9F
3299  0BA0
3300  0BA1
3301  0BA2
3302  0BA3
3303  0BA4
3304  0BA5
3305  0BA6
3306  0BA7
3307  0BA8
3308  0BA9
3309  0BAA
3310  0BAB
3311  0BAC
3312  0BAD
3313  0BAE
3314  0BAF
3315  0BB0
3316  0BB1
3317  0BB2
3318  0BB3
3319  0BB4
3320  0BB5
3321  0BB6
3322  0BB7
3323  0BB8
3324  0BB9
3325  0BBA
3326  0BBB
3327  0BBC
3328  0BBD
3329  0BBE
3330  0BBF
3331  0BC0
3332  0BC1
3333  0BC2
3334  0BC3
3335  0BC4
3336  0BC5
3337  0BC6
3338  0BC7
3339  0BC8
3340  0BC9
3341  0BCA
3342  0BCB
3343  0BCC
3344  0BCD
3345  0BCE
3346  0BCF
3347  0BD0
3348  0BD1
3349  0BD2
3350  0BD3
3351  0BD4
3352  0BD5
3353  0BD6
3354  0BD7
3355  0BD8
3356  0BD9
3357  0BDA
3358  0BDB
3359  0BDC
3360  0BDD
3361  0BDE
3362  0BDF
3363  0BE0
3364  0BE1
3365  0BE2
3366  0BE3
3367  0BE4
3368  0BE5
3369  0BE6
3370  0BE7
3371  0BE8
3372  0BE9
3373  0BEA
3374  0BEB
3375  0BEC
3376  0BED
3377  0BEE
3378  0BEF
3379  0BF0
3380  0BF1
3381  0BF2
3382  0BF3
3383  0BF4
3384  0BF5
3385  0BF6
3386  0BF7
3387  0BF8
3388  0BF9
3389  0BFA
3390  0BFB
3391  0BFC
3392  0BFD
3393  0BFE
3394  0BFF
3395  0C00
3396  0C01
3397  0C02
3398  0C03
3399  0C04
3400  0C05
3401  0C06
3402  0C07
3403  0C08
3404  0C09
3405  0C0A
3406  0C0B
3407  0C0C
3408  0C0D
3409  0C0E
3410  0C0F
3411  0C10
3412  0C11
3413  0C12
3414  0C13
3415  0C14
3416  0C15
3417  0C16
3418  0C17
3419  0C18
3420  0C19
3421  0C1A
3422  0C1B
3423  0C1C
3424  0C1D
3425  0C1E
3426  0C1F
3427  0C20
3428  0C21
3429  0C22
3430  0C23
3431  0C24
3432  0C25
3433  0C26
3434  0C27
3435  0C28
3436  0C29
3437  0C2A
3438  0C2B
3439  0C2C
3440  0C2D
3441  0C2E
3442  0C2F
3443  0C30
3444  0C31
3445  0C32
3446  0C33
3447  0C34
3448  0C35
3449  0C36
3450  0C37
3451  0C38
3452  0C39
3453  0C3A
3454  0C3B
3455  0C3C
3456  0C3D
3457  0C3E
3458  0C3F
3459  0C40
3460  0C41
3461  0C42
3462  0C43
3463  0C44
3464  0C45
3465  0C46
3466  0C47
3467  0C48
3468  0C49
3469  0C4A
3470  0C4B
3471  0C4C
3472  0C4D
3473  0C4E
3474  0C4F
3475  0C50
3476  0C51
3477  0C52
3478  0C53
3479  0C54
3480  0C55
3481  0C56
3482  0C57
3483  0C58
3484  0C59
3485  0C5A
3486  0C5B
3487  0C5C
3488  0C5D
3489  0C5E
3490  0C5F
3491  0C60
3492  0C61
3493  0C62
3494  0C63
3495  0C64
3496  0C65
3497  0C66
3498  0C67
3499  0C68
3500  0C69
3501  0C6A
3502  0C6B
3503  0C6C
3504  0C6D
3505  0C6E
3506  0C6F
3507  0C70
3508  0C71
3509  0C72
3510  0C73
3511  0C74
3512  0C75
3513  0C76
3514  0C77
3515  0C78
3516  0C79
3517  0C7A
3518  0C7B
3519  0C7C
3520  0C7D
3521  0C7E
3522  0C7F
3523  0C80
3524  0C81
3525  0C82
3526  0C83
3527  0C84
3528  0C85
3529  0C86
3530  0C87
3531  0C88
3532  0C89
3533  0C8A
3534  0C8B
3535  0C8C
3536  0C8D
3537  0C8E
3538  0C8F
3539  0C90
3540  0C91
3541  0C92
3542  0C93
3543  0C94
3544  0C95
3545  0C96
3546  0C97
3547  0C98
3548  0C99
3549  0C9A
3550  0C9B
3551  0C9C
3552  0C9D
3553  0C9E
3554  0C9F
3555  0CA0
3556  0CA1
3557  0CA2
3558  0CA3
3559  0CA4
3560  0CA5
3561  0CA6
3562  0CA7
3563  0CA8
3564  0CA9
3565  0CAA
3566  0CAB
3567  0CAC
3568  0CAD
3569  0CAE
3570  0CAF
3571  0CB0
3572  0CB1
3573  0CB2
3574  0CB3
3575  0CB4
3576  0CB5
3577  0CB6
3578  0CB7
3579  0CB8
3580  0CB9
3581  0CBA
3582  0CBB
3583  0CBC
3584  0CBD
3585  0CBE
3586  0CBF
3587  0CC0
3588  0CC1
3589  0CC2
3590  0CC3
3591  0CC4
3592  0CC5
3593  0CC6
3594  0CC7
3595  0CC8
3596  0CC9
3597  0CCA
3598  0CCB
3599  0CCC
3600  0CCD
3601  0CCE
3602  0CCF
3603  0CD0
3604  0CD1
3605  0CD2
3606  0CD3
3607  0CD4
3608  0CD5
3609  0CD6
3610  0CD7
3611  0CD8
3612  0CD9
3613  0CDA
3614  0CDB
3615  0CDC
3616  0CDD
3617  0CDE
3618  0CDF
3619  0CE0
3620  0CE1
3621  0CE2
3622  0CE3
3623  0CE4
3624  0CE5
3625  0CE6
3626  0CE7
3627  0CE8
3628  0CE9
3629  0CEA
3630  0CEB
3631  0CEC
3632  0CED
3633  0CEE
3634  0CEF
3635  0CF0
3636  0CF1
3637  0CF2
3638  0CF3
3639  0CF4
3640  0CF5
3641  0CF6
3642  0CF7
3643  0CF8
3644  0CF9
3645  0CFA
3646  0CFB
3647  0CFC
3648  0CFD
3649  0CFE
3650  0CFF
3651  0D00
3652  0D01
3653  0D02
3654  0D03
3655  0D04
3656  0D05
3657  0D06
3658  0D07
3659  0D08
3660  0D09
3661  0D0A
3662  0D0B
3663  0D0C
3664  0D0D
3665  0D0E
3666  0D0F
3667  0D10
3668  0D11
3669  0D12
3670  0D13
3671  0D14
3672  0D15
3673  0D16
3674  0D17
3675  0D18
3676  0D19
3677  0D1A
3678  0D1B
3679  0D1C
3680  0D1D
3681  0D1E
3682  0D1F
3683  0D20
3684  0D21
3685  0D22
3686  0D23
3687  0D24
3688  0D25
3689  0D26
3690  0D27
3691  0D28
3692  0D29
3693  0D2A
3694  0D2B
3695  0D2C
3696  0D2D
3697  0D2E
3698  0D2F
3699  0D30
3700  0D31
3701  0D32
3702  0D33
3703  0D34
3704  0D35
3705  0D36
3706  0D37
3707  0D38
3708  0D39
3709  0D3A
3710  0D3B
3711  0D3C
3712  0D3D
3713  0D3E
3714  0D3F
3715  0D40
3716  0D41
3717  0D42
3718  0D43
3719  0D44
3720  0D45
3721  0D46
3722  0D47
3723  0D48
3724  0D49
3725  0D4A
3726  0D4B
3727  0D4C
3728  0D4D
3729  0D4E
3730  0D4F
3731  0D50
3732  0D51
3733  0D52
3734  0D53
3735  0D54
3736  0D55
3737  0D56
3738  0D57
3739  0D58
3740  0D59
3741  0D5A
3742  0D5B
3743  0D5C
3744  0D5D
3745  0D5E
3746  0D5F
3747  0D60
3748  0D61
3749  0D62
3750  0D63
3751  0D64
3752  0D65
3753  0D66
3754  0D67
3755  0D68
3756  0D69
3757  0D6A
3758  0D6B
3759  0D6C
3760  0D6D
3761  0D6E
3762  0D6F
3763  0D70
3764  0D71
3765  0D72
3766  0D73
3767  0D74
3768  0D75
3769  0D76
3770  0D77
3771  0D78
3772  0D79
3773  0D7A
3774  0D7B
3775  0D7C
3776  0D7D
3777  0D7E
3778  0D7F
3779  0D80
3780  0D81
3781  0D82
3782  0D83
3783  0D84
3784  0D85
3785  0D86
3786  0D87
3787  0D88
3788  0D89
3789  0D8A
3790  0D8B
3791  0D8C
3792  0D8D
3793  0D8E
3794  0D8F
3795  0D90
3796  0D91
3797  0D92
3798  0D93
3799  0D94
3800  0D95
3801  0D96
3802  0D97
3803  0D98
3804  0D99
3805  0D9A
3806  0D9B
3807  0D9C
3808  0D9D
3809  0D9E
3810  0D9F
3811  0DA0
3812  0DA1
3813  0DA2
3814  0DA3
3815  0DA4
3816  0DA5
3817  0DA6
3818  0DA7
3819  0DA8
3820  0DA9
3821  0DAA
3822  0DAB
3823  0DAC
3824  0DAD
3825  0DAE
3826  0DAF
3827  0DB0
3828  0DB1
3829  0DB2
3830  0DB3
3831  0DB4
3832  0DB5
3833  0DB6
3834  0DB7
3835  0DB8
3836  0DB9
3837  0DBA
3838  0DBB
3839  0DBC
3840  0DBD
3841  0DBE
3842  0DBF
3843  0DC0
3844  0DC1
3845  0DC2
3846  0DC3
3847  0DC4
3848  0DC5
3849  0DC6
3850  0DC7
3851  0DC8
3852  0DC9
3853  0DCA
3854  0DCB
3855  0DCC
3856  0DCD
3857  0DCE
3858  0DCF
3859  0DD0
3860  0DD1
3861  0DD2
3862  0DD3
3863  0DD4
3864  0DD5
3865  0DD6
3866  0DD7
3867  0DD8
3868  0DD9
3869  0DDA
3870  0DDB
3871  0DDC
3872  0DDD
3873  0DDE
3874  0DDF
3875  0DE0
3876  0DE1
3877  0DE2
3878  0DE3
3879  0DE4
3880  0DE5
3881  0DE6
3882  0DE7
3883  0DE8
3884  0DE9
3885  0DEA
3886  0DEB
3887  0DEC
3888  0DED
3889  0DEE
3890  0DEF
3891  0DF0
3892  0DF1
3893  0DF2
3894  0DF3
3895  0DF4
3896  0DF5
3897  0DF6
3898  0DF7
3899  0DF8
3900  0DF9
3901  0DFA
3902  0DFB
3903  0DFC
3904  0DFD
3905  0DFE
3906  0DFF
3907  0E00
3908  0E01
3909  0E02
3910  0E03
3911  0E04
3912  0E05
3913  0E06
3914  0E07
3915  0E08
3916  0E09
3917  0E0A
3918  0E0B
3919  0E0C
3920  0E0D
3921  0E0E
3922  0E0F
3923  0E10
3924  0E11
3925  0E12
3926  0E13
3927  0E14
3928  0E15
3929  0E16
3930  0E17
3931  0E18
3932  0E19
3933  0E1A
3934  0E1B
3935  0E1C
3936  0E1D
3937  0E1E
3938  0E1F
3939  0E20
3940  0E21
3941  0E22
3942  0E23
3943  0E24
3944  0E25
3945  0E26
3946  0E27
3947  0E28
3948  0E29
3949  0E2A
3950  0E2B
3951  0E2C
3952  0E2D
3953  0E2E
3954  0E2F
3955  0E30
3956  0E31
3957  0E32
3958  0E33
3959  0E34
3960  0E35
3961  0E36
3962  0E37
3963  0E38
3964  0E39
3965  0E3A
3966  0E3B
3967  0E3C
3968  0E3D
3969  0E3E
3970  0E3F
3971  0E40
3972  0E41
3973  0E42
3974  0E43
3975  0E44
3976  0E45
3977  0E46
3978  0E47
3979  0E48
3980  0E49
3981  0E4A
3982  0E4B
3983  0E4C
3984  0E4D
3985  0E4E
3986  0E4F
3987  0E50
3988  0E51
3989  0E52
3990  0E53
3991  0E54
3992  0E55
3993  0E56
3994  0E57
3995  0E58
3996  0E59
3997  0E5A
3998  0E5B
3999  0E5C
4000  0E5D
4001  0E5E
4002  0E5F
4003  0E60
4004  0E61
4005  0E62
4006  0E63
4007  0E64
4008  0E65
4009  0E66
4010  0E67
4011  0E68
4012  0E69
4013  0E6A
4014  0E6B
4015  0E6C
4016  0E6D
4017  0E6E
4018  0E6F
4019  0E70
4020  0E71
4021  0E72
4022  0E73
4023  0E74
4024  0E75
4025  0E76
4026  0E77
4027  0E78
4028  0E79
4029  0E7A
4030  0E7B
4031  0E7C
4032  0E7D
4033  0E7E
4034  0E7F
4035  0E80
4036  0E81
4037  0E82
4038  0E83
4039  0E84
4040  0E85
4041  0E86
4042  0E87
4043  0E88
4044  0E89
4045  0E8A
4046  0E8B
4047  0E8C
4048  0E8D
4049  0E8E
4050  0E8F
4051  0E90
4052  0E91
4053  0E92
4054  0E93
4055  0E94
4056  0E95
4057  0E96
4058  0E97
4059  0E98
4060  0E99
4061  0E9A
4062  0E9B
4063  0E9C
4064  0E9D
4065  0E9E
4066  0E9F
4067  0EA0
4068  0EA1
4069  0EA2
4070  0EA3
4071  0EA4
4072  0EA5
4073  0EA6
4074  0EA7
4075  0EA8
4076  0EA9
4077  0EAA
4078  0EAB
4079  0EAC
4080  0EAD
4081  0EAE
4082  0EAF
4083  0EB0
4084  0EB1
4085  0EB2
4086  0EB3
4087  0EB4
4088  0EB5
4089  0EB6
4090  0EB7
4091  0EB8
4092  0EB9
4093  0EBA
4094  0EBB
4095  0EBC
4096  0EBD
4097  0EBE
4098  0EBF
4099  0EC0
4100  0EC1
4101  0EC2
4102  0EC3
4103  0EC4
4104  0EC5
4105  0EC6
4106  0EC7
4107  0EC8
4108  0EC9
4109  0ECA
4110  0ECB
4111  0ECC
4112  0ECD
4113  0ECE
4114  0ECF
4115  0ED0
4116  0ED1
4117  0ED2
4118  0ED3
4119  0ED4
4120  0ED5
4121  0ED6
4122  0ED7
4123  0ED8
4124  0ED9
4125  0EDA
4126  0EDB
4127  0EDC
4128  0EDD
4129  0EDE
4130  0EDF
4131  0EE0
4132  0EE1
4133  0EE2
4134  0EE3
4135  0EE4
4136  0EE5
4137  0EE6
4138  0EE7
4139  0EE8
4140  0EE9
4141  0EEA
4142  0EEB
4143  0EEC
4144  0EED
4145  0EEE
4146  0EEF
4147  0EF0
4148  0EF1
4149  0EF2
4150  0EF3
4151  0EF4
4152  0EF5
4153  0EF6
4154  0EF7
4155  0EF8
4156  0EF9
4157  0EFA
4158  0EFB
4159  0EFC
4160  0EFD
4161  0EFE
4162  0EFF
4163  0F00
4164  0F01
4165  0F02
4166  0F03
4167  0F04
4168  0F05
4169  0F06
4170  0F07
4171  0F08
4172  0F09
4173  0F0A
4174  0F0B
4175  0F0C
4176  0F0D
4177  0F0E
4178  0F0F
4179  0F10
4180  0F11
4181  0F12
4182  0F13
4183  0F14
4184  0F15
4185  0F16
4186  0F17
4187  0F18
4188  0F19
4189  0F1A
4190  0F1B
4191  0F1C
4192  0F1D
4193  0F1E
4194  0F1F
4195  0F20
4196  0F21
4197  0F22
4198  0F23
4199  0F24
4200  0F25
4201  0F26
4202  0F27
4203  0F28
4204  0F29
4205  0F2A
4206  0F2B
4207  0F2C
4208  0F2D
4209  0F2E
4210  0F2F
4211  0F30
4212  0F31
4213  0F32
4214  0F33
4215  0F34
4216  0F35
4217  0F36
4218  0F37
4219  0F38
4220  0F39
4221  0F3A
4222  0F3B
4223  0F3C
4224  0F3D
4225  0F3E
4226  0F3F
4227  0F40
4228  0F41
4229  0F42
4230  0F43
4231  0F44
4232  0F45
4233  0F46
4234  0F47
4235  0F48
4236  0F49
4237  0F4A
4238  0F4B
4239  0F4C
4240  0F4D
4241  0F4E
4242  0F4F
4243  0F50
4244  0F51
4245  0F52
4246  0F53
4247  0F54
4248  0F55
4249  0F56
4250  0F57
4251  0F58
4252  0F59
4253  0F5A
4254  0F5B
4255  0F5C
4256  0F5D
4257  0F5E
4258  0F5F
4259  0F60
4260  0F61
4261  0F62
4262  0F63
4263  0F64
4264  0F65
4265  0F66
4266  0F67
4267  0F68
4268  0F69
4269  0F6A
4270  0F6B
4271  0F6C
4272  0F6D
4273  0F6E
4274  0F6F
4275  0F70
4276  0F71
4277  0F72
4278  0F73
4279  0F74
4280  0F75
4281  0F76
4282  0F77
4283  0F78
4284  0F79
4285  0F7A
4286  0F7B
4287  0F7C
4288  0F7D
4289  0F7E
4290  0F7F
4291  0F80
4292  0F81
4293  0F82
4294  0F83
4295  0F84
4296  0F85
4297  0F86
4298  0F87
4299  0F88
4300  0F89
4301  0F8A
4302  0F8B
4303  0F8C
4304  0F8D
4305  0F8E
4306  0F8F
4307  0F90
4308  0F91
4309  0F92
4310  0F93
4311  0F94
4312  0F95
4313  0F96
4314  0F97
4315  0F98
4316  0F99
4317  0F9A
4318  0F9B
4319  0F9C
4320  0F9D
4321  0F9E
4322  0F9F
4323  0FA0
4324  0FA1
4325  0FA2
4326  0FA3
4327  0FA4
4328  0FA5
4329  0FA6
4330  0FA7
4331  0FA8
4332  0FA9
4333  0FAA
4334  0FAB
4335  0FAC
4336  0FAD
4337  0FAE
4338  0FAF
4339  0FB0
4340  0FB1
4341  0FB2
4342  0FB3
4343  0FB4
4344  0FB5
4345  0FB6
4346  0FB7
4347  0FB8
4348  0FB9
4349  0FBA
4350  0FBB
4351  0FBC
4352  0FBD
4353  0FBE
4354  0FBF
4355  0FC0
4356  0FC1
4357  0FC2
4358  0FC3
4359  0FC4
4360  0FC5
4361  0FC6
4362  0FC7
4363  0FC8
4364  0FC9
4365  0FCA
4366  0FCB
4367  0FCC
4368  0FCD
4369  0FCE
4370  0FCF
4371  0FD0
4372  0FD1
4373  0FD2
4374  0FD3
4375  0FD4
4376  0FD5
4377  0FD6
4378  0FD7
4379  0FD8
4380  0FD9
4381  0FDA
4382  0FDB
4383  0FDC
4384  0FDD
4385  0FDE
4386  0FDF
4387  0FE0
4388  0FE1
4389  0FE2
4390  0FE3
4391  0FE4
4392  0FE5
4393  0FE6
4394  0FE7
4395  0FE8
4396  0FE9
4397  0FEA
4398  0FEB
4399  0FEC
4400  0FED
4401  0FEE
4402  0FEF
4403  0FF0
4404  0FF1
4405  0FF2
4406  0FF3
4407  0FF4
4408  0FF5
4409  0FF6
4410  0FF7
4411  0FF8
4412  0FF9
4413  0FFA
4414  0FFB
4415  0FFC
4416  0FFD
4417  0FFE
4418  0FFF
4419  1000
4420  1001
4421  1002
4422  1003
4423  1004
4424  1005
4425  1006
4426  1007
4427  1008
4428  1009
4429  100A
4430  100B
4431  100C
4432  100D
4433  100E
4434  100F
4435  1010
4436  1011
4437  1012
4438  1013
4439  1014
4440  1015
4441  1016
4442  1017
4443  1018
4444  1019
4445  101A
4446  101B
4447  101C
4448  101D
4449  101E
4450  101F
4451  1020
4452  1021
4453  1022
4454  1023
4455  1024
4456  1025
4457  1026
4458  1027
4459  1028
4460  1029
4461  102A
4462  102B
4463  102C
4464  102D
4465  102E
4466  102F
4467  1030
4468  1031
4469  1032
4470  1033
4471  1034
4472  1035
4473  1036
4474  1037
4475  1038
4476  1039
4477  103A
4478  103B
4479  103C
4480  103D
4481  103E
4482  103F
4483  1040
4484  1041
4485  1042
4486  1043
4487  1044
4488  1045
4489  1046
4490  1047
4491  1048
4492  1049
4493  104A
4494  104B
4495  104C
4496  104D
4497  104E
4498  104F
4499  1050
4500  1051
4501  1052
4502  1053
4503  1054
4504  1055
4505  1056
4506  1057
4507  1058
4508  1059
4509  105A
4510  105B
4511  105C
4512  105D
4513  105E
4514  105F
4515  1060
4516  1061
4517  1062
4518  1063
4519  1064
4520  1065
4521  1066
4522  1067
4523  1068
4524  1069
4525  106A
4526  106B
4527  106C
4528  106D
4529  106E
4530  106F
4531  1070
4532  1071
4533  1072
4534  1073
4535  1074
4536  1075
4537  1076
4538  1077
4539  1078
4540  1079
4541  107A
4542  107B
4543  107C
4544  107D
4545  107E
4546  107F
4547  1080
4548  1081
4549  1082
4550  1083
4551  1084
4552  1085
4553  1086
4554  1087
4555  1088
4556  1089
4557  108A
4558  108B
4559  108C
4560  108D
4561  108E
4562  108F
4563  1090
4564  1091
4565  1092
4566  1093
4567  1094
4568  1095
4569  1096
4570  1097
4571  1098
4572  1099
4573  109A
4574  109B
4575  109C
4576  109D
4577  109E
4578  109F
4579  10A0
4580  10A1
4581  10A2
4582  10A3
4583  10A4
4584  10A5
4585  10A6
4586  10A7
4587  10A8
4588  10A9
4589  10AA
4590  10AB
4591  10AC
4592  10AD
4593  10AE
4594  10AF
4595  10B0
4596  10B1
4597  10B2
4598  10B3
4599  10B4
4600  10B5
4601  10B6
4602  10B7
4603  10B8
4604  10B9
4605  10BA
4606  10BB
4607  10BC
4608  10BD
4609  10BE
4610  10BF
4611  10C0
4612  10C1
4613  10C2
4614  10C3
4615  10C4
4616  10C5
4617  10C6
4618  10C7
4619  10C8
4620  10C9
4621  10CA
4622  10CB
4623  10CC
4624  10CD
4625  10CE
4626  10CF
4627  10D0
4628  10D1
4629  10D2
4630  10D3
4631  10D4
4632  10D5
4633  10D6
4634  10D7
4635  10D8
4636  10D9
4637  10DA
4638  10DB
4639  10DC
4640  10DD
4641  10DE
4642  10DF
4643  10E0
4644  10E1
4645  10E2
4646  10E3
4647  10E4
4648  10E5
4649  10E6
4650  10E7
4651  10E8
4652  10E9
4653  10EA
4654  10EB
4655  10EC
4656  10ED
4657  10EE
4658  10EF
4659  10F0
4660  10F1
4661  10F2
4662  10F3
4663  10F4
4664  10F5
4665  10F6
4666  10F7
4667  10F8
4668  10F9
4669  10FA
4670  10FB
4671  10FC
4672  10FD
4673  10FE
4674  10FF
4675  1100
4676  1101
4677  1102
4678  1103
4679  1104
4680  1105
4681  1106
4682  1107
4683  1108
4684  1109
4685  110A
4686  110B
4687  110C
4688  110D
4689  110E
4690  110F
4691  1110
4692  1111
4693  1112
4694  1113
4695  1114
4696  1115
4697  1116
4698  1117
4699  1118
4700  1119
4701  111A
4702  111B
4703  111C
4704  111D
4705  111E
4706  111F
4707  1120
4708  1121
4709  1122
4710  1123
4711  1124
4712  1125
4713  1126
4714  1127
4715  1128
4716  1129
4717  112A
4718  112B
4719  112C
4720  112D
4721  112E
4722  112F
4723  1130
4724  1131
4725  1132
4726  1133
4727  1134
4728  1135
4729  1136
4730  1137
4731  1138
4732  1139
4733  113A
4734  113B
4735  113C
4736  113D
4737  113E
4738  113F
4739  1140
4740  1141
4741  1142
4742  1143
4743  1144
4744  1145
4745  1146
4746  1147
4747  1148
4748  1149
4749  114A
4750  114B
4751  114C
4752  114D
4753  114E
4754  114F
4755  1150
4756  1151
4757  1152
4758  1153
4759  1154
4760  1155
4761  1156
4762  1157
4763  1158
4764  1159
4765  115A
4766  115B
4767  115C
4768  115D
4769  115E
4770  115F
4771  1160
4772  1161
4773  1162
4774  1163
4775  1164
4776  1165
4777  1166
4778  1167
4779  1168
4780  1169
4781  116A
4782  116B
4783  116C
4784  116D
4785  116E
4786  116F
4787  1170
4788  1171
4789  1172
4790  1173
4791  1174
4792  1175
4793  1176
4794  1177
4795  1178
4796  1179
4797  117A
4798  117B
4799  117C
4800  117D
4801  117E
4802  117F
4803  1180
4804  1181
4805  1182
4806  1183
4807  1184
4808  1185
4809  1186
4810  1187
4811  1188
4812  1189
4813  118A
4814  118B
4815  118C
4816  118D
4817  118E
4818  118F
4819  1190
4820  1191
4821  1192
4822  1193
4823  1194
4824  1195
4825  1196
4826  1197
4827  1198
4828  1199
4829  119A
4830  119B
4831  119C
4832  119D
4833  119E
4834  119F
4835  11A0
4836  11A1
4837  11A2
4838  11A3
4839  11A4
4840  11A5
4841  11A6
4842  11A7
4843  11A8
4844  11A9
4845  11AA
4846  11AB
4847  11AC
4848  11AD
4849  11AE
4850  11AF
4851  11B0
4852  11B1
4853  11B2
4854  11B3
4855  11B4
4856  11B5
4857  11B6
4858  11B7
4859  11B8
4860  11B9
4861  11BA
4862  11BB
4863  11BC
4864  11BD
4865  11BE
4866  11BF
4867  11C0
4868  11C1
4869  11C2
4870  11C3
4871  11C4
4872  11C5
4873  11C6
4874  11C7
4875  11C8
4876  11C9
4877  11CA
4878  11CB
4879  11CC
4880  11CD
4881  11CE
4882  11CF
4883  11D0
4884  11D1
4885  11D2
4886  11D3
4887  11D4
4888  11D5
4889  11D6
4890  11D7
4891  11D8
4892  11D9
4893  11DA
4894  11DB
4895  11DC
4896  11DD
4897  11DE
4898  11DF
4899  11E0
4900  11E1
4901  11E2
4902  11E3
4903  11E4
4904  11E5
4905  11E6
4906  11E7
4907  11E8
4908  11E9
4909  11EA
4910  11EB
4911  11EC
4912  11ED
4913  11EE
4914  11EF
4915  11F0
4916  11F1
4917  11F2
4918  11F3
4919  11F4
4920  11F5
4921  11F6
4922  11F7
4923  11F8
4924  11F9
4925  11FA
4926  11FB
4927  11FC
4928  11FD
4929  11FE
4930  11FF
4931  1200
4932  1201
4933  1202
4934  1203
4935  1204
4936  1205
4937  1206
4938  1207
4939  1208
4940  1209
4941  120A
4942  120B
4943  120C
4944  120D
4945  120E
4946  120F
4947  1210
4948  1211
4949  1212
4950  1213
4951  1214
4952  1215
4953  1216
4954  1217
4955  1218
4956  1219
4957  121A
4958  121B
4959  121C
4960  121D
4961  121E
4962  121F
4963  1220
4964  1221
4965  1222
4966  1223
4967  1224
4968  1225
4969  1226
4970  1227
4971  1228
4972  1229
4973  122A
4974  122B
4975  122C
4976  122D
4977  122E
4978  122F
4979  1230
4980  1231
4981  1232
4982  1233
4983  1234
4984  1235
4985  1236
4986  1237
4987  1238
4988  1239
4989  123A
4990  123B
4991  123C
4992  123D
4993  123E
4994  123F
4995  1240
4996  1241
4997  1242
4998  1243
4999  1244
5000  1245
5001  1246
5002  1247
5003  1248
5004  1249
5005  124A
5006  124B
5007  124C
5008  124D
5009  124E
5010  124F
5011  1250
5012  1251
5013  1252
5014  1253
5015  1254
5016  1255
5017  1256
5018  1257
5019  1258
5020  1259
5021  125A
5022  125B
5023  125C
5024  125D
5025  125E
5026  125F
5027  1260
5028  1261
5029  1262
5030  1263
5031  1264
5032  1265
5033  1266
5034  1267
5035  1268
5036  1269
5037  126A
5038  126B
5039  126C
5040  126D
5041  126E
5042  126F
5043  1270
5044  1271
5045  1272
5046  1273
5047  1274
5048  1275
5049  1276
5050  1277
5051  1278
5052  1279
5053  127A
5054  127B
5055  127C
5056  127D
5057  127E
5058  127F
5059  1280
5060  1281
5061  1282
5062  1283
5063  1284
5064  1285
5065  1286
5066  1287
5067  1288
5068  1289
5069  128A
5070  128B
5071  128C
5072  128D
5073  128E
5074  128F
5075  1290
5076  1291
5077  1292
5078  1293
5079  1294
5080  1295
5081  1296
5082  1297
5083  1298
5084  1299
5085  129A
5086  129B
5087  129C
5088  129D
5089  129E
5090  129F
5091  12A0
5092  12A1
5093  12A2
5094  12A3
5095  12A4
5096  12A5
5097  12A6
5098  12A7
5099  12A8
5100  12A9
5101  12AA
5102  12AB
5103  12AC
5104  12AD
5105  12AE
5106  12AF
5107  12B0
5108  12B1
5109  12B2
5110  12B3
5111  12B4
5112  12B5
5113  12B6
5114  12B7
5115  12B8
5116  12B9
5117  12BA
5118  12BB
5119  12BC
5120  12BD
5121  12BE
5122  12BF
5123  12C0
5124  12C1
5125  12C2
5126  12C3
5127  12C4
5128  12C5
5129  12C6
5130  12C7
5131  12C8
5132  12C9
5133  12CA
5134  12CB
5135  12CC
5136  12CD
5137  12CE
5138  12CF
5139  12D0
5140  12D1
5141  12D2
5142  12D3
5143  12D4
5144  12D5
5145  12D6
5146  12D7
5147  12D8
5148  12D9
5149  12DA
5150  12DB
5151  12DC
5152  12DD
5153  12DE
5154  12DF
5155  12E0
5156  12E1
5157  12E2
5158  12E3
5159  12E4
5160  12E5
5161  12E6
5162  12E7
5163  12E8
5164  12E9
5165  12EA
5166  12EB
5167  12EC
5168  12ED
5169  12EE
5170  12EF
5171  12F0
5172  12F1
5173  12F2
5174  12F3
5175  12F4
5176  12F5
5177  12F6
5178  12F7
5179  12F8
5180  12F9
5181  12FA
5182  12FB
5183  12FC
5184  12FD
5185  12FE
5186  12FF
5187  1300
5188  1301
5189  1302
5190  1303
5191  1304
5192  1305
5193  1306
5194  1307
5195  1308
5196  1309
5197  130A
5198  130B
5199  130C
5200  130D
5201  130E
5202  130F
5203  1310
5204  1311
5205  1312
5206  1313
5207  1314
5208  1315
5209  1316
5210  1317
5211  1318
5212  1319
5213  131A
5214  131B
5215  131C
5216  131D
5217  131E
5218  131F
5219  1320
5220  1321
5221  1322
5222  1323
5223  1324
5224  1325
5225  1326
5226  1327
5227  1328
5228  1329
5229  132A
5230  132B
5231  132C
5232  132D
5233  132E
5234  132F
5235  1330
5236  1331
5237  1332
5238  1333
5239  1334
5240  1335
5241  1336
5242  1337
5243  1338
5244  1339
5245  133A
5246  133B
5247  133C
5248  133D
5249  133E
5250  133F
5251  1340
5252  1341
5253  1342
5254  1343
5255  1344
5256  1345
5257  1346
5258  1347
5259  1348
5260  1349
5261  134A
5262  134B
5263  134C
5264  134D
5265  134E
5266  134F
5267  1350
5268  1351
5269  1352
5270  1353
5271  1354
5272  1355
5273  1356
5274  1357
5275  1358
5276  1359
5277  135A
5278  135B
5279  135C
5280  135D
5281  135E
5282  135F
5283  1360
5284  1361
5285  1362
5286  1363
5287  1364
5288  1365
5289  1366
5290  1367
5291  1368
5292  1369
5293  136A
5294  136B
5295  136C
5296  136D
5297  136E
5298  136F
5299  1370
5300  1371
5301  1372
5302  1373
5303  1374
5304  1375
5305  1376
5306  1377
5307  1378
5308  1379
5309  137A
5310  137B
5311  137C
5312  137D
5313  137E
5314  137F
5315  1380
5316  1381
5317  1382
5318  1383
5319  1384
5320  1385
5321  1386
5322  1387
5323  1388
5324  1389
5325  138A
5326  138B
5327  138C
5328  138D
5329  138E
5330  138F
5331  1390
5332  1391
5333  1392
5334  1393
5335  1394
5336  1395
5337  1396
5338  1397
5339  1398
5340  1399
5341  139A
5342  139B
5343  139C
5344  139D
5345  139E
5346  139F
5347  13A0
5348  13A1
5349  13A2
5350  13A3
5351  13A4
5352  13A5
5353  13A6
5354  13A7
5355  13A8
5356  13A9
5357  13AA
5358  13AB
5359  13AC
5360  13AD
5361  13AE
5362  13AF
5363  13B0
5364  13B1
5365  13B2
5366  13B3
5367  13B4
5368  13B5
5369  13B6
5370  13B7
5371  13B8
5372  13B9
5373  13BA
5374  13BB
5375  13BC
5376  13BD
5377  13BE
5378  13BF
5379  13C0
5380  13C1
5381  13C2
5382  13C3
5383  13C4
5384  13C5
5385  13C6
5386  13C7
5387  13C8
5388  13C9
5389  13CA
5390  13CB
5391  13CC
5392  13CD
5393  13CE
5394  13CF
5395  13D0
5396  13D1
5397  13D2
5398  13D3
5399  13D4
5400  13D5
5401  13D6
5402  13D7
5403  13D8
5404  13D9
5405  13DA
5406  13DB
5407  13DC
5408  13DD
5409  13DE
5410  13DF
5411  13E0
5412  13E1
5413  13E2
5414  13E3
5415  13E4
5416  13E5
5417  13E6
5418  13E7
5419  13E8
5420  13E9
5421  13EA
5422  13EB
5423  13EC
5424  13ED
5425  13EE
5426  13EF
5427  13F0
5428  13F1
5429  13F2
5430  13F3
5431  13F4
5432  13F5
5433  13F6
5434  13F7
5435  13F8
5436  13F9
5437  13FA
5438  13FB
5439  13FC
5440  13FD
5441  13FE
5442  13FF
5443  1400
5444  1401
5445  1402
5446  1403
5447  1404
5448  1405
5449  1406
5450  1407
5451  1408
5452  1409
5453  140A
5454  140B
5455  140C
5456  140D
5457  140E
5458  140F
5459  1410
5460  1411
5461  1412
5462  1413
5463  1414
5464  1415
5465  1416
5466  1417
5467  1418
5468  1419
5469  141A
5470  141B
5471  141C
5472  141D
5473  141E
5474  141F
5475  1420
5476  1421
5477  1422
5478  1423
5479  1424
5480  1425
5481  1426
5482  1427
5483  1428
5484  1429
5485  142A
5486  142B
5487  142C
5488  142D
5489  142E
5490  142F
5491  1430
5492  1431
5493  1432
5494  1433
5495  1434
5496  1435
5497  1436
5498  1437
5499  1438
5500  1439
5501  143A
5502  143B
5503  143C
5504  143D
5505  143E
5506  143F
5507  1440
5508  1441
5509  1442
5510  1443
5511  1444
5512  1445
5513  1446
5514  1447
5515  1448
5516  1449
5517  144A
5518  144B
5519  144C
5520  144D
5521  144E
5522  144F
5523  1450
5524  1451
5525  1452
5526  1453
5527  1454
5528  1455
5529  1456
5530  1457
5531  1458
5532  1459
5533  145A
5534  145B
5535  145C
5536  145D
5537  145E
5538  145F
5539  1460
5540  1461
5541  1462
5542  1463
5543  1464
5544  1465
5545  1466
5546  1467
5547  1468
5548  1469
5549  146A
5550  146B
5551  146C
5552  146D
5553  146E
5554  146F
5555  1470
5556  1471
5557  1472
5558  1473
5559  1474
5560  1475
5561  1476
5562  1477
5563  1478
5564  1479
5565  147A
5566  147B
5567  147C
5568  147D
5569  147E
5570  147F
5571  1480
5572  1481
5573  1482
5574  1483
5575  1484
5576  1485
5577  1486
5578  1487
5579  1488
5580  1489
5581  148A
5582  148B
5583  148C
5584  148D
5585  148E
5586  148F
5587  1490
5588  1491
5589  1492
5590  1493
5591  1494
5592  1495
5593  1496
5594  1497
5595  1498
5596  1499
5597  149A
5598  149B
5599  149C
5600  149D
5601  149E
5602  149F
5603  14A0
5604  14A1
5605  14A2
5606  14A3
5607  14A4
5608  14A5
5609  14A6
5610  14A7
5611  14A8
5612  14A9
5613  14AA
5614  14AB
5615  14AC
5616  14AD
5617  14AE
5618  14AF
5619  14B0
5620  14B1
5621  14B2
5622  14B3
5623  14B4
5624  14B5
5625  14B6
5626  14B7
5627  14B8
5628  14B9
5629  14BA
5630  14BB
5631  14BC
5632  14BD
5633  14BE
5634  14BF
5635  14C0
5636  14C1
5637  14C2
5638  14C3
5639  14C4
5640  14C5
5641  14C6
5642  14C7
5643  14C8
5644  14C9
5645  14CA
5646  14CB
5647  14CC
5648  14CD
5649  14CE
5650  14CF
5651  14D0
5652  14D1
5653  14D2
5654  14D3
5655  14D4
5656  14D5
5657  14D6
5658  14D7
5659  14D8
5660  14D9
5661  14DA
5662  14DB
5663  14DC
5664  14DD
5665  14DE
5666  14DF
5667  14E0
5668  14E1
5669  14E2
5670  14E3
5671  14E4
5672  14E5
5673  14E6
5674  14E7
5675  14E8
5676  14E9
5677  14EA
5678  14EB
5679  14EC
5680  14ED
5681  14EE
5682  14EF
5683  14F0
5684  14F1
5685  14F2
5686  14F3
5687  14F4
5688  14F5
5689  14F6
5690  14F7
5691  14F8
5692  14F9
5693  14FA
5694  14FB
5695  14FC
5696  14FD
5697  14FE
5698  14FF
5699  1500
5700  1501
5701  1502
5702  1503
5703  1504
5704  1505
5705  1506
5706  1507
5707  1508
5708  1509
5709  150A
5710  150B
5711  150C
5712  150D
5713  150E
5714  150F
5715  1510
5716  1511
5717  1512
5718  1513
5719  1514
5720  1515
5721  1516
5722  1517
5723  1518
5724  1519
5725  151A
5726  151B
5727  151C
5728  151D
5729  151E
5730  151F
5731  1520
5732  1521
5733  1522
5734  1523
5735  1524
5736  1525
5737  1526
5738  1527
5739  1528
5740  1529
5741  152A
5742  152B
5743  152C
5744  152D
5745  152E
5746  152F
5747  1530
5748  1531
5749  1532
5750  1533
5751  1534
5752  1535
5753  1536
5754  1537
5755  1538
5756  1539
5757  153A
5758  153B
5759  153C
5760  153D
5761  153E
5762  153F
5763  1540
5764  1541
5765  1542
5766  1543
5767  1544
5768  1545
5769  1546
5770  1547
5771  1548
5772  1549
5773  154A
5774  154B
5775  154C
5776  154D
5777  154E
5778  154F
5779  1550
5780  1551
5781  1552
5782  1553
5783  1554
5784  1555
5785  1556
5786  1557
5787  1558
5788  1559
5789  155A
5790  155B
5791  155C
5792  155D
5793  155E
5794  155F
5795  1560
5796  1561
5797  1562
5798  1563
5799  1564
5800  1565
5801  1566
5802  1567
5803  1568
5804  1569
5805  156A
5806  156B
5807  156C
5808  156D
5809  156E
5810  156F
5811  1570
5812  1571
5813  1572
5814  1573
5815  1574
5816  1575
5817  1576
5818  1577
5819  1578
5820  1579
5821  157A
5822  157B
5823  157C
5824  157D
5825  157E
5826  157F
5827  1580
5828  1581
5829  1582
5830  1583
5831  1584
5832  1585
5833  1586
5834  1587
5835  1588
5836  1589
5837  158A
5838  158B
5839  158C
5840  158D
5841  158E
5842  158F
5843  1590
5844  1591
5845  1592
5846  1593
5847  1594
005848  000272        
005849  000273  var hFonts[6] ;
005850  000274  var iSounds[11] ;
005851  000275  var stringsCV[6] := [0, 0, 0, 0, 0, 0], hstrings ;
5852  0B0C
5853  0B0D
5854  0B0E
5855  0B0F
5856  0B10
5857  0B11
5858  0B12
5859  0B13
5860  0B14
5861  0B15
5862  0B16
5863  0B17
005864  000276  // Start P2.inc
005865  000277  var oObjects[MaxTotObjects+1] ;                 // address of objects
005866  000278  var curform ;
005867  000279  var x, y ;
005868  000280  var inputtype, TState, input, object ;
005869  000281  var comRX[40], cmd[CMDLenMAX] ;
005870  000282        
005871  000283  var cs, Ocs ;
005872  000284        
005873  000285  func seroutCS(var op)
005874  000286      serout(op) ;
005875  000287      Ocs ^= op ;
005876  000288  endfunc
005877  000289        
005878  000290  func seroutOcs()
005879  000291      serout(Ocs) ;
005880  000292      Ocs := 0 ;
005881  000293  endfunc
005882  000294        
005883  000295  func TMul(var p1, var p2, var p3)
005884  000296      var var32[2], var322[2] ;
005885  000297      umul_1616(var32, p1, *(input+p2)) ;
005886  000298      umul_1616(var322, var32[1], *(input+p3)) ;
005887  000299      umul_1616(var32, var32[0], *(input+p3)) ;
005888  000300      return(var32[1] + var322[0]) ;
005889  000301  endfunc
005890  000302        
005891  000303  func ReadObject(var ObjectType, var ObjectIdx)
005892  000304      var j, k, Objects ;
005893  000305      Objects := *(oObjects+ObjectType) ;
005894  000306        
005895  000307      seroutCS(REPORT_OBJ) ;
005896  000308      seroutCS(ObjectType) ;
005897  000309      seroutCS(ObjectIdx) ;
005898  000310      j := 2 + ObjectIdx * 2 + Objects ;
005899  000311       if (ObjectType == tForm)
005900  000312          k := curform ;
005901  000313      else if ((ObjectType == tCustomdigits) || (ObjectType == tLeddigits))
005902  000314          k := img_GetWord(hndl, *j, IMAGE_TAG2);
005903  000315      else if (ObjectType == tStrings)
005904  000316          k := stringsCV[ObjectIdx];
005905  000317      else if (ObjectType == tSounds)
005906  000318          k := snd_Playing();             // only a code of 0 is valid, return playing block regardless
005907  000319          else
005908  000320          k := img_GetWord(hndl, *j, IMAGE_INDEX);
005909  000321          if (((ObjectType == tWinButton) || (ObjectType == tAniButton) || (ObjectType == tUserButton) || (ObjectType == t4Dbutton)) && (k)) k := 1 ;
005910  000322      endif
005911  000323      seroutCS(k >> 8) ; // first 8 bits
005912  000324      seroutCS(k) ;
005913  000325      seroutOcs() ;
005914  000326  endfunc
005915  000327        
005916  000328        
005917  000329  func WriteObject(var ObjectType, var ObjectIdx, var NewVal)
005918  000330      var i, j, Objects ;
005919  000331      ObjectType &= 0x3f ;
005920  000332      if (ObjectType == tForm)
005921  000333          ActivateForm(ObjectIdx) ;
005922  000334      else
005923  000335          Objects := *(oObjects+ObjectType)+ObjectIdx*2+2 ;
005924  000336          i := *(Objects) ;
005925  000337          switch (ObjectType)
005926  000338              case tWinButton :
005927  000339                  j := IPControls[oWinButtons[ObjectIdx+1]] ;
005928  000340                  break ;
005929  000341              case t4Dbutton :
005930  000342                  j := IPControls[o4Dbuttons[ObjectIdx+1]] ;
005931  000343                  break ;
005932  000344              default : j := -1 ;
005933  000345          endswitch
005934  000346          if (j != -1) 
005935  000347              if (*(j+IPData+IPD_P2) != -1) TurnOffButtons(*(j+IPData+IPD_P2)) ;
005936  000348              NewVal := NewVal << 1 ;
005937  000349          endif
005938  000350           if (ObjectType == tLeddigits)
005939  000351              img_SetWord(hndl, i , IMAGE_TAG2, NewVal); // where state is 0 to 2
005940  000352              ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
005941  000353          else if (ObjectType == tStrings)
005942  000354              PrintStrings(ObjectIdx, NewVal, 0);
005943  000355          else if (ObjectType == tSounds)
005944  000356              if (!ObjectIdx)
005945  000357                  file_PlayWAV(iSounds[NewVal]);
005946  000358              else if (ObjectIdx == 1)
005947  000359                  snd_Volume(NewVal) ;
005948  000360              else if (ObjectIdx == 2)
005949  000361                  snd_Pause() ;
005950  000362              else if (ObjectIdx == 3)
005951  000363                  snd_Continue() ;
005952  000364              else if (ObjectIdx == 4)
005953  000365                  snd_Stop() ;
005954  000366              endif
005955  000367          else
005956  000368              img_SetWord(hndl, i , IMAGE_INDEX, NewVal); // where state is 0 to 2
005957  000369              img_Show(hndl, i) ; // will only display if form is current
005958  000370          endif
005959  000371      endif
005960  000372  endfunc
005961  000373        
005962  000374  func TurnOffButtons(var group)
005963  000375      var j, k, l;
005964  000376      for (j := 0; j < nInputs; j++)
005965  000377          k := j*IPDatasize ;
005966  000378          if (*(IPData+k+IPD_P2) == group)
005967  000379              l := -1 ;
005968  000380               if (*(IPData+k) == t4Dbutton)
005969  000381                  l := o4Dbuttons[*(IPData+k+IPD_OBJVidx)/2] ;
005970  000382                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
005971  000383                  img_Show(hndl, l);      // only shows on current form
005972  000384              else if (*(IPData+k) == tWinButton)
005973  000385                  l := oWinButtons[*(IPData+k+IPD_OBJVidx)/2] ;
005974  000386                  img_SetWord(hndl, l, IMAGE_INDEX, 0);
005975  000387                  img_Show(hndl, l);      // only shows on current form
005976  000388              endif
005977  000389          endif
005978  000390      next
005979  000391  endfunc
005980  000392        
005981  000393        
005982  000394  // WARNING, this code will crash if newval exceeds maximum displayable number
005983  000395  func ledDigitsDisplay(var imgidx, var typeptr, var setptr)
005984  000396      var i, j, k, l, lb, newval ;
005985  000397      if (!((img_GetWord(hndl, imgidx, IMAGE_FLAGS) & I_ENABLED))) return ;  // ;img_GetWord(hndl, imgidx, IMAGE_TAG2) ;if diabled then exit
005986  000398      newval := img_GetWord(hndl, imgidx, IMAGE_TAG2) ;
005987  000399      i := -1 ;
005988  000400      j := *(typeptr) ;
005989  000401      repeat
005990  000402          typeptr += 2 ;
005991  000403          i++ ;
005992  000404          until (*(typeptr) == imgidx);
005993  000405      j := setptr + i*10 ;
005994  000406        
005995  000407      imgidx++ ;
005996  000408      l := 1 ;
005997  000409      for (i := 1; i < *(j+iDigits); i++)
005998  000410          l *= 10 ;
005999  000411      next
006000  000412      lb := *(j+iLeadingBlanks) ;
006001  000413      for (i := 0; i < *(j+iDigits); i++)
006002  000414          k := newval / l ;
006003  000415          newval -= k * l ;
006004  000416          if ( lb && (i < *(j+iDigits) - *(j+iMinDigits)) )
006005  000417              if (k == 0)
006006  000418                  k := 10 ;
006007  000419              else
006008  000420                  lb := 0 ;
006009  000421              endif
006010  000422          endif
006011  000423          l /= 10 ;
006012  000424          img_SetWord(hndl, imgidx, IMAGE_INDEX, k);
006013  000425          img_SetWord(hndl, imgidx, IMAGE_XPOS, *(j+ileft)+i* *(j+iWidthDigit)) ;
006014  000426          img_Show(hndl, imgidx);
006015  000427      next
006016  000428  endfunc
006017  000429        
006018  000430        
006019  000431  func ActivateForm(var newform)
006020  000432      var i, j, *p ;
006021  000433      if (curform != -1) // deactivate old form, by disabling all inputs
006022  000434          for (i := formstidx[curform]; i <= formenidx[curform]; i++)
006023  000435              if (img_GetWord(hndl, i, IMAGE_TAG))
006024  000436                  img_Disable(hndl,i) ;
006025  000437              endif
006026  000438          next
006027  000439      endif
006028  000440      curform := newform ;
006029  000441      // display newform image or clear to image color
006030  000442      if (formBGcol[curform] != BGIMAGE)
006031  000443          gfx_Set(BACKGROUND_COLOUR,formBGcol[curform]);
006032  000444          gfx_Cls() ;
006033  000445          DoGFXObjects() ;                                    // display GFX 'widgets'
006034  000446      endif
006035  000447        
006036  000448      // enable inputs
006037  000449      for (i := formstidx[curform]; i < formenidx[curform]; i++)
006038  000450          j := img_GetWord(hndl, i, IMAGE_TAG) ;
006039  000451          if (j)
006040  000452              j-- ;
006041  000453              img_SetAttributes(hndl, i, I_STAYONTOP+I_ENABLED);        // make sure this is on top of form, if applicable
006042  000454              //if (j != tKeyboard)
006043  000455              if ((j <= tWinButton) || (j >= t4Dbutton) )               // enable inputs
006044  000456                  img_ClearAttributes(hndl, i, I_TOUCH_DISABLE);        // ensure touch is enabled
006045  000457              endif
006046  000458              img_Show(hndl,i) ; // show initialy, if required
006047  000459              if (j == tForm)
006048  000460                  DoGFXObjects() ;                                    // display GFX 'widgets' for image backgruobds
006049  000461              else if (j == tLeddigits)
006050  000462                  ledDigitsDisplay(i, oLeddigitss, OPDataL) ;
006051  000463              endif
006052  000464          endif
006053  000465      next
006054  000466      for (i := 0; i < oStringss[0]; i++)
006055  000467          if (stringsCV[i] != -1)
006056  000468              WriteObject(tStrings, i, stringsCV[i]) ;
006057  000469          endif
006058  000470      next
006059  000471  endfunc
006060  000472        
006061  000473  func UpdateObjects(var newval)
006062  000474      var IPidx, otherOBJ ;
006063  000475      if ( ( img_GetWord(hndl, *(object), IMAGE_INDEX) != newval) || (TState == IPD_RELEASE) ) // only bother if values changed, or release
006064  000476        
006065  000477          img_SetWord(hndl, *(object), IMAGE_INDEX, newval);
006066  000478              img_Show(hndl, *(object));      // only shows on current form
006067  000479          if (((inputtype == t4Dbutton) || (inputtype == tUserButton) || (inputtype == tWinButton) || (inputtype == tAniButton) )&& (newval > 1)) newval := 1;
006068  000480          IPidx := *(input+TState) ;
006069  000481          while(IPidx != 0)
006070  000482              otherOBJ := IPidx + IPData;
006071  000483              if (*(otherOBJ) == OT_REPORT)
006072  000484                  seroutCS(REPORT_EVENT) ;
006073  000485                  seroutCS(inputtype) ;
006074  000486                  seroutCS(*(otherOBJ+IPD_OBJVidx)) ;
006075  000487                  seroutCS(newval >> 8) ;
006076  000488                  seroutCS(newval) ;
006077  000489                  seroutOcs() ;
006078  000490              else if (TState == *(otherOBJ+IPD_P4))
006079  000491                  if (*(otherOBJ) == OT_ACTIVATE)
006080  000492                      ActivateForm(*(otherOBJ+IPD_P2) ) ;
006081  000493                      inputtype := tForm ;
006082  000494                  else if (*(otherOBJ) == OT_SETCONST)
006083  000495                      newval := *(otherOBJ+IPD_P3) ;
006084  000496                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
006085  000497                  else if (*(otherOBJ) == OT_SETANOTHER)
006086  000498                      WriteObject(*(otherOBJ+IPD_P1), *(otherOBJ+IPD_P2), newval) ;
006087  000499                  else if (*(otherOBJ) == OT_PREVFRAME)
006088  000500                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX))
006089  000501                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)-1) ;
006090  000502                      endif
006091  000503                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
006092  000504                  else if (*(otherOBJ) == OT_NEXTFRAME)
006093  000505                      if (img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) < *(otherOBJ+IPD_P3)) 
006094  000506                          WriteObject(*(otherOBJ+IPD_P5),*(otherOBJ+IPD_P2),img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX)+1) ;
006095  000507                      endif
006096  000508                      newval := img_GetWord(hndl, *(otherOBJ+IPD_P6), IMAGE_INDEX) ;
006097  000509                  else if (*(otherOBJ) == OT_PREVSTRING)
006098  000510                      if (stringsCV[*(otherOBJ+IPD_P2)])
006099  000511                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]-1) ;
006100  000512                      endif
006101  000513                  else if (*(otherOBJ) == OT_NEXTSTRING)
006102  000514                      if (stringsCV[*(otherOBJ+IPD_P2)] < *(otherOBJ+IPD_P3)) // fix IPD_P2 not filled in yet
006103  000515                          WriteObject(tStrings,*(otherOBJ+IPD_P2),stringsCV[*(otherOBJ+IPD_P2)]+1) ;
006104  000516                      endif
006105  000517                  endif
006106  000518              endif
006107  000519              IPidx := *(otherOBJ+TState) ;
006108  000520          wend
006109  000521      endif
006110  000522  endfunc
006111  000523        
006112  000524  // End P2.inc
006113  000525  func DoGFXObjects()
006114  000526      switch (curform)
006115  000527          case 4:
006116  000528              gfx_OutlineColour(WHITE) ;
006117  000529              gfx_LinePattern(LPFINE) ;
006118  000530              gfx_Rectangle(8, 40, 122, 271, RED) ;
006119  000531              gfx_OutlineColour(BLACK) ;
006120  000532          break ;
006121  000533          case 7:
006122  000534              txt_FontID(FONT1);
006123  000535              txt_FGcolour(AQUA) ;
006124  000536              txt_BGcolour(BLACK) ;
006125  000537              gfx_MoveTo(184, 8) ;
006126  000538              putstr("INDEPENDANT DRIVE") ;
006127  000539          break ;
006128  000540      endswitch
006129  000541  endfunc
006130  000542        
006131  000543  // Start P3.inc
006132  000544  func main()
006133  000545      var comTX[50], cmdi, i, j, n, state, oldn ;
006134  000546      putstr("Mounting...\n");
006135  000547      if (!(disk:=file_Mount()))
006136  000548          while(!(disk :=file_Mount()))
006137  000549              putstr("Drive not mounted...");
006138  000550              pause(200);
006139  000551              gfx_Cls();
006140  000552              pause(200);
006141  000553          wend
006142  000554      endif
006143  000555  //    gfx_MoveTo(0, 0);
006144  000556  //    print(mem_Heap()," ") ;
006145  000557  //    gfx_TransparentColour(0x0020);
006146  000558  //    gfx_Transparency(ON);
006147  000559        
006148  000560      gfx_ScreenMode(LANDSCAPE) ;
006149  000561        
006150  000562      // open image control
006151  000563      hndl := file_LoadImageControl("MCTRL~1.dat", "MCTRL~1.gci", 1);
006152  000564        
006153  000565      // init 'constants'
006154  000566  // End P3.inc
006155  000567        
006156  000568      oObjects[tDipSwitch] := oDipSwitchs ;
006157  000569      oObjects[tKnob] := oKnobs ;
006158  000570      oObjects[tRockerSwitch] := oRockerSwitchs ;
006159  000571      oObjects[tRotarySwitch] := oRotarySwitchs ;
006160  000572      oObjects[tGSlider] := oGSliders ;
006161  000573      oObjects[tTrackbar] := oTrackbars ;
006162  000574      oObjects[tWinButton] := oWinButtons ;
006163  000575      oObjects[tAngularmeter] := oAngularmeters ;
006164  000576      oObjects[tCoolgauge] := oCoolgauges ;
006165  000577      oObjects[tCustomdigits] := oCustomdigitss ;
006166  000578      oObjects[tForm] := oForms ;
006167  000579      oObjects[tGauge] := oGauges ;
006168  000580      oObjects[tImage] := oImages ;
006169  000581      oObjects[tKeyboard] := oKeyboards ;
006170  000582      oObjects[tLed] := oLeds ;
006171  000583      oObjects[tLeddigits] := oLeddigitss ;
006172  000584      oObjects[tMeter] := oMeters ;
006173  000585      oObjects[tStrings] := oStringss ;
006174  000586      oObjects[tThermometer] := oThermometers ;
006175  000587      oObjects[tUserled] := oUserleds ;
006176  000588      oObjects[tVideo] := oVideos ;
006177  000589      oObjects[tStaticText] := oStaticTexts ;
006178  000590      oObjects[tSounds] := oSoundss ;
006179  000591      oObjects[tTimer] := oTimers ;
006180  000592      oObjects[tSpectrum] := oSpectrums ;
006181  000593      oObjects[tTank] := oTanks ;
006182  000594      oObjects[tUserImages] := oUserImagess ;
006183  000595      oObjects[tPinOutput] := oPinOutputs ;
006184  000596      oObjects[tPinInput] := oPinInputs ;
006185  000597      oObjects[t4Dbutton] := o4Dbuttons ;
006186  000598      oObjects[tAniButton] := oAniButtons ;
006187  000599      oObjects[tColorPicker] := oColorPickers ;
006188  000600      oObjects[tUserButton] := oUserButtons ;
006189  000601      iSounds[0] := Sounds ;
006190  000602      iSounds[1] := Sounds + 13 ;
006191  000603      iSounds[2] := Sounds + 26 ;
006192  000604      iSounds[3] := Sounds + 39 ;
006193  000605      iSounds[4] := Sounds + 52 ;
006194  000606      iSounds[5] := Sounds + 65 ;
006195  000607      iSounds[6] := Sounds + 78 ;
006196  000608      iSounds[7] := Sounds + 91 ;
006197  000609      iSounds[8] := Sounds + 104 ;
006198  000610      iSounds[9] := Sounds + 117 ;
006199  000611      iSounds[10] := Sounds + 130 ;
006200  000612      hFonts[0] := FONT3 ;
006201  000613      hFonts[1] := file_LoadImageControl("MCTRL~1.da1", "MCTRL~1.gc1", 1)  ;
006202  000614      hFonts[2] := FONT3 ;
006203  000615      hFonts[3] := file_LoadImageControl("MCTRL~1.da2", "MCTRL~1.gc2", 1)  ;
006204  000616      hFonts[4] := file_LoadImageControl("MCTRL~1.da3", "MCTRL~1.gc3", 1)  ;
006205  000617      hFonts[5] := file_LoadImageControl("MCTRL~1.da4", "MCTRL~1.gc4", 1)  ;
006206  000618  // Start P4.inc
006207  000619      hstrings := file_Open("MCTRL~1.txf", 'r') ; // Open handle to access uSD strings, uncomment if required
006208  000620      // init comms
006209  000621      com_Init(comRX,80,0);
006210  000622      setbaud(BAUD_115200);
006211  000623      com_TXbuffer(comTX, 100, 0);
006212  000624      // tag 'real' objects
006213  000625      for (i := 0; i <= MaxTotObjects; i++)
006214  000626          if (   (i != tSounds)
006215  000627              && (i != tTimer)
006216  000628              && (i != tPinOutput)
006217  000629              && (i != tPinInput) )
006218  000630              x := oObjects[i] ;
006219  000631              y := *(x) ;
006220  000632              for (n := 1; n <= y; n++)
006221  000633                  oldn := *(x+n*2) ;
006222  000634                  img_SetAttributes(hndl, oldn, I_TOUCH_DISABLE);  // ensure touch is enabled
006223  000635                  if (oldn != -1)
006224  000636                      img_SetWord(hndl, oldn, IMAGE_TAG, i+1);
006225  000637                      img_Disable(hndl, oldn) ;
006226  000638                  endif
006227  000639              next
006228  000640          endif
006229  000641      next
006230  000642        
006231  000643      // display initial form
006232  000644      curform := -1 ;
006233  000645      ActivateForm(0) ; // need to change this according to first actual form
006234  000646  // End P4.inc
006235  000647      WriteObject(5, 1, 32) ; // init volume control
006236  000648      WriteObject(5, 1, 32) ; // init volume control
006237  000649  // Start P5.inc
006238  000650      touch_Set(TOUCH_ENABLE);                            // enable the touch screen
006239  000651      oldn := -1 ;
006240  000652      repeat
006241  000653          // check comms for command, how to NAK invalid command
006242  000654          if (com_Count() != 0)
006243  000655              i := serin() ;
006244  000656              cs ^= i ;               // update checksum
006245  000657              if (   (cmdi > 2)
006246  000658                  && (cmd[0] == WRITE_STRU) )
006247  000659                  j := (cmdi-1) >> 1 + 2 ;
006248  000660                  if (j == CMDLenMAX)    // max length exceeded
006249  000661                      serout(NAK) ;
006250  000662                      cs := 0 ;
006251  000663                      cmdi := -1 ;
006252  000664                  else if (cmdi & 1)
006253  000665                      cmd[j] := i ;
006254  000666                      if (cmd[2] == 0)    // if string complete
006255  000667                          if (cs)
006256  000668                              serout(NAK) ;
006257  000669                              cs := 0 ;
006258  000670                          else
006259  000671                              cmd[j] := 0 ;                     // terminate it
006260  000672                              PrintStrings(cmd[1], &cmd[3], 1) ;
006261  000673                              serout(ACK) ;
006262  000674                          endif
006263  000675                          cmdi := -1 ;
006264  000676                      endif
006265  000677                  else
006266  000678                      cmd[j] := cmd[j] << 8 + i ;
006267  000679                      cmd[2]-- ;          // dec length
006268  000680                  endif
006269  000681                  cmdi++ ;
006270  000682              else // not unicode string
006271  000683                  cmd[cmdi++] := i ;
006272  000684                   if (cmd[0] == WRITE_STR)        // ansi string
006273  000685                      if (cmdi == CMDLenMAX)      // max length exceeded
006274  000686                          serout(NAK) ;
006275  000687                          cs := 0 ;
006276  000688                          cmdi := 0 ;
006277  000689                      else if (cmdi > 2)
006278  000690                          if (cmd[2] == -1)
006279  000691                              if (cs)
006280  000692                                  serout(NAK) ;
006281  000693                                  cs := 0 ;
006282  000694                              else
006283  000695                                  cmd[cmdi-1] := 0 ;                     // terminate it
006284  000696                                  PrintStrings(cmd[1], &cmd[3], 1) ;
006285  000697                                  serout(ACK) ;
006286  000698                              endif
006287  000699                              cmdi := 0 ;
006288  000700                          else
006289  000701                              cmd[2]-- ;          // dec length
006290  000702                          endif
006291  000703                      endif
006292  000704                  else if (   (cmd[0] == READ_OBJ)
006293  000705                           && (cmdi == 4)         )
006294  000706                      if (cs)
006295  000707                          serout(NAK) ;
006296  000708                          cs := 0 ;
006297  000709                      else
006298  000710                          ReadObject(cmd[1], cmd[2]) ;
006299  000711                      endif
006300  000712                      cmdi := 0 ;
006301  000713                  else if (   (cmd[0] == WRITE_OBJ)    // 6 byte write command (gen option)
006302  000714                           && (cmdi == 6)          )
006303  000715                      if (cs)
006304  000716                          serout(NAK) ;
006305  000717                          cs := 0 ;
006306  000718                      else
006307  000719                          WriteObject(cmd[1], cmd[2], cmd[3] << 8 + cmd[4]) ;
006308  000720                          serout(ACK) ;
006309  000721                      endif
006310  000722                      cmdi := 0 ;
006311  000723                  else if (   (cmd[0] == WRITE_CONTRAST)
006312  000724                           && (cmdi == 3)         )
006313  000725                      if (cs)
006314  000726                          serout(NAK) ;
006315  000727                          cs := 0 ;
006316  000728                      else
006317  000729                          gfx_Contrast(cmd[1]) ;
006318  000730                          serout(ACK) ;
006319  000731                      endif
006320  000732                      cmdi := 0 ;
006321  000733                  else if (cmdi == 6)    // we have 6 bytes and we've gotten here -> something wrong
006322  000734                      serout(NAK) ;
006323  000735                      cs := 0 ;
006324  000736                      cmdi := 0 ;
006325  000737                  endif
006326  000738              endif   // not unicode string
006327  000739          endif   // a character is available
006328  000740        
006329  000741        
006330  000742      // touch code processing
006331  000743        
006332  000744          state := touch_Get(TOUCH_STATUS);               // get touchscreen status
006333  000745          n := img_Touched(hndl,-1) ;
006334  000746          if ((state == TOUCH_PRESSED) || (state == TOUCH_RELEASED) || (state == TOUCH_MOVING))
006335  000747              if ((state != TOUCH_RELEASED) && (n != oldn) && (oldn != -1)) 
006336  000748                  state := TOUCH_RELEASED ;       // simulate release if we move off object
006337  000749              endif
006338  000750              if (state != TOUCH_RELEASED)        // if not released
006339  000751                  if (oldn != -1) 
006340  000752                      n := oldn ;
006341  000753                  else 
006342  000754                      oldn := n ;
006343  000755                      state := TOUCH_PRESSED ;
006344  000756                  endif
006345  000757                  x  := touch_Get(TOUCH_GETX);
006346  000758                  y  := touch_Get(TOUCH_GETY);
006347  000759                  TState := IPD_DOWN ;
006348  000760              else
006349  000761                  n := oldn ;                     // simulate release of what we touched
006350  000762                  oldn := -1 ;                    // prevent double release
006351  000763                  TState := IPD_RELEASE ;
006352  000764              endif
006353  000765              if (n != -1)
006354  000766                          input := IPControls[n] + IPData;
006355  000767                          inputtype := *(input) ;
006356  000768                          i := inputtype ;
006357  000769                          if (inputtype >= t4Dbutton) i -= 23 ; // adjust to ensure next in gosub
006358  000770                          gosub (i), (cDipswitch, cKnob, cRockerswitch, cRotaryswitch, cSlider, cTrackbar, cWinbutton, c4DButton, cAniButton, cColorPicker, cUserButton) ;
006359  000771              endif
006360  000772          endif
006361  000773   //       if ((n != -1) && (oldn == -1)) oldn := n ;    // save what we touched in case we move off it
006362  000774        
006363  000775          sys_EventsResume() ;
006364  000776      forever
006365  000777        
006366  000778  cDipswitch:
006367  000779        
006368  000780  cKnob:
006369  000781      i := XYposToDegree(x-*(input+IPD_P1),      // x - CentreX
006370  000782                         y-*(input+IPD_P2)) ;    // y - centreY
006371  000783      if (i < *(input+IPD_P3))                   // anything in the first 'dead zone' is minvalue
006372  000784          i := 0 ;
006373  000785      else
006374  000786          if (i > *(input+IPD_P4))               // anything in the last 'dead zone' is maxvalue
006375  000787              i := *(input+IPD_P5) ;
006376  000788          else
006377  000789              i -= *(input+IPD_P3) ;             // offset by -baseangle
006378  000790          endif
006379  000791      endif
006380  000792  //  i := i * *(input+IPD_P6) / *(input+IPD_P5) ;   // convert degrees to position
006381  000793      i := TMul(i, IPD_P6, IPD_P7) ;   // convert degrees to position
006382  000794      object := oKnobs + *(input+IPD_OBJVidx) ;
006383  000795      UpdateObjects(i) ;
006384  000796  endsub ;
006385  000797        
006386  000798  cRockerswitch:
006387  000799        
006388  000800  cRotaryswitch:
006389  000801        
006390  000802  cSlider:
006391  000803  cTrackbar:
006392  000804      if (*(input+IPD_P1))
006393  000805          i := x - *(input+IPD_P2) ;
006394  000806          if (i < 0)
006395  000807              i := 0 ;
006396  000808          else if (i > *(input+IPD_P3))        // height/width - 17)
006397  000809              i := *(input+IPD_P4) ;           // maxvalue-minvalue
006398  000810          else
006399  000811  //            i := *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
006400  000812              i := TMul(i, IPD_P4, IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
006401  000813          endif
006402  000814      else
006403  000815          i := y - *(input+IPD_P2) ;
006404  000816          if (i < 0)
006405  000817              i := *(input+IPD_P4) ;           // maxvalue-minvalue
006406  000818          else if (i > *(input+IPD_P3))        // height/width - 17)
006407  000819              i := 0 ;
006408  000820          else
006409  000821  //            i := *(input+IPD_P4) - *(input+IPD_P4) * i / *(input+IPD_P3) ;    // max-min - (max-min) * posn / (height-17)
006410  000822              i := *(input+IPD_P4) - TMul(i, IPD_P4, IPD_P5) ;    // max-min - (max-min) * posn / (height-17)
006411  000823          endif
006412  000824      endif
006413  000825      if (inputtype == tGSlider)
006414  000826          object := oGSliders ;
006415  000827      else
006416  000828          object := oTrackbars ;
006417  000829      endif
006418  000830      object += *(input+IPD_OBJVidx) ;
006419  000831      UpdateObjects(i) ;
006420  000832  endsub ;
006421  000833        
006422  000834  c4DButton:
006423  000835      object := o4Dbuttons + *(input+IPD_OBJVidx) ;
006424  000836      goto gbutton ;
006425  000837  cUserButton:
006426  000838  cWinbutton:
006427  000839      object := oWinButtons + *(input+IPD_OBJVidx) ;
006428  000840  gbutton:
006429  000841      if (*(input+IPD_P1))                                 // momentary, reports 0, but should report 1
006430  000842          if (state == TOUCH_RELEASED)
006431  000843              i := 0 ;
006432  000844              TState == IPD_DOWN ;
006433  000845          else
006434  000846              i := 1 ;
006435  000847              TState == IPD_RELEASE ;
006436  000848          endif
006437  000849      else if (*(input+IPD_P2) == -1)                      // Toggle, reports 0+2, but should report 0+1
006438  000850          i := img_GetWord(hndl, *(object), IMAGE_INDEX) ; // current state
006439  000851          if (state == TOUCH_RELEASED)                     // only truly change on release
006440  000852              i := ++i & 3 ;
006441  000853          else
006442  000854              i |= 1 ;                                      // make down regardless of current state
006443  000855          endif
006444  000856      else                        // group action, up all other buttons on touch press, reports 0 for button down
006445  000857          if (state == TOUCH_PRESSED)                     // only truly change on release
006446  000858              TurnOffButtons(*(input+IPD_P2)) ;
006447  000859          endif
006448  000860      i := 2 ;
006449  000861      endif
006450  000862        
006451  000863      UpdateObjects(i) ;
006452  000864  endsub ;
006453  000865        
006454  000866  cAniButton:
006455  000867        
006456  000868  cColorPicker:
006457  000869        
006458  000870  endfunc
006459  000871  // End P5.inc
Notice: local var 'p' in func 'ActivateForm' is never used (line 432 file:MCTRL.4DGenieS)


Symbol Table:
name                 decimal    hex
_1F                                  -40  0xffffffd8 (PmmC func) args[0] r=0  (not used)
__MAXMEM                           14400  0x00003840 (const dword)  (usage 1)
__MAXPROG                          14400  0x00003840 (const dword)  (usage 1)
__PLATFORM                             1  0x00000001 (const dword)  (not used)
ABS                                  -13  0xfffffff3 (PmmC func) args[1] r=1  (usage 6)
ACK                                    6  0x00000006 (const dword)  (usage 12)
ActivateForm                        5940  0x00001734 (User func) args[1] r=0  (usage 9)
ALICEBLUE                          63455  0x0000f7df (const dword)  (not used)
ALL                                65535  0x0000ffff (const dword)  (not used)
ANITIMERS                              0  0x00000000 (const dword)  (not used)
ANTIQUEWHITE                       65370  0x0000ff5a (const dword)  (not used)
APPEND                                 0  0x00000000 (const dword)  (not used)
AQUA                                2047  0x000007ff (const dword)  (usage 12)
AQUAMARINE                         32762  0x00007ffa (const dword)  (not used)
arctan                                 7  0x00000007arctan                                 7  0x00000007 (mem) byte[101] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
AUDIO_ENABLE                           7  0x00000007 (const dword)  (not used)
AZURE                              63487  0x0000f7ff (const dword)  (not used)
BACKGROUND_COLOUR                     17  0x00000011 (const dword)  (usage 3)
BACKLITE                               6  0x00000006 (const dword)  (not used)
BAUD_110                               0  0x00000000 (const dword)  (not used)
BAUD_115200                           13  0x0000000d (const dword)  (usage 3)
BAUD_1200                              3  0x00000003 (const dword)  (not used)
BAUD_128000                           14  0x0000000e (const dword)  (not used)
BAUD_14400                             7  0x00000007 (const dword)  (not used)
BAUD_19200                             8  0x00000008 (const dword)  (not used)
BAUD_2400                              4  0x00000004 (const dword)  (not used)
BAUD_256000                           15  0x0000000f (const dword)  (not used)
BAUD_300                               1  0x00000001 (const dword)  (not used)
BAUD_300000                           16  0x00000010 (const dword)  (not used)
BAUD_31250                             9  0x00000009 (const dword)  (not used)
BAUD_375000                           17  0x00000011 (const dword)  (not used)
BAUD_38400                            10  0x0000000a (const dword)  (not used)
BAUD_4800                              5  0x00000005 (const dword)  (not used)
BAUD_500000                           18  0x00000012 (const dword)  (not used)
BAUD_56000                            11  0x0000000b (const dword)  (not used)
BAUD_57600                            12  0x0000000c (const dword)  (not used)
BAUD_600                               2  0x00000002 (const dword)  (not used)
BAUD_600000                           19  0x00000013 (const dword)  (not used)
BAUD_9600                              6  0x00000006 (const dword)  (not used)
BEIGE                              63419  0x0000f7bb (const dword)  (not used)
BEVEL_SHADOW                          29  0x0000001d (const dword)  (not used)
BEVEL_WIDTH                           28  0x0000001c (const dword)  (not used)
BGIMAGE                               32  0x00000020 (const dword)  (usage 6)
BIN                                    2  0x00000002 (const dword)  (not used)
BIN1                                 258  0x00000102 (const dword)  (not used)
BIN10                               2562  0x00000a02 (const dword)  (not used)
BIN10Z                              6658  0x00001a02 (const dword)  (not used)
BIN10ZB                            10754  0x00002a02 (const dword)  (not used)
BIN11                               2818  0x00000b02 (const dword)  (not used)
BIN11Z                              6914  0x00001b02 (const dword)  (not used)
BIN11ZB                            11010  0x00002b02 (const dword)  (not used)
BIN12                               3074  0x00000c02 (const dword)  (not used)
BIN12Z                              7170  0x00001c02 (const dword)  (not used)
BIN12ZB                            11266  0x00002c02 (const dword)  (not used)
BIN13                               3330  0x00000d02 (const dword)  (not used)
BIN13Z                              7426  0x00001d02 (const dword)  (not used)
BIN13ZB                            11522  0x00002d02 (const dword)  (not used)
BIN14                               3586  0x00000e02 (const dword)  (not used)
BIN14Z                              7682  0x00001e02 (const dword)  (not used)
BIN14ZB                            11778  0x00002e02 (const dword)  (not used)
BIN15                               3842  0x00000f02 (const dword)  (not used)
BIN15Z                              7938  0x00001f02 (const dword)  (not used)
BIN15ZB                            12034  0x00002f02 (const dword)  (not used)
BIN16                                  2  0x00000002 (const dword)  (not used)
BIN16Z                              4098  0x00001002 (const dword)  (not used)
BIN16ZB                             8194  0x00002002 (const dword)  (not used)
BIN1Z                               4354  0x00001102 (const dword)  (not used)
BIN1ZB                              8450  0x00002102 (const dword)  (not used)
BIN2                                 514  0x00000202 (const dword)  (not used)
BIN2Z                               4610  0x00001202 (const dword)  (not used)
BIN2ZB                              8706  0x00002202 (const dword)  (not used)
BIN3                                 770  0x00000302 (const dword)  (not used)
BIN3Z                               4866  0x00001302 (const dword)  (not used)
BIN3ZB                              8962  0x00002302 (const dword)  (not used)
BIN4                                1026  0x00000402 (const dword)  (not used)
BIN4Z                               5122  0x00001402 (const dword)  (not used)
BIN4ZB                              9218  0x00002402 (const dword)  (not used)
BIN5                                1282  0x00000502 (const dword)  (not used)
BIN5Z                               5378  0x00001502 (const dword)  (not used)
BIN5ZB                              9474  0x00002502 (const dword)  (not used)
BIN6                                1538  0x00000602 (const dword)  (not used)
BIN6Z                               5634  0x00001602 (const dword)  (not used)
BIN6ZB                              9730  0x00002602 (const dword)  (not used)
BIN7                                1794  0x00000702 (const dword)  (not used)
BIN7Z                               5890  0x00001702 (const dword)  (not used)
BIN7ZB                              9986  0x00002702 (const dword)  (not used)
BIN8                                2050  0x00000802 (const dword)  (not used)
BIN8Z                               6146  0x00001802 (const dword)  (not used)
BIN8ZB                             10242  0x00002802 (const dword)  (not used)
BIN9                                2306  0x00000902 (const dword)  (not used)
BIN9Z                               6402  0x00001902 (const dword)  (not used)
BIN9ZB                             10498  0x00002902 (const dword)  (not used)
BINZ                                4098  0x00001002 (const dword)  (not used)
BINZB                               8194  0x00002002 (const dword)  (not used)
BISQUE                             65336  0x0000ff38 (const dword)  (not used)
BLACK                                  0  0x00000000 (const dword)  (usage 24)
BLANCHEDALMOND                     65369  0x0000ff59 (const dword)  (not used)
BLUE                                  31  0x0000001f (const dword)  (not used)
BLUEVIOLET                         35164  0x0000895c (const dword)  (not used)
BOLD                                  16  0x00000010 (const dword)  (not used)
BOTTOM_POS                             5  0x00000005 (const dword)  (not used)
BROWN                              41285  0x0000a145 (const dword)  (not used)
BURLYWOOD                          56784  0x0000ddd0 (const dword)  (not used)
BUS_0                                  8  0x00000008 (const dword)  (not used)
BUS_1                                  9  0x00000009 (const dword)  (not used)
BUS_2                                 10  0x0000000a (const dword)  (not used)
BUS_3                                 11  0x0000000b (const dword)  (not used)
BUS_4                                 12  0x0000000c (const dword)  (not used)
BUS_5                                 13  0x0000000d (const dword)  (not used)
BUS_6                                 14  0x0000000e (const dword)  (not used)
BUS_7                                 15  0x0000000f (const dword)  (not used)
bus_In                               -45  0xffffffd3 (PmmC func) args[0] r=1  (not used)
bus_Out                              -46  0xffffffd2 (PmmC func) args[1] r=0  (not used)
BUS_RD_PIN                             4  0x00000004 (const dword)  (not used)
bus_Read                             -49  0xffffffcf (PmmC func) args[0] r=1  (not used)
bus_Set                              -47  0xffffffd1 (PmmC func) args[1] r=0  (not used)
BUS_WR_PIN                             5  0x00000005 (const dword)  (not used)
bus_Write                            -48  0xffffffd0 (PmmC func) args[1] r=0  (not used)
BUTTON_DOWN                            0  0x00000000 (const dword)  (not used)
BUTTON_UP                              1  0x00000001 (const dword)  (not used)
ByteSwap                            -215  0xffffff29 (PmmC func) args[1] r=1  (not used)
c4DButton                         UNRESOLVED  (not used)
C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS    2709  0x00000a95 (const ??? 0)  (not used)
CADETBLUE                          23796  0x00005cf4 (const dword)  (not used)
cAniButton                        UNRESOLVED  (not used)
cColorPicker                      UNRESOLVED  (not used)
cDipswitch                        UNRESOLVED  (not used)
charheight                          -159  0xffffff61 (PmmC func) args[1] r=1  (not used)
CHARTREUSE                         32736  0x00007fe0 (const dword)  (not used)
charwidth                           -158  0xffffff62 (PmmC func) args[1] r=1  (not used)
CHOCOLATE                          54083  0x0000d343 (const dword)  (not used)
CHR                                  129  0x00000081 (const dword)  (not used)
CKMODE_0                               0  0x00000000 (const dword)  (not used)
CKMODE_1                               1  0x00000001 (const dword)  (not used)
CKMODE_2                               2  0x00000002 (const dword)  (not used)
CKMODE_3                               3  0x00000003 (const dword)  (not used)
cKnob                             UNRESOLVED  (not used)
CLIPPING                              19  0x00000013 (const dword)  (not used)
cmd                                  214  0x000000d6 (mem) word[80] (global)  (usage 78)
CMDLenMAX                             80  0x00000050 (const dword)  (usage 9)
COLOUR16                               0  0x00000000 (const dword)  (not used)
COLOUR8                                1  0x00000001 (const dword)  (not used)
COLOUR_MODE                           27  0x0000001b (const dword)  (not used)
COM0                               63492  0x0000f804 (const dword)  (not used)
COM1                               63496  0x0000f808 (const dword)  (not used)
com1_Count                          -132  0xffffff7c (PmmC func) args[0] r=1  (not used)
com1_Error                          -134  0xffffff7a (PmmC func) args[0] r=1  (not used)
com1_Full                           -133  0xffffff7b (PmmC func) args[0] r=1  (not used)
com1_Init                           -130  0xffffff7e (PmmC func) args[3] r=0  (not used)
com1_Reset                          -131  0xffffff7d (PmmC func) args[0] r=0  (not used)
com1_Sync                           -135  0xffffff79 (PmmC func) args[0] r=1  (not used)
com1_TXbuffer                       -136  0xffffff78 (PmmC func) args[3] r=0  (not used)
com1_TXbufferHold                   -139  0xffffff75 (PmmC func) args[1] r=1  (not used)
com1_TXcount                        -137  0xffffff77 (PmmC func) args[0] r=1  (not used)
com1_TXemptyEvent                   -138  0xffffff76 (PmmC func) args[1] r=1  (not used)
com_Count                           -122  0xffffff86 (PmmC func) args[0] r=1  (usage 3)
com_Error                           -124  0xffffff84 (PmmC func) args[0] r=1  (not used)
com_Full                            -123  0xffffff85 (PmmC func) args[0] r=1  (not used)
com_Init                            -120  0xffffff88 (PmmC func) args[3] r=0  (usage 3)
com_Reset                           -121  0xffffff87 (PmmC func) args[0] r=0  (not used)
com_SetBaud                         -142  0xffffff72 (PmmC func) args[2] r=1  (not used)
com_Sync                            -125  0xffffff83 (PmmC func) args[0] r=1  (not used)
com_TXbuffer                        -126  0xffffff82 (PmmC func) args[3] r=0  (usage 3)
com_TXbufferHold                    -129  0xffffff7f (PmmC func) args[1] r=1  (not used)
com_TXcount                         -127  0xffffff81 (PmmC func) args[0] r=1  (not used)
com_TXemptyEvent                    -128  0xffffff80 (PmmC func) args[1] r=1  (not used)
comRX                                134  0x00000086 (mem) word[40] (global)  (usage 3)
CONTRAST                              25  0x00000019 (const dword)  (not used)
CORAL                              64490  0x0000fbea (const dword)  (not used)
CORNFLOWERBLUE                     25789  0x000064bd (const dword)  (not used)
CORNSILK                           65499  0x0000ffdb (const dword)  (not used)
COS                                  -18  0xffffffee (PmmC func) args[1] r=1  (not used)
CRIMSON                            55463  0x0000d8a7 (const dword)  (not used)
cRockerswitch                     UNRESOLVED  (not used)
cRotaryswitch                     UNRESOLVED  (not used)
cs                                   374  0x00000176 (mem) word (global)  (usage 42)
cSlider                           UNRESOLVED  (not used)
cTrackbar                         UNRESOLVED  (not used)
curform                              120  0x00000078 (mem) word (global)  (usage 45)
cUserButton                       UNRESOLVED  (not used)
cWinbutton                        UNRESOLVED  (not used)
CY                                  -285  0xfffffee3 (PmmC func) args[0] r=1  (not used)
CYAN                                2047  0x000007ff (const dword)  (not used)
DARKBLUE                              17  0x00000011 (const dword)  (not used)
DARKCYAN                            1105  0x00000451 (const dword)  (not used)
DARKGOLDENROD                      48161  0x0000bc21 (const dword)  (not used)
DARKGRAY                           44373  0x0000ad55 (const dword)  (not used)
DARKGREEN                            800  0x00000320 (const dword)  (not used)
DARKKHAKI                          48557  0x0000bdad (const dword)  (not used)
DARKMAGENTA                        34833  0x00008811 (const dword)  (not used)
DARKOLIVEGREEN                     21317  0x00005345 (const dword)  (not used)
DARKORANGE                         64608  0x0000fc60 (const dword)  (not used)
DARKORCHID                         39321  0x00009999 (const dword)  (not used)
DARKRED                            34816  0x00008800 (const dword)  (not used)
DARKSALMON                         60591  0x0000ecaf (const dword)  (not used)
DARKSEAGREEN                       36337  0x00008df1 (const dword)  (not used)
DARKSLATEBLUE                      18929  0x000049f1 (const dword)  (not used)
DARKSLATEGRAY                      10857  0x00002a69 (const dword)  (not used)
DARKTURQUOISE                       1658  0x0000067a (const dword)  (not used)
DARKVIOLET                         36890  0x0000901a (const dword)  (not used)
DEC                                 1290  0x0000050a (const dword)  (not used)
DEC1                                 266  0x0000010a (const dword)  (not used)
DEC1Z                               4362  0x0000110a (const dword)  (not used)
DEC1ZB                              8458  0x0000210a (const dword)  (not used)
DEC2                                 522  0x0000020a (const dword)  (not used)
DEC2Z                               4618  0x0000120a (const dword)  (not used)
DEC2ZB                              8714  0x0000220a (const dword)  (not used)
DEC3                                 778  0x0000030a (const dword)  (not used)
DEC3Z                               4874  0x0000130a (const dword)  (not used)
DEC3ZB                              8970  0x0000230a (const dword)  (not used)
DEC4                                1034  0x0000040a (const dword)  (not used)
DEC4Z                               5130  0x0000140a (const dword)  (not used)
DEC4ZB                              9226  0x0000240a (const dword)  (not used)
DEC5                                1290  0x0000050a (const dword)  (not used)
DEC5Z                               5386  0x0000150a (const dword)  (not used)
DEC5ZB                              9482  0x0000250a (const dword)  (not used)
DECZ                                5386  0x0000150a (const dword)  (not used)
DECZB                               9482  0x0000250a (const dword)  (not used)
DEEPPINK                           63666  0x0000f8b2 (const dword)  (not used)
DEEPSKYBLUE                         1535  0x000005ff (const dword)  (not used)
DIMGRAY                            27469  0x00006b4d (const dword)  (not used)
DISABLE                                0  0x00000000 (const dword)  (not used)
disk                                   0  0x00000000 (mem) word (global)  (usage 6)
DISK_BUF                              15  0x0000000f (const dword)  (not used)
DISK_DATA_HI                           7  0x00000007 (const dword)  (not used)
DISK_DATA_LO                           6  0x00000006 (const dword)  (not used)
DISK_FAT_HI                            3  0x00000003 (const dword)  (not used)
DISK_FAT_LO                            2  0x00000002 (const dword)  (not used)
DISK_FATCOPIES                        12  0x0000000c (const dword)  (not used)
DISK_FATSIZE                          11  0x0000000b (const dword)  (not used)
DISK_FIRST_SECT_HI                     1  0x00000001 (const dword)  (not used)
DISK_FIRST_SECT_LO                     0  0x00000000 (const dword)  (not used)
DISK_MAXCLUS_HI                        9  0x00000009 (const dword)  (not used)
DISK_MAXCLUS_LO                        8  0x00000008 (const dword)  (not used)
DISK_MAXROOT                          10  0x0000000a (const dword)  (not used)
DISK_ROOT_HI                           5  0x00000005 (const dword)  (not used)
DISK_ROOT_LO                           4  0x00000004 (const dword)  (not used)
DISK_SECT_PER_CLUS                    13  0x0000000d (const dword)  (not used)
DISK_TYPE                             14  0x0000000e (const dword)  (not used)
disp_Disconnect                     -293  0xfffffedb (PmmC func) args[0] r=0  (not used)
disp_Init                           -143  0xffffff71 (PmmC func) args[0] r=0  (not used)
disp_ReadWord                       -149  0xffffff6b (PmmC func) args[0] r=1  (not used)
disp_setGRAM                        -145  0xffffff6f (PmmC func) args[4] r=0  (not used)
disp_SetReg                         -144  0xffffff70 (PmmC func) args[2] r=0  (not used)
disp_Sync                           -284  0xfffffee4 (PmmC func) args[1] r=0  (not used)
disp_WrGRAM                         -146  0xffffff6e (PmmC func) args[1] r=0  (not used)
disp_WriteControl                   -147  0xffffff6d (PmmC func) args[1] r=0  (not used)
disp_WriteWord                      -148  0xffffff6c (PmmC func) args[1] r=0  (not used)
DISPLAY_PAGE                          33  0x00000021 (const dword)  (not used)
DODGERBLUE                          7327  0x00001c9f (const dword)  (not used)
DoGFXObjects                        5196  0x0000144c (User func) args[0] r=0  (usage 6)
DOWN                                   0  0x00000000 (const dword)  (not used)
DSK                                63490  0x0000f802 (const dword)  (not used)
ENABLE                                 1  0x00000001 (const dword)  (not used)
EVE_SP                              -282  0xfffffee6 (PmmC func) args[0] r=1  (not used)
EVE_SSIZE                           -283  0xfffffee5 (PmmC func) args[0] r=1  (not used)
FE_CANNOT_INIT                        15  0x0000000f (const dword)  (not used)
FE_CANNOT_READ_MBR                    16  0x00000010 (const dword)  (not used)
FE_DIR_FULL                           12  0x0000000c (const dword)  (not used)
FE_DISK_FULL                          13  0x0000000d (const dword)  (not used)
FE_DISK_NOT_MNTD                       6  0x00000006 (const dword)  (not used)
FE_EOF                                10  0x0000000a (const dword)  (not used)
FE_FAT_EOF                             9  0x00000009 (const dword)  (not used)
FE_FILE_NOT_FOUND                      7  0x00000007 (const dword)  (not used)
FE_FILE_OVERWRITE                     14  0x0000000e (const dword)  (not used)
FE_FILE_TIMEOUT                       26  0x0000001a (const dword)  (not used)
FE_FIND_ERROR                         19  0x00000013 (const dword)  (not used)
FE_IDE_ERROR                           1  0x00000001 (const dword)  (not used)
FE_INVALID_BR                          5  0x00000005 (const dword)  (not used)
FE_INVALID_CLUSTER                    11  0x0000000b (const dword)  (not used)
FE_INVALID_FILE                        8  0x00000008 (const dword)  (not used)
FE_INVALID_FNAME                      20  0x00000014 (const dword)  (not used)
FE_INVALID_MBR                         4  0x00000004 (const dword)  (not used)
FE_INVALID_MEDIA                      21  0x00000015 (const dword)  (not used)
FE_INVALID_MODE                       18  0x00000012 (const dword)  (not used)
FE_MALLOC_FAILED                      17  0x00000011 (const dword)  (not used)
FE_NOT_PRESENT                         2  0x00000002 (const dword)  (not used)
FE_OK                                  0  0x00000000 (const dword)  (not used)
FE_PARTITION_TYPE                      3  0x00000003 (const dword)  (not used)
FE_SECTOR_READ_FAIL                   22  0x00000016 (const dword)  (not used)
FE_SECTOR_WRITE_FAIL                  23  0x00000017 (const dword)  (not used)
FILE_ATTRIBUTES                       18  0x00000012 (const dword)  (not used)
FILE_BUFFER                           22  0x00000016 (const dword)  (not used)
file_Close                          -232  0xffffff18 (PmmC func) args[1] r=1  (not used)
file_Count                          -226  0xffffff1e (PmmC func) args[1] r=1  (not used)
FILE_CURR_CLUSTER                      1  0x00000001 (const dword)  (not used)
FILE_CURR_SECTOR                       2  0x00000002 (const dword)  (not used)
FILE_CURR_SECTOR_POS                   3  0x00000003 (const dword)  (not used)
FILE_CURR_SECTOR_TOP                   4  0x00000004 (const dword)  (not used)
FILE_DATE                             10  0x0000000a (const dword)  (not used)
file_Dir                            -227  0xffffff1d (PmmC func) args[1] r=1  (not used)
FILE_DISK                             21  0x00000015 (const dword)  (not used)
FILE_ENTRY                            20  0x00000014 (const dword)  (not used)
file_Erase                          -247  0xffffff09 (PmmC func) args[1] r=1  (not used)
file_Error                          -225  0xffffff1f (PmmC func) args[0] r=1  (not used)
file_Exec                           -251  0xffffff05 (PmmC func) args[2] r=1  (not used)
file_Exists                         -230  0xffffff1a (PmmC func) args[1] r=1  (not used)
file_FindFirst                      -228  0xffffff1c (PmmC func) args[1] r=1  (not used)
file_FindNext                       -229  0xffffff1b (PmmC func) args[0] r=1  (not used)
FILE_FIRST_CLUSTER                     0  0x00000000 (const dword)  (not used)
file_GetC                           -242  0xffffff0e (PmmC func) args[1] r=1  (usage 3)
file_GetS                           -246  0xffffff0a (PmmC func) args[3] r=1  (not used)
file_GetW                           -244  0xffffff0c (PmmC func) args[1] r=1  (usage 3)
file_Image                          -239  0xffffff11 (PmmC func) args[3] r=1  (not used)
file_Index                          -235  0xffffff15 (PmmC func) args[4] r=1  (not used)
file_LoadFunction                   -249  0xffffff07 (PmmC func) args[1] r=1  (not used)
file_LoadImageControl               -252  0xffffff04 (PmmC func) args[3] r=1  (usage 15)
FILE_MODE                             17  0x00000011 (const dword)  (not used)
file_Mount                          -253  0xffffff03 (PmmC func) args[0] r=1  (usage 6)
FILE_NAME                             11  0x0000000b (const dword)  (not used)
file_Open                           -231  0xffffff19 (PmmC func) args[2] r=1  (usage 3)
FILE_PAGEFLAG                         19  0x00000013 (const dword)  (not used)
file_PlayWAV                        -255  0xffffff01 (PmmC func) args[1] r=1  (usage 3)
file_PutC                           -241  0xffffff0f (PmmC func) args[2] r=1  (not used)
file_PutS                           -245  0xffffff0b (PmmC func) args[2] r=1  (not used)
file_PutW                           -243  0xffffff0d (PmmC func) args[2] r=1  (not used)
file_Read                           -233  0xffffff17 (PmmC func) args[3] r=1  (not used)
file_Rewind                         -248  0xffffff08 (PmmC func) args[1] r=1  (not used)
file_Run                            -250  0xffffff06 (PmmC func) args[2] r=1  (not used)
file_ScreenCapture                  -240  0xffffff10 (PmmC func) args[5] r=1  (not used)
file_Seek                           -234  0xffffff16 (PmmC func) args[3] r=1  (usage 3)
FILE_SEEK_POS_HI                       6  0x00000006 (const dword)  (not used)
FILE_SEEK_POS_LO                       5  0x00000005 (const dword)  (not used)
file_Size                           -238  0xffffff12 (PmmC func) args[3] r=1  (not used)
FILE_SIZE_HI                           8  0x00000008 (const dword)  (not used)
FILE_SIZE_LO                           7  0x00000007 (const dword)  (not used)
file_Tell                           -236  0xffffff14 (PmmC func) args[3] r=1  (not used)
FILE_TIME                              9  0x00000009 (const dword)  (not used)
file_Unmount                        -254  0xffffff02 (PmmC func) args[0] r=0  (not used)
file_Write                          -237  0xffffff13 (PmmC func) args[3] r=1  (not used)
FIREBRICK                          45316  0x0000b104 (const dword)  (not used)
flash_BlockErase                    -157  0xffffff63 (PmmC func) args[1] r=1  (not used)
flash_BulkErase                     -156  0xffffff64 (PmmC func) args[0] r=0  (not used)
flash_ID                            -155  0xffffff65 (PmmC func) args[0] r=1  (not used)
flash_SIG                           -154  0xffffff66 (PmmC func) args[0] r=1  (not used)
FLORALWHITE                        65502  0x0000ffde (const dword)  (not used)
FONT1                                  0  0x00000000 (const dword)  (usage 3)
FONT2                                  1  0x00000001 (const dword)  (not used)
FONT3                                  2  0x00000002 (const dword)  (usage 6)
FONT_ID                                2  0x00000002 (const dword)  (not used)
FONT_SIZE                              2  0x00000002 (const dword)  (not used)
FORESTGREEN                         9284  0x00002444 (const dword)  (not used)
formBGcol                           2546  0x000009f2formBGcol                           2546  0x000009f2 (mem) word[8] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 8)
formBGcol                         UNRESOLVED  (usage 4)
formenidx                            124  0x0000007cformenidx                            124  0x0000007c (mem) word[8] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 6)
formstidx                            108  0x0000006cformstidx                            108  0x0000006c (mem) word[8] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 7)
formstidx                         UNRESOLVED  (usage 2)
FRAME_DELAY                           22  0x00000016 (const dword)  (not used)
FUCHSIA                            63519  0x0000f81f (const dword)  (not used)
GAINSBORO                          57083  0x0000defb (const dword)  (not used)
gbutton                           UNRESOLVED  (not used)
GFX                                63489  0x0000f801 (const dword)  (not used)
gfx_332to565                         -85  0xffffffab (PmmC func) args[1] r=1  (not used)
gfx_BevelShadow                     -104  0xffffff98 (PmmC func) args[1] r=1  (not used)
gfx_BevelWidth                      -103  0xffffff99 (PmmC func) args[1] r=1  (not used)
gfx_BGcolour                         -92  0xffffffa4 (PmmC func) args[1] r=1  (not used)
GFX_BOTTOM                            51  0x00000033 (const dword)  (not used)
gfx_BoxTo                            -74  0xffffffb6 (PmmC func) args[2] r=0  (not used)
gfx_Bullet                           -71  0xffffffb9 (PmmC func) args[1] r=0  (not used)
gfx_Button                           -80  0xffffffb0 (PmmC func) args[9] r=0  (not used)
GFX_BUTTON_BACKGROUND                 64  0x00000040 (const dword)  (not used)
GFX_BUTTON_FOREGROUND                 63  0x0000003f (const dword)  (not used)
GFX_BUTTON_MODE                       65  0x00000041 (const dword)  (not used)
gfx_ChangeColour                     -76  0xffffffb4 (PmmC func) args[2] r=0  (not used)
gfx_Circle                           -61  0xffffffc3 (PmmC func) args[4] r=0  (not used)
gfx_CircleFilled                     -62  0xffffffc2 (PmmC func) args[4] r=0  (not used)
GFX_CLIP_BOTTOM                      114  0x00000072 (const dword)  (not used)
GFX_CLIP_BOTTOM_VAL                  110  0x0000006e (const dword)  (not used)
GFX_CLIP_LEFT                        111  0x0000006f (const dword)  (not used)
GFX_CLIP_LEFT_VAL                    107  0x0000006b (const dword)  (not used)
GFX_CLIP_RIGHT                       113  0x00000071 (const dword)  (not used)
GFX_CLIP_RIGHT_VAL                   109  0x0000006d (const dword)  (not used)
GFX_CLIP_TOP                         112  0x00000070 (const dword)  (not used)
GFX_CLIP_TOP_VAL                     108  0x0000006c (const dword)  (not used)
gfx_Clipping                         -94  0xffffffa2 (PmmC func) args[1] r=0  (usage 6)
gfx_ClipWindow                       -75  0xffffffb5 (PmmC func) args[4] r=0  (usage 3)
gfx_Cls                              -51  0xffffffcd (PmmC func) args[0] r=0  (usage 6)
gfx_ColourMode                      -102  0xffffff9a (PmmC func) args[1] r=1  (not used)
gfx_Contrast                        -100  0xffffff9c (PmmC func) args[1] r=1  (usage 3)
gfx_Dot                              -70  0xffffffba (PmmC func) args[0] r=0  (not used)
gfx_Ellipse                          -78  0xffffffb2 (PmmC func) args[5] r=0  (not used)
gfx_EllipseFilled                    -79  0xffffffb1 (PmmC func) args[5] r=0  (not used)
gfx_FrameDelay                       -97  0xffffff9f (PmmC func) args[1] r=1  (not used)
gfx_Get                              -90  0xffffffa6 (PmmC func) args[1] r=1  (not used)
gfx_GetPixel                         -64  0xffffffc0 (PmmC func) args[2] r=1  (not used)
GFX_HILIGHT_BACKGROUND                61  0x0000003d (const dword)  (not used)
GFX_HILIGHT_FOREGROUND                62  0x0000003e (const dword)  (not used)
GFX_HILITE_LINE                       58  0x0000003a (const dword)  (not used)
gfx_Hline                            -57  0xffffffc7 (PmmC func) args[4] r=1  (not used)
gfx_IncX                             -72  0xffffffb8 (PmmC func) args[0] r=1  (not used)
gfx_IncY                             -73  0xffffffb7 (PmmC func) args[0] r=1  (not used)
GFX_LAST_CHAR_HEIGHT                 120  0x00000078 (const dword)  (not used)
GFX_LAST_CHAR_WIDTH                  119  0x00000077 (const dword)  (not used)
GFX_LAST_SELECTION                    60  0x0000003c (const dword)  (not used)
GFX_LAST_STR_HEIGHT                  122  0x0000007a (const dword)  (not used)
GFX_LAST_STR_WIDTH                   121  0x00000079 (const dword)  (not used)
GFX_LEFT                              48  0x00000030 (const dword)  (not used)
GFX_LEFT_GUTTER_WIDTH                 68  0x00000044 (const dword)  (not used)
gfx_Line                             -56  0xffffffc8 (PmmC func) args[5] r=0  (not used)
GFX_LINE_COUNT                        59  0x0000003b (const dword)  (not used)
gfx_LinePattern                     -101  0xffffff9b (PmmC func) args[1] r=1  (usage 3)
gfx_LineRel                          -55  0xffffffc9 (PmmC func) args[2] r=0  (not used)
gfx_LineTo                           -54  0xffffffca (PmmC func) args[2] r=0  (not used)
gfx_MoveRel                          -53  0xffffffcb (PmmC func) args[2] r=0  (not used)
gfx_MoveTo                           -52  0xffffffcc (PmmC func) args[2] r=0  (usage 6)
gfx_ObjectColour                     -93  0xffffffa3 (PmmC func) args[1] r=1  (not used)
gfx_Orbit                            -67  0xffffffbd (PmmC func) args[2] r=0  (not used)
gfx_OrbitInit                        -66  0xffffffbe (PmmC func) args[2] r=0  (not used)
gfx_Origin                           -89  0xffffffa7 (PmmC func) args[2] r=0  (not used)
gfx_OutlineColour                    -99  0xffffff9d (PmmC func) args[1] r=1  (usage 6)
gfx_Panel                            -81  0xffffffaf (PmmC func) args[6] r=0  (not used)
gfx_PenSize                          -91  0xffffffa5 (PmmC func) args[1] r=1  (not used)
GFX_PIXEL_SHIFT                       70  0x00000046 (const dword)  (not used)
gfx_Polygon                          -69  0xffffffbb (PmmC func) args[4] r=0  (not used)
gfx_PolygonFilled                    -88  0xffffffa8 (PmmC func) args[4] r=0  (not used)
gfx_Polyline                         -68  0xffffffbc (PmmC func) args[4] r=0  (not used)
gfx_PutPixel                         -63  0xffffffc1 (PmmC func) args[3] r=0  (not used)
GFX_RECT_X1                           71  0x00000047 (const dword)  (not used)
GFX_RECT_X2                           73  0x00000049 (const dword)  (not used)
GFX_RECT_Y1                           72  0x00000048 (const dword)  (not used)
GFX_RECT_Y2                           74  0x0000004a (const dword)  (not used)
gfx_Rectangle                        -59  0xffffffc5 (PmmC func) args[5] r=0  (usage 3)
gfx_RectangleFilled                  -60  0xffffffc4 (PmmC func) args[5] r=0  (usage 6)
gfx_RGBto565                         -84  0xffffffac (PmmC func) args[3] r=1  (not used)
GFX_RIGHT                             50  0x00000032 (const dword)  (not used)
GFX_RIGHT_GUTTER_WIDTH                69  0x00000045 (const dword)  (not used)
gfx_ScreenCopyPaste                  -83  0xffffffad (PmmC func) args[6] r=0  (not used)
gfx_ScreenMode                       -98  0xffffff9e (PmmC func) args[1] r=1  (usage 3)
gfx_Selection                        -86  0xffffffaa (PmmC func) args[3] r=0  (not used)
gfx_Set                              -50  0xffffffce (PmmC func) args[2] r=0  (usage 3)
gfx_SetClipRegion                    -77  0xffffffb3 (PmmC func) args[0] r=0  (not used)
gfx_Slider                           -82  0xffffffae (PmmC func) args[8] r=1  (not used)
GFX_STATUSBAR_HEIGHT                  67  0x00000043 (const dword)  (not used)
GFX_THUMB_BORDER_DARK                 76  0x0000004c (const dword)  (not used)
GFX_THUMB_BORDER_LIGHT                77  0x0000004d (const dword)  (not used)
GFX_THUMB_PERCENT                     75  0x0000004b (const dword)  (not used)
GFX_TOOLBAR_HEIGHT                    66  0x00000042 (const dword)  (not used)
GFX_TOP                               49  0x00000031 (const dword)  (not used)
GFX_TOUCH_REGION_X1                  103  0x00000067 (const dword)  (not used)
GFX_TOUCH_REGION_X2                  105  0x00000069 (const dword)  (not used)
GFX_TOUCH_REGION_Y1                  104  0x00000068 (const dword)  (not used)
GFX_TOUCH_REGION_Y2                  106  0x0000006a (const dword)  (not used)
gfx_Transparency                     -96  0xffffffa0 (PmmC func) args[1] r=1  (not used)
gfx_TransparentColour                -95  0xffffffa1 (PmmC func) args[1] r=1  (not used)
gfx_Triangle                         -65  0xffffffbf (PmmC func) args[7] r=0  (not used)
gfx_TriangleFilled                   -87  0xffffffa9 (PmmC func) args[7] r=0  (not used)
gfx_Vline                            -58  0xffffffc6 (PmmC func) args[4] r=1  (not used)
GFX_X1                                52  0x00000034 (const dword)  (not used)
GFX_X2                                54  0x00000036 (const dword)  (not used)
GFX_X_ORG                             56  0x00000038 (const dword)  (not used)
GFX_XMAX                              46  0x0000002e (const dword)  (not used)
gfx_Xorigin                         -105  0xffffff97 (PmmC func) args[1] r=1  (not used)
GFX_Y1                                53  0x00000035 (const dword)  (not used)
GFX_Y2                                55  0x00000037 (const dword)  (not used)
GFX_Y_ORG                             57  0x00000039 (const dword)  (not used)
GFX_YMAX                              47  0x0000002f (const dword)  (not used)
gfx_Yorigin                         -106  0xffffff96 (PmmC func) args[1] r=1  (not used)
GHOSTWHITE                         65503  0x0000ffdf (const dword)  (not used)
GOLD                               65184  0x0000fea0 (const dword)  (not used)
GOLDENROD                          56612  0x0000dd24 (const dword)  (not used)
GRAM_PIXEL_COUNT_HI                  116  0x00000074 (const dword)  (not used)
GRAM_PIXEL_COUNT_LO                  115  0x00000073 (const dword)  (not used)
GRAY                               33808  0x00008410 (const dword)  (not used)
GREEN                               1024  0x00000400 (const dword)  (not used)
GREENYELLOW                        45029  0x0000afe5 (const dword)  (not used)
HEX                                 5136  0x00001410 (const dword)  (not used)
HEX1                                4368  0x00001110 (const dword)  (not used)
HEX1Z                                272  0x00000110 (const dword)  (not used)
HEX1ZB                              8464  0x00002110 (const dword)  (not used)
HEX2                                4624  0x00001210 (const dword)  (not used)
HEX2Z                                528  0x00000210 (const dword)  (not used)
HEX2ZB                              8720  0x00002210 (const dword)  (not used)
HEX3                                4880  0x00001310 (const dword)  (not used)
HEX3Z                                784  0x00000310 (const dword)  (not used)
HEX3ZB                              8976  0x00002310 (const dword)  (not used)
HEX4                                5136  0x00001410 (const dword)  (not used)
HEX4Z                               1040  0x00000410 (const dword)  (not used)
HEX4ZB                              9232  0x00002410 (const dword)  (not used)
HEXZ                                1040  0x00000410 (const dword)  (not used)
HEXZB                               9232  0x00002410 (const dword)  (not used)
hFonts                                 4  0x00000004 (mem) word[6] (global)  (usage 21)
HI                                     1  0x00000001 (const dword)  (not used)
HIbyte                              -214  0xffffff2a (PmmC func) args[1] r=1  (not used)
HIDE                                   2  0x00000002 (const dword)  (not used)
hndl                                   2  0x00000002 (mem) word (global)  (usage 108)
HONEYDEW                           63486  0x0000f7fe (const dword)  (not used)
HOTPINK                            64342  0x0000fb56 (const dword)  (not used)
hstrings                              50  0x00000032 (mem) word (global)  (usage 12)
I2C                                63520  0x0000f820 (const dword)  (not used)
I2C_Ack                             -169  0xffffff57 (PmmC func) args[0] r=0  (not used)
I2C_AckPoll                         -172  0xffffff54 (PmmC func) args[1] r=1  (not used)
I2C_AckStatus                       -171  0xffffff55 (PmmC func) args[0] r=0  (not used)
I2C_Close                           -163  0xffffff5d (PmmC func) args[0] r=0  (not used)
I2C_FAST                               2  0x00000002 (const dword)  (not used)
I2C_Getn                            -175  0xffffff51 (PmmC func) args[2] r=1  (not used)
I2C_Gets                            -174  0xffffff52 (PmmC func) args[2] r=1  (not used)
I2C_Idle                            -173  0xffffff53 (PmmC func) args[0] r=0  (not used)
I2C_MED                                1  0x00000001 (const dword)  (not used)
I2C_Nack                            -170  0xffffff56 (PmmC func) args[0] r=0  (not used)
I2C_Open                            -162  0xffffff5e (PmmC func) args[1] r=0  (not used)
I2C_Putn                            -177  0xffffff4f (PmmC func) args[2] r=1  (not used)
I2C_Puts                            -176  0xffffff50 (PmmC func) args[1] r=1  (not used)
I2C_Read                            -167  0xffffff59 (PmmC func) args[0] r=1  (not used)
I2C_Restart                         -166  0xffffff5a (PmmC func) args[0] r=1  (not used)
I2C_SLOW                               0  0x00000000 (const dword)  (not used)
I2C_Start                           -164  0xffffff5c (PmmC func) args[0] r=1  (not used)
I2C_Stop                            -165  0xffffff5b (PmmC func) args[0] r=1  (not used)
I2C_Write                           -168  0xffffff58 (PmmC func) args[1] r=1  (not used)
i4Dbutton0                            13  0x0000000d (const ??? 0)  (usage 3)
i4Dbutton1                            14  0x0000000e (const ??? 0)  (usage 3)
i4Dbutton10                           46  0x0000002e (const ??? 0)  (usage 3)
i4Dbutton11                           47  0x0000002f (const ??? 0)  (usage 3)
i4Dbutton12                           48  0x00000030 (const ??? 0)  (usage 3)
i4Dbutton13                          102  0x00000066 (const ??? 0)  (usage 3)
i4Dbutton15                           84  0x00000054 (const ??? 0)  (usage 3)
i4Dbutton16                           85  0x00000055 (const ??? 0)  (usage 3)
i4Dbutton2                            15  0x0000000f (const ??? 0)  (usage 3)
i4Dbutton3                            16  0x00000010 (const ??? 0)  (usage 3)
i4Dbutton5                            79  0x0000004f (const ??? 0)  (usage 3)
i4Dbutton6                            80  0x00000050 (const ??? 0)  (usage 3)
i4Dbutton7                            81  0x00000051 (const ??? 0)  (usage 3)
i4Dbutton8                            82  0x00000052 (const ??? 0)  (usage 3)
i4Dbutton9                            83  0x00000053 (const ??? 0)  (usage 3)
I_COLOUR16                            16  0x00000010 (const dword)  (not used)
I_DARKEN                           16384  0x00004000 (const dword)  (not used)
I_ENABLED                          32768  0x00008000 (const dword)  (usage 6)
I_LIGHTEN                           8192  0x00002000 (const dword)  (not used)
I_MOVIE                              128  0x00000080 (const dword)  (not used)
I_NOGROUP                             64  0x00000040 (const dword)  (not used)
I_STAYONTOP                          256  0x00000100 (const dword)  (usage 3)
I_TOPMOST                            512  0x00000200 (const dword)  (not used)
I_TOUCH_DISABLE                       32  0x00000020 (const dword)  (usage 6)
I_TOUCHED                           4096  0x00001000 (const dword)  (not used)
I_X_LOCK                            1024  0x00000400 (const dword)  (not used)
I_Y_LOCK                            2048  0x00000800 (const dword)  (not used)
iCoolgauge0                           92  0x0000005c (const ??? 0)  (usage 3)
iCoolgauge1                          101  0x00000065 (const ??? 0)  (usage 3)
iCoolgauge2                           93  0x0000005d (const ??? 0)  (usage 3)
iCoolgauge3                           94  0x0000005e (const ??? 0)  (usage 3)
iDigits                                2  0x00000002 (const dword)  (usage 9)
iiLeddigits0                          68  0x00000044 (const ??? 0)  (not used)
iiLeddigits1                          29  0x0000001d (const ??? 0)  (not used)
iiLeddigits10                         76  0x0000004c (const ??? 0)  (not used)
iiLeddigits2                          27  0x0000001b (const ??? 0)  (not used)
iiLeddigits3                          57  0x00000039 (const ??? 0)  (not used)
iiLeddigits4                          59  0x0000003b (const ??? 0)  (not used)
iiLeddigits5                          61  0x0000003d (const ??? 0)  (not used)
iiLeddigits6                          63  0x0000003f (const ??? 0)  (not used)
iiLeddigits7                          65  0x00000041 (const ??? 0)  (not used)
iiLeddigits8                          70  0x00000046 (const ??? 0)  (not used)
iiLeddigits9                          74  0x0000004a (const ??? 0)  (not used)
iImage0                                4  0x00000004 (const ??? 0)  (usage 3)
iImage1                               87  0x00000057 (const ??? 0)  (usage 3)
iImage2                               88  0x00000058 (const ??? 0)  (usage 3)
iImage3                                6  0x00000006 (const ??? 0)  (usage 3)
iImage4                               77  0x0000004d (const ??? 0)  (usage 3)
iImage5                                5  0x00000005 (const ??? 0)  (usage 3)
iKnob1                                45  0x0000002d (const ??? 0)  (usage 3)
iKnob2                                44  0x0000002c (const ??? 0)  (usage 3)
iLeadingBlanks                         8  0x00000008 (const dword)  (usage 3)
iLed0                                 18  0x00000012 (const ??? 0)  (usage 3)
iLed1                                 42  0x0000002a (const ??? 0)  (usage 3)
iLed2                                 41  0x00000029 (const ??? 0)  (usage 3)
iLed3                                 40  0x00000028 (const ??? 0)  (usage 3)
iLed4                                 39  0x00000027 (const ??? 0)  (usage 3)
iLed5                                 38  0x00000026 (const ??? 0)  (usage 3)
iLed6                                 19  0x00000013 (const ??? 0)  (usage 3)
iLed7                                 20  0x00000014 (const ??? 0)  (usage 3)
iLed8                                 21  0x00000015 (const ??? 0)  (usage 3)
iLeddigits0                           67  0x00000043 (const ??? 0)  (usage 3)
iLeddigits1                           28  0x0000001c (const ??? 0)  (usage 3)
iLeddigits10                          75  0x0000004b (const ??? 0)  (usage 3)
iLeddigits2                           26  0x0000001a (const ??? 0)  (usage 3)
iLeddigits3                           56  0x00000038 (const ??? 0)  (usage 3)
iLeddigits4                           58  0x0000003a (const ??? 0)  (usage 3)
iLeddigits5                           60  0x0000003c (const ??? 0)  (usage 3)
iLeddigits6                           62  0x0000003e (const ??? 0)  (usage 3)
iLeddigits7                           64  0x00000040 (const ??? 0)  (usage 3)
iLeddigits8                           69  0x00000045 (const ??? 0)  (usage 3)
iLeddigits9                           73  0x00000049 (const ??? 0)  (usage 3)
ileft                                  0  0x00000000 (const dword)  (usage 3)
IMAGE_CLUSTER                         10  0x0000000a (const dword)  (not used)
IMAGE_DELAY                            7  0x00000007 (const dword)  (not used)
IMAGE_FLAGS                            6  0x00000006 (const dword)  (usage 3)
IMAGE_FRAMES                           8  0x00000008 (const dword)  (not used)
IMAGE_HEIGHT                           5  0x00000005 (const dword)  (not used)
IMAGE_HIWORD                           1  0x00000001 (const dword)  (not used)
IMAGE_INDEX                            9  0x00000009 (const dword)  (usage 42)
IMAGE_LOWORD                           0  0x00000000 (const dword)  (not used)
IMAGE_SECTOR                          11  0x0000000b (const dword)  (not used)
IMAGE_TAG                             12  0x0000000c (const dword)  (usage 9)
IMAGE_TAG2                            13  0x0000000d (const dword)  (usage 9)
IMAGE_WIDTH                            4  0x00000004 (const dword)  (not used)
IMAGE_XPOS                             2  0x00000002 (const dword)  (usage 3)
IMAGE_YPOS                             3  0x00000003 (const dword)  (not used)
iMeter0                                7  0x00000007 (const ??? 0)  (usage 3)
iMeter1                                8  0x00000008 (const ??? 0)  (usage 3)
iMeter2                                9  0x00000009 (const ??? 0)  (usage 3)
iMeter3                               10  0x0000000a (const ??? 0)  (usage 3)
iMeter4                               11  0x0000000b (const ??? 0)  (usage 3)
iMeter5                               32  0x00000020 (const ??? 0)  (usage 3)
img_ClearAttributes                 -187  0xffffff45 (PmmC func) args[3] r=1  (usage 3)
IMG_COUNT                              0  0x00000000 (const dword)  (not used)
IMG_CURRENT_FRAME                     89  0x00000059 (const dword)  (not used)
img_Darken                          -181  0xffffff4b (PmmC func) args[2] r=1  (not used)
IMG_DAT_FILENAME                       4  0x00000004 (const dword)  (not used)
img_Disable                         -180  0xffffff4c (PmmC func) args[2] r=1  (usage 6)
img_Enable                          -179  0xffffff4d (PmmC func) args[2] r=1  (not used)
IMG_ENTRYLEN                           1  0x00000001 (const dword)  (not used)
IMG_FLAGS                             85  0x00000055 (const dword)  (not used)
IMG_FRAME_COUNT                       86  0x00000056 (const dword)  (not used)
IMG_FRAME_DELAY                       84  0x00000054 (const dword)  (not used)
IMG_GCI_FILENAME                       3  0x00000003 (const dword)  (not used)
IMG_GCIFILE_HANDLE                     5  0x00000005 (const dword)  (not used)
img_GetWord                         -184  0xffffff48 (PmmC func) args[3] r=1  (usage 42)
IMG_HEIGHT                            83  0x00000053 (const dword)  (not used)
img_Lighten                         -182  0xffffff4a (PmmC func) args[2] r=1  (not used)
IMG_MODE                               2  0x00000002 (const dword)  (not used)
IMG_PIXEL_COUNT_HI                    88  0x00000058 (const dword)  (not used)
IMG_PIXEL_COUNT_LO                    87  0x00000057 (const dword)  (not used)
img_SetAttributes                   -186  0xffffff46 (PmmC func) args[3] r=1  (usage 6)
img_SetPosition                     -178  0xffffff4e (PmmC func) args[4] r=1  (not used)
img_SetWord                         -183  0xffffff49 (PmmC func) args[4] r=1  (usage 24)
img_Show                            -185  0xffffff47 (PmmC func) args[2] r=1  (usage 21)
img_Touched                         -188  0xffffff44 (PmmC func) args[2] r=1  (usage 3)
IMG_WIDTH                             82  0x00000052 (const dword)  (not used)
iMinDigits                             4  0x00000004 (const dword)  (usage 3)
INDIANRED                          51947  0x0000caeb (const dword)  (not used)
INDIGO                             18448  0x00004810 (const dword)  (not used)
input                                130  0x00000082 (mem) word (global)  (usage 81)
INPUT                                  1  0x00000001 (const dword)  (not used)
inputtype                            126  0x0000007e (mem) word (global)  (usage 30)
INVERSE                               64  0x00000040 (const dword)  (not used)
IO1_PIN                                1  0x00000001 (const dword)  (not used)
IO2_PIN                                2  0x00000002 (const dword)  (not used)
IO3_PIN                                3  0x00000003 (const dword)  (not used)
IO4_PIN                                4  0x00000004 (const dword)  (not used)
IO5_PIN                                5  0x00000005 (const dword)  (not used)
IPControls                           140  0x0000008cIPControls                           140  0x0000008c (mem) word[104] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 9)
IPD_DOWN                              16  0x00000010 (const dword)  (usage 6)
IPD_OBJVidx                           20  0x00000014 (const dword)  (usage 21)
IPD_P1                                 2  0x00000002 (const dword)  (usage 15)
IPD_P2                                 4  0x00000004 (const dword)  (usage 57)
IPD_P3                                 6  0x00000006 (const dword)  (usage 21)
IPD_P4                                 8  0x00000008 (const dword)  (usage 21)
IPD_P5                                10  0x0000000a (const dword)  (usage 15)
IPD_P6                                12  0x0000000c (const dword)  (usage 21)
IPD_P7                                14  0x0000000e (const dword)  (usage 3)
IPD_RELEASE                           18  0x00000012 (const dword)  (usage 9)
IPData                               348  0x0000015cIPData                               348  0x0000015c (mem) word[858] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 27)
IPDatasize                            22  0x00000016 (const dword)  (usage 3)
isalnum                             -207  0xffffff31 (PmmC func) args[1] r=1  (not used)
isalpha                             -206  0xffffff32 (PmmC func) args[1] r=1  (not used)
isdigit                             -202  0xffffff36 (PmmC func) args[1] r=1  (not used)
iSlider0                              12  0x0000000c (const ??? 0)  (usage 3)
iSlider1                              89  0x00000059 (const ??? 0)  (usage 3)
iSlider2                             100  0x00000064 (const ??? 0)  (usage 3)
iSlider3                              90  0x0000005a (const ??? 0)  (usage 3)
iSlider4                              91  0x0000005b (const ??? 0)  (usage 3)
islower                             -205  0xffffff33 (PmmC func) args[1] r=1  (not used)
iSounds                               16  0x00000010 (mem) word[11] (global)  (usage 36)
isprint                             -208  0xffffff30 (PmmC func) args[1] r=1  (not used)
isspace                             -209  0xffffff2f (PmmC func) args[1] r=1  (not used)
iStatictext0                          96  0x00000060 (const ??? 0)  (usage 3)
iStatictext1                          97  0x00000061 (const ??? 0)  (usage 3)
iStatictext10                         37  0x00000025 (const ??? 0)  (usage 3)
iStatictext2                          98  0x00000062 (const ??? 0)  (usage 3)
iStatictext20                         49  0x00000031 (const ??? 0)  (usage 3)
iStatictext21                         50  0x00000032 (const ??? 0)  (usage 3)
iStatictext22                         51  0x00000033 (const ??? 0)  (usage 3)
iStatictext23                         43  0x0000002b (const ??? 0)  (usage 3)
iStatictext24                         55  0x00000037 (const ??? 0)  (usage 3)
iStatictext25                         54  0x00000036 (const ??? 0)  (usage 3)
iStatictext3                          99  0x00000063 (const ??? 0)  (usage 3)
iStatictext4                          71  0x00000047 (const ??? 0)  (usage 3)
iStatictext5                          72  0x00000048 (const ??? 0)  (usage 3)
iStatictext6                          31  0x0000001f (const ??? 0)  (usage 3)
iStatictext7                          30  0x0000001e (const ??? 0)  (usage 3)
iStatictext8                          25  0x00000019 (const ??? 0)  (usage 3)
iStatictext9                          36  0x00000024 (const ??? 0)  (usage 3)
iStrings0                           2064  0x00000810iStrings0                           2064  0x00000810 (mem) word[13] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
iStrings1                           2090  0x0000082aiStrings1                           2090  0x0000082a (mem) word[13] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
iStrings2                           2116  0x00000844iStrings2                           2116  0x00000844 (mem) word[13] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
iStrings3                           2142  0x0000085eiStrings3                           2142  0x0000085e (mem) word[13] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
iStrings4                           2168  0x00000878iStrings4                           2168  0x00000878 (mem) word[13] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
iStrings5                           2194  0x00000892iStrings5                           2194  0x00000892 (mem) word[13] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
isupper                             -204  0xffffff34 (PmmC func) args[1] r=1  (not used)
iswhite                             -210  0xffffff2e (PmmC func) args[1] r=1  (not used)
isxdigit                            -203  0xffffff35 (PmmC func) args[1] r=1  (not used)
ITALIC                                32  0x00000020 (const dword)  (not used)
iTank1                                24  0x00000018 (const ??? 0)  (usage 3)
iterator                            -198  0xffffff3a (PmmC func) args[1] r=0  (not used)
iThermometer1                         33  0x00000021 (const ??? 0)  (usage 3)
iTrackbar1                            86  0x00000056 (const ??? 0)  (usage 3)
iUserled1                             34  0x00000022 (const ??? 0)  (usage 3)
iUserled10                            53  0x00000035 (const ??? 0)  (usage 3)
iUserled2                             35  0x00000023 (const ??? 0)  (usage 3)
iUserled9                             52  0x00000034 (const ??? 0)  (usage 3)
IVORY                              65534  0x0000fffe (const dword)  (not used)
iWidthDigit                            6  0x00000006 (const dword)  (usage 3)
iWinbutton0                           17  0x00000011 (const ??? 0)  (usage 3)
iWinbutton1                            0  0x00000000 (const ??? 0)  (usage 3)
iWinbutton10                         103  0x00000067 (const ??? 0)  (usage 3)
iWinbutton2                            1  0x00000001 (const ??? 0)  (usage 3)
iWinbutton3                           23  0x00000017 (const ??? 0)  (usage 3)
iWinbutton4                            2  0x00000002 (const ??? 0)  (usage 3)
iWinbutton5                            3  0x00000003 (const ??? 0)  (usage 3)
iWinbutton6                           78  0x0000004e (const ??? 0)  (usage 3)
iWinbutton7                           95  0x0000005f (const ??? 0)  (usage 3)
iWinbutton8                           22  0x00000016 (const ??? 0)  (usage 3)
iWinbutton9                           66  0x00000042 (const ??? 0)  (usage 3)
KHAKI                              63281  0x0000f731 (const dword)  (not used)
kKeyboardKeystrokes                 2562  0x00000a02kKeyboardKeystrokes                 2562  0x00000a02 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (not used)
LANDSCAPE                              0  0x00000000 (const dword)  (usage 3)
LANDSCAPE_R                            1  0x00000001 (const dword)  (not used)
LAVENDER                           59199  0x0000e73f (const dword)  (not used)
LAVENDERBLUSH                      65438  0x0000ff9e (const dword)  (not used)
LAWNGREEN                          32736  0x00007fe0 (const dword)  (not used)
ledDigitsDisplay                    6292  0x00001894 (User func) args[3] r=0  (usage 6)
LEFT_POS                               2  0x00000002 (const dword)  (not used)
LEMONCHIFFON                       65497  0x0000ffd9 (const dword)  (not used)
LIGHTBLUE                          44764  0x0000aedc (const dword)  (not used)
LIGHTCORAL                         62480  0x0000f410 (const dword)  (not used)
LIGHTCYAN                          59391  0x0000e7ff (const dword)  (not used)
LIGHTGOLD                          65498  0x0000ffda (const dword)  (not used)
LIGHTGREEN                         38770  0x00009772 (const dword)  (not used)
LIGHTGREY                          54938  0x0000d69a (const dword)  (not used)
LIGHTPINK                          64952  0x0000fdb8 (const dword)  (not used)
LIGHTSALMON                        64783  0x0000fd0f (const dword)  (not used)
LIGHTSEAGREEN                       9621  0x00002595 (const dword)  (not used)
LIGHTSKYBLUE                       34431  0x0000867f (const dword)  (not used)
LIGHTSLATEGRAY                     29779  0x00007453 (const dword)  (not used)
LIGHTSTEELBLUE                     46651  0x0000b63b (const dword)  (not used)
LIGHTYELLOW                        65532  0x0000fffc (const dword)  (not used)
LIME                                2016  0x000007e0 (const dword)  (usage 6)
LIMEGREEN                          13926  0x00003666 (const dword)  (not used)
LINE_PATTERN                          26  0x0000001a (const dword)  (not used)
LINEN                              65436  0x0000ff9c (const dword)  (not used)
LO                                     0  0x00000000 (const dword)  (not used)
LObyte                              -213  0xffffff2b (PmmC func) args[1] r=1  (not used)
LPCOARSE                           61680  0x0000f0f0 (const dword)  (not used)
LPDASHDOT                            975  0x000003cf (const dword)  (not used)
LPDASHDOTDOT                         819  0x00000333 (const dword)  (not used)
LPFINE                             43690  0x0000aaaa (const dword)  (usage 3)
LPMEDIUM                           13107  0x00003333 (const dword)  (not used)
LPSOLID                                0  0x00000000 (const dword)  (not used)
MAGENTA                            63519  0x0000f81f (const dword)  (not used)
main                                3060  0x00000bf4 (User func) args[0] r=0  (not used)
MAROON                             32768  0x00008000 (const dword)  (not used)
MAX                                  -15  0xfffffff1 (PmmC func) args[2] r=1  (not used)
MaxTotObjects                         33  0x00000021 (const dword)  (usage 6)
MDA                                63552  0x0000f840 (const dword)  (not used)
MEDIA_ADDRESS_HI                      91  0x0000005b (const dword)  (not used)
MEDIA_ADDRESS_LO                      90  0x0000005a (const dword)  (not used)
MEDIA_ADDRESS_MW                      92  0x0000005c (const dword)  (not used)
MEDIA_ADDRESS_UW                      93  0x0000005d (const dword)  (not used)
media_Flush                         -118  0xffffff8a (PmmC func) args[0] r=1  (not used)
media_Image                         -117  0xffffff8b (PmmC func) args[2] r=0  (not used)
media_Init                          -119  0xffffff89 (PmmC func) args[0] r=1  (not used)
media_RdSector                      -111  0xffffff91 (PmmC func) args[1] r=1  (not used)
media_ReadByte                      -113  0xffffff8f (PmmC func) args[0] r=1  (not used)
media_ReadWord                      -114  0xffffff8e (PmmC func) args[0] r=1  (not used)
MEDIA_SECTOR_COUNT                    94  0x0000005e (const dword)  (not used)
MEDIA_SECTOR_HI                      124  0x0000007c (const dword)  (not used)
MEDIA_SECTOR_LO                      123  0x0000007b (const dword)  (not used)
media_SetAdd                        -109  0xffffff93 (PmmC func) args[2] r=0  (not used)
media_SetSector                     -110  0xffffff92 (PmmC func) args[2] r=0  (not used)
media_Video                         -107  0xffffff95 (PmmC func) args[2] r=0  (not used)
media_VideoFrame                    -108  0xffffff94 (PmmC func) args[3] r=0  (not used)
media_WriteByte                     -115  0xffffff8d (PmmC func) args[1] r=1  (not used)
media_WriteWord                     -116  0xffffff8c (PmmC func) args[1] r=1  (not used)
media_WrSector                      -112  0xffffff90 (PmmC func) args[1] r=1  (not used)
MEDIUMAQUAMARINE                   26229  0x00006675 (const dword)  (not used)
MEDIUMBLUE                            25  0x00000019 (const dword)  (not used)
MEDIUMORCHID                       47802  0x0000baba (const dword)  (not used)
MEDIUMPURPLE                       37787  0x0000939b (const dword)  (not used)
MEDIUMSEAGREEN                     15758  0x00003d8e (const dword)  (not used)
MEDIUMSLATEBLUE                    31581  0x00007b5d (const dword)  (not used)
MEDIUMSPRINGGREEN                   2003  0x000007d3 (const dword)  (not used)
MEDIUMTURQUOISE                    20121  0x00004e99 (const dword)  (not used)
MEDIUMVIOLETRED                    49328  0x0000c0b0 (const dword)  (not used)
mem_Alloc                           -216  0xffffff28 (PmmC func) args[1] r=1  (not used)
mem_AllocV                          -217  0xffffff27 (PmmC func) args[1] r=1  (not used)
mem_AllocZ                          -218  0xffffff26 (PmmC func) args[1] r=1  (not used)
mem_Compare                         -224  0xffffff20 (PmmC func) args[3] r=1  (not used)
mem_Copy                            -223  0xffffff21 (PmmC func) args[3] r=1  (not used)
mem_Free                            -220  0xffffff24 (PmmC func) args[1] r=1  (not used)
mem_Heap                            -221  0xffffff23 (PmmC func) args[0] r=1  (not used)
mem_Realloc                         -219  0xffffff25 (PmmC func) args[2] r=1  (not used)
mem_Set                             -222  0xffffff22 (PmmC func) args[3] r=1  (not used)
MIDI                                   9  0x00000009 (const dword)  (not used)
MIDNIGHTBLUE                        6350  0x000018ce (const dword)  (not used)
MIN                                  -14  0xfffffff2 (PmmC func) args[2] r=1  (not used)
MINTCREAM                          63487  0x0000f7ff (const dword)  (not used)
MISTYROSE                          65340  0x0000ff3c (const dword)  (not used)
MOCCASIN                           65334  0x0000ff36 (const dword)  (not used)
NAK                                   21  0x00000015 (const dword)  (usage 24)
NAVAJOWHITE                        65269  0x0000fef5 (const dword)  (not used)
NAVY                                  16  0x00000010 (const dword)  (not used)
nInputs                               78  0x0000004e (const dword)  (usage 3)
nObjects                             104  0x00000068 (const dword)  (not used)
NOTOUCH                                0  0x00000000 (const dword)  (not used)
o4Dbuttons                          2498  0x000009c2o4Dbuttons                          2498  0x000009c2 (mem) word[18] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 12)
oAngularmeters                      2276  0x000008e4oAngularmeters                      2276  0x000008e4 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oAniButtons                         2534  0x000009e6oAniButtons                         2534  0x000009e6 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
object                               132  0x00000084 (mem) word (global)  (usage 30)
OBJECT_COLOUR                         18  0x00000012 (const dword)  (not used)
oColorPickers                       2536  0x000009e8oColorPickers                       2536  0x000009e8 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oCoolgauges                         2278  0x000008e6oCoolgauges                         2278  0x000008e6 (mem) word[5] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
Ocs                                  376  0x00000178 (mem) word (global)  (usage 9)
oCustomdigitss                      2288  0x000008f0oCustomdigitss                      2288  0x000008f0 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oDipSwitchs                         2220  0x000008acoDipSwitchs                         2220  0x000008ac (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
OFF                                    0  0x00000000 (const dword)  (usage 3)
oForms                              2290  0x000008f2oForms                              2290  0x000008f2 (mem) word[9] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oGauges                             2308  0x00000904oGauges                             2308  0x00000904 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oGSliders                           2234  0x000008baoGSliders                           2234  0x000008ba (mem) word[6] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 6)
oImages                             2310  0x00000906oImages                             2310  0x00000906 (mem) word[7] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oKeyboards                          2324  0x00000914oKeyboards                          2324  0x00000914 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oKnobs                              2222  0x000008aeoKnobs                              2222  0x000008ae (mem) word[4] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 6)
OLDLACE                            65468  0x0000ffbc (const dword)  (not used)
oLeddigitss                         2346  0x0000092aoLeddigitss                         2346  0x0000092a (mem) word[12] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 9)
oLeds                               2326  0x00000916oLeds                               2326  0x00000916 (mem) word[10] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
OLIVE                              33792  0x00008400 (const dword)  (not used)
OLIVEDRAB                          27748  0x00006c64 (const dword)  (not used)
oMeters                             2370  0x00000942oMeters                             2370  0x00000942 (mem) word[7] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
ON                                     1  0x00000001 (const dword)  (usage 3)
oObjects                              52  0x00000034 (mem) word[34] (global)  (usage 108)
OPAQUE                                 1  0x00000001 (const dword)  (not used)
OPDataL                             2564  0x00000a04OPDataL                             2564  0x00000a04 (mem) word[55] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 6)
oPinInputs                          2496  0x000009c0oPinInputs                          2496  0x000009c0 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oPinOutputs                         2544  0x000009f0oPinOutputs                         2544  0x000009f0 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
ORANGE                             64800  0x0000fd20 (const dword)  (not used)
ORANGERED                          64032  0x0000fa20 (const dword)  (not used)
ORCHID                             56218  0x0000db9a (const dword)  (not used)
oRockerSwitchs                      2230  0x000008b6oRockerSwitchs                      2230  0x000008b6 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oRotarySwitchs                      2232  0x000008b8oRotarySwitchs                      2232  0x000008b8 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oScopes                             2486  0x000009b6oScopes                             2486  0x000009b6 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (not used)
oSoundss                            2542  0x000009eeoSoundss                            2542  0x000009ee (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oSpectrums                          2484  0x000009b4oSpectrums                          2484  0x000009b4 (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oStaticTexts                        2430  0x0000097eoStaticTexts                        2430  0x0000097e (mem) word[27] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oStringss                           2384  0x00000950oStringss                           2384  0x00000950 (mem) word[7] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 7)
oStringss                         UNRESOLVED  (usage 2)
OT_ACTIVATE                          103  0x00000067 (const dword)  (usage 36)
OT_NEXTFRAME                         104  0x00000068 (const dword)  (usage 3)
OT_NEXTSTRING                        106  0x0000006a (const dword)  (usage 3)
OT_PREVFRAME                         105  0x00000069 (const dword)  (usage 3)
OT_PREVSTRING                        107  0x0000006b (const dword)  (usage 3)
OT_REPORT                            100  0x00000064 (const dword)  (usage 48)
OT_SETANOTHER                        102  0x00000066 (const dword)  (usage 39)
OT_SETCONST                          101  0x00000065 (const dword)  (usage 21)
oTanks                              2488  0x000009b8oTanks                              2488  0x000009b8 (mem) word[3] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oThermometers                       2398  0x0000095eoThermometers                       2398  0x0000095e (mem) word[3] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oTimers                             2540  0x000009ecoTimers                             2540  0x000009ec (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oTrackbars                          2246  0x000008c6oTrackbars                          2246  0x000008c6 (mem) word[3] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 6)
oUserButtons                        2538  0x000009eaoUserButtons                        2538  0x000009ea (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oUserImagess                        2494  0x000009beoUserImagess                        2494  0x000009be (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oUserleds                           2404  0x00000964oUserleds                           2404  0x00000964 (mem) word[12] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
OUTLINE                                1  0x00000001 (const dword)  (not used)
OUTLINE_COLOUR                        24  0x00000018 (const dword)  (not used)
OUTPUT                                 0  0x00000000 (const dword)  (not used)
OVF                                  -21  0xffffffeb (PmmC func) args[0] r=1  (not used)
oVideos                             2428  0x0000097coVideos                             2428  0x0000097c (mem) word[1] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 3)
oWinButtons                         2252  0x000008ccoWinButtons                         2252  0x000008cc (mem) word[12] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 12)
PALEGOLDENROD                      61269  0x0000ef55 (const dword)  (not used)
PALEGREEN                          40915  0x00009fd3 (const dword)  (not used)
PALETURQUOISE                      44925  0x0000af7d (const dword)  (not used)
PALEVIOLETRED                      56210  0x0000db92 (const dword)  (not used)
PANEL_HIDE                             2  0x00000002 (const dword)  (not used)
PANEL_RAISED                           1  0x00000001 (const dword)  (not used)
PANEL_SUNKEN                           0  0x00000000 (const dword)  (not used)
PAPAYAWHIP                         65402  0x0000ff7a (const dword)  (not used)
pause                                 -6  0xfffffffa (PmmC func) args[1] r=0  (usage 6)
PEACHPUFF                          65239  0x0000fed7 (const dword)  (not used)
peekW                                -11  0xfffffff5 (PmmC func) args[1] r=1  (not used)
PEN_SIZE                              16  0x00000010 (const dword)  (not used)
PERU                               52263  0x0000cc27 (const dword)  (not used)
PICASO                                 1  0x00000001 (const dword)  (usage 3)
PICASO_FUNCTIONS                       0  0x00000000 (const ??? 0)  (not used)
pin_HI                               -42  0xffffffd6 (PmmC func) args[1] r=1  (not used)
pin_LO                               -43  0xffffffd5 (PmmC func) args[1] r=1  (not used)
pin_Read                             -44  0xffffffd4 (PmmC func) args[1] r=1  (not used)
pin_Set                              -41  0xffffffd7 (PmmC func) args[2] r=1  (not used)
PINK                               65049  0x0000fe19 (const dword)  (not used)
PLUM                               56603  0x0000dd1b (const dword)  (not used)
pokeW                                -12  0xfffffff4 (PmmC func) args[2] r=0  (not used)
PORTRAIT                               2  0x00000002 (const dword)  (not used)
PORTRAIT_R                             3  0x00000003 (const dword)  (not used)
POWDERBLUE                         46876  0x0000b71c (const dword)  (not used)
PrintStrings                        7495  0x00001d47 (User func) args[3] r=0  (usage 9)
PROGRESSBAR_HIDE                       2  0x00000002 (const dword)  (not used)
PROGRESSBAR_RAISED                 65535  0x0000ffff (const dword)  (not used)
PROGRESSBAR_SUNKEN                 65534  0x0000fffe (const dword)  (not used)
PURPLE                             32784  0x00008010 (const dword)  (not used)
putch                                 -2  0xfffffffe (PmmC func) args[1] r=0  (usage 6)
putnum                                -7  0xfffffff9 (PmmC func) args[2] r=1  (not used)
putstr                                -9  0xfffffff7 (PmmC func) args[1] r=1  (usage 9)
RAND                                 -19  0xffffffed (PmmC func) args[0] r=1  (not used)
RANDOM_HI                             33  0x00000021 (const dword)  (not used)
RANDOM_LO                             32  0x00000020 (const dword)  (not used)
READ_OBJ                               0  0x00000000 (const dword)  (usage 3)
READ_PAGE                             34  0x00000022 (const dword)  (not used)
ReadCmd                              128  0x00000080 (const dword)  (not used)
ReadObject                          7167  0x00001bff (User func) args[2] r=0  (usage 3)
RED                                63488  0x0000f800 (const dword)  (usage 6)
REPORT_EVENT                           7  0x00000007 (const dword)  (usage 3)
REPORT_OBJ                             5  0x00000005 (const dword)  (usage 3)
reserved                            -294  0xfffffeda (PmmC func) args[0] r=0  (not used)
RIGHT_POS                              4  0x00000004 (const dword)  (not used)
ROSYBROWN                          48241  0x0000bc71 (const dword)  (not used)
ROYALBLUE                          17244  0x0000435c (const dword)  (not used)
RUNFLASH                             128  0x00000080 (const dword)  (usage 3)
RXMODE_0                               0  0x00000000 (const dword)  (not used)
RXMODE_1                               1  0x00000001 (const dword)  (not used)
SADDLEBROWN                        35362  0x00008a22 (const dword)  (not used)
SALMON                             64526  0x0000fc0e (const dword)  (not used)
SANDYBROWN                         62764  0x0000f52c (const dword)  (not used)
SCREEN_MODE                           23  0x00000017 (const dword)  (not used)
SEAGREEN                           11338  0x00002c4a (const dword)  (not used)
SEASHELL                           65469  0x0000ffbd (const dword)  (not used)
SEED                                 -20  0xffffffec (PmmC func) args[1] r=0  (not used)
SELECT                                 3  0x00000003 (const dword)  (not used)
SELECT_MULTIPLE                        4  0x00000004 (const dword)  (not used)
serin                                 -1  0xffffffff (PmmC func) args[0] r=1  (usage 3)
serin1                              -140  0xffffff74 (PmmC func) args[0] r=1  (not used)
serout                                -3  0xfffffffd (PmmC func) args[1] r=0  (usage 42)
serout1                             -141  0xffffff73 (PmmC func) args[1] r=0  (not used)
seroutCS                            7477  0x00001d35 (User func) args[1] r=0  (usage 30)
seroutOcs                           7462  0x00001d26 (User func) args[0] r=0  (usage 6)
setbaud                               -4  0xfffffffc (PmmC func) args[1] r=0  (usage 3)
SIENNA                             41605  0x0000a285 (const dword)  (not used)
SILVER                             50712  0x0000c618 (const dword)  (not used)
SIN                                  -17  0xffffffef (PmmC func) args[1] r=1  (not used)
SKYBLUE                            34429  0x0000867d (const dword)  (not used)
SLATEBLUE                          27353  0x00006ad9 (const dword)  (not used)
SLATEGRAY                          29714  0x00007412 (const dword)  (not used)
SLIDER_HIDE                            2  0x00000002 (const dword)  (not used)
SLIDER_RAISED                          1  0x00000001 (const dword)  (not used)
SLIDER_SUNKEN                          0  0x00000000 (const dword)  (not used)
snd_BufSize                         -258  0xfffffefe (PmmC func) args[1] r=0  (not used)
snd_Continue                        -261  0xfffffefb (PmmC func) args[0] r=0  (usage 3)
snd_Pause                           -260  0xfffffefc (PmmC func) args[0] r=0  (usage 3)
snd_Pitch                           -257  0xfffffeff (PmmC func) args[1] r=1  (not used)
snd_Playing                         -262  0xfffffefa (PmmC func) args[0] r=1  (usage 3)
snd_Stop                            -259  0xfffffefd (PmmC func) args[0] r=0  (usage 3)
snd_Volume                          -256  0xffffff00 (PmmC func) args[1] r=0  (usage 3)
SNOW                               65503  0x0000ffdf (const dword)  (not used)
SOLID                                  0  0x00000000 (const dword)  (not used)
Sounds                              2674  0x00000a72Sounds                              2674  0x00000a72 (mem) byte[143] (member of C:\Users\Brandon\Google Drive\Senior Design Fall 2013\Brandon\Visi\New folder\MCTRL.4DWork\MCTRL.4DGenieS)  (usage 33)
spi_Disable                         -153  0xffffff67 (PmmC func) args[0] r=0  (not used)
SPI_FAST                               0  0x00000000 (const dword)  (not used)
spi_Init                            -150  0xffffff6a (PmmC func) args[3] r=0  (not used)
SPI_MED                                1  0x00000001 (const dword)  (not used)
spi_Read                            -151  0xffffff69 (PmmC func) args[0] r=1  (not used)
SPI_SLOW                               2  0x00000002 (const dword)  (not used)
spi_Write                           -152  0xffffff68 (PmmC func) args[1] r=0  (not used)
SPRINGGREEN                         2031  0x000007ef (const dword)  (not used)
SQRT                                 -22  0xffffffea (PmmC func) args[1] r=1  (not used)
SSD1963_ENTER_IDLE_MODE               57  0x00000039 (const dword)  (not used)
SSD1963_ENTER_INVERT_MODE             33  0x00000021 (const dword)  (not used)
SSD1963_ENTER_NORMAL_MODE             19  0x00000013 (const dword)  (not used)
SSD1963_ENTER_PARTIAL_MODE            18  0x00000012 (const dword)  (not used)
SSD1963_ENTER_SLEEP_MODE              16  0x00000010 (const dword)  (not used)
SSD1963_EXIT_IDLE_MODE                56  0x00000038 (const dword)  (not used)
SSD1963_EXIT_INVERT_MODE              32  0x00000020 (const dword)  (not used)
SSD1963_EXIT_SLEEP_MODE               17  0x00000011 (const dword)  (not used)
SSD1963_GET_ADDRESS_MODE              11  0x0000000b (const dword)  (not used)
SSD1963_GET_DBC_CONF                 209  0x000000d1 (const dword)  (not used)
SSD1963_GET_DBC_TH                   213  0x000000d5 (const dword)  (not used)
SSD1963_GET_DISPLAY_MODE              13  0x0000000d (const dword)  (not used)
SSD1963_GET_GPIO0_ROP                201  0x000000c9 (const dword)  (not used)
SSD1963_GET_GPIO1_ROP                203  0x000000cb (const dword)  (not used)
SSD1963_GET_GPIO2_ROP                205  0x000000cd (const dword)  (not used)
SSD1963_GET_GPIO3_ROP                207  0x000000cf (const dword)  (not used)
SSD1963_GET_GPIO_CONFIG              185  0x000000b9 (const dword)  (not used)
SSD1963_GET_GPIO_STATUS              187  0x000000bb (const dword)  (not used)
SSD1963_GET_HORZ_PERIOD              181  0x000000b5 (const dword)  (not used)
SSD1963_GET_LCD_GEN0                 192  0x000000c0 (const dword)  (not used)
SSD1963_GET_LCD_GEN1                 194  0x000000c2 (const dword)  (not used)
SSD1963_GET_LCD_GEN2                 196  0x000000c4 (const dword)  (not used)
SSD1963_GET_LCD_GEN3                 198  0x000000c6 (const dword)  (not used)
SSD1963_GET_LCD_MODE                 177  0x000000b1 (const dword)  (not used)
SSD1963_GET_LSHIFT_FREQ              231  0x000000e7 (const dword)  (not used)
SSD1963_GET_PIXEL_DATA_INTERFACE     241  0x000000f1 (const dword)  (not used)
SSD1963_GET_PLL_MN                   227  0x000000e3 (const dword)  (not used)
SSD1963_GET_PLL_STATUS               228  0x000000e4 (const dword)  (not used)
SSD1963_GET_POST_PROC                189  0x000000bd (const dword)  (not used)
SSD1963_GET_POWER_MODE                10  0x0000000a (const dword)  (not used)
SSD1963_GET_PWM_CONFIG               191  0x000000bf (const dword)  (not used)
SSD1963_GET_SCANLINE                  69  0x00000045 (const dword)  (not used)
SSD1963_GET_TEAR_EFFECT_STATUS        14  0x0000000e (const dword)  (not used)
SSD1963_GET_VERT_PERIOD              183  0x000000b7 (const dword)  (not used)
SSD1963_NOP                            0  0x00000000 (const dword)  (not used)
SSD1963_READ_DDB                     161  0x000000a1 (const dword)  (not used)
SSD1963_READ_MEMORY_CONTINUE          62  0x0000003e (const dword)  (not used)
SSD1963_READ_MEMORY_START             46  0x0000002e (const dword)  (not used)
SSD1963_SET_ADDRESS_MODE              54  0x00000036 (const dword)  (not used)
SSD1963_SET_COLUMN_ADDRESS            42  0x0000002a (const dword)  (not used)
SSD1963_SET_DBC_CONF                 208  0x000000d0 (const dword)  (not used)
SSD1963_SET_DBC_TH                   212  0x000000d4 (const dword)  (not used)
SSD1963_SET_DEEP_SLEEP               229  0x000000e5 (const dword)  (not used)
SSD1963_SET_DISPLAY_OFF               40  0x00000028 (const dword)  (not used)
SSD1963_SET_DISPLAY_ON                41  0x00000029 (const dword)  (not used)
SSD1963_SET_GAMMA_CURVE               38  0x00000026 (const dword)  (not used)
SSD1963_SET_GPIO0_ROP                200  0x000000c8 (const dword)  (not used)
SSD1963_SET_GPIO1_ROP                202  0x000000ca (const dword)  (not used)
SSD1963_SET_GPIO2_ROP                204  0x000000cc (const dword)  (not used)
SSD1963_SET_GPIO3_ROP                206  0x000000ce (const dword)  (not used)
SSD1963_SET_GPIO_CONFIG              184  0x000000b8 (const dword)  (not used)
SSD1963_SET_GPIO_VALUE               186  0x000000ba (const dword)  (not used)
SSD1963_SET_HORZ_PERIOD              180  0x000000b4 (const dword)  (not used)
SSD1963_SET_LCD_GEN0                 193  0x000000c1 (const dword)  (not used)
SSD1963_SET_LCD_GEN1                 195  0x000000c3 (const dword)  (not used)
SSD1963_SET_LCD_GEN2                 197  0x000000c5 (const dword)  (not used)
SSD1963_SET_LCD_GEN3                 199  0x000000c7 (const dword)  (not used)
SSD1963_SET_LCD_MODE                 176  0x000000b0 (const dword)  (not used)
SSD1963_SET_LSHIFT_FREQ              230  0x000000e6 (const dword)  (not used)
SSD1963_SET_PAGE_ADDRESS              43  0x0000002b (const dword)  (not used)
SSD1963_SET_PARTIAL_AREA              48  0x00000030 (const dword)  (not used)
SSD1963_SET_PLL                      224  0x000000e0 (const dword)  (not used)
SSD1963_SET_PLL_MN                   226  0x000000e2 (const dword)  (not used)
SSD1963_SET_POST_PROC                188  0x000000bc (const dword)  (not used)
SSD1963_SET_PWM_CONFIG               190  0x000000be (const dword)  (not used)
SSD1963_SET_REAR_ON                   53  0x00000035 (const dword)  (not used)
SSD1963_SET_SCROLL_AREA               51  0x00000033 (const dword)  (not used)
SSD1963_SET_SCROLL_START              55  0x00000037 (const dword)  (not used)
SSD1963_SET_TEAR_OFF                  52  0x00000034 (const dword)  (not used)
SSD1963_SET_TEAR_SCANLINE             68  0x00000044 (const dword)  (not used)
SSD1963_SET_VERT_PERIOD              182  0x000000b6 (const dword)  (not used)
SSD1963_SOFT_RESET                     1  0x00000001 (const dword)  (not used)
SSD1963_WRITE_MEMORY_CONTINUE         60  0x0000003c (const dword)  (not used)
SSD1963_WRITE_MEMORY_START            44  0x0000002c (const dword)  (not used)
STAnsi                                22  0x00000016 (const dword)  (usage 3)
STBGColor                             16  0x00000010 (const dword)  (usage 6)
STEELBLUE                          17430  0x00004416 (const dword)  (not used)
STFGColor                             14  0x0000000e (const dword)  (usage 3)
STFontAttribs                         18  0x00000012 (const dword)  (usage 3)
STForm                                24  0x00000018 (const dword)  (usage 3)
STR                                  128  0x00000080 (const dword)  (not used)
str_ByteMove                        -286  0xfffffee2 (PmmC func) args[3] r=1  (not used)
str_Cat                             -278  0xfffffeea (PmmC func) args[2] r=1  (not used)
str_CatN                            -279  0xfffffee9 (PmmC func) args[3] r=1  (not used)
str_Copy                            -287  0xfffffee1 (PmmC func) args[2] r=1  (not used)
str_CopyN                           -288  0xfffffee0 (PmmC func) args[3] r=1  (not used)
str_Find                            -274  0xfffffeee (PmmC func) args[2] r=1  (not used)
str_FindI                           -275  0xfffffeed (PmmC func) args[2] r=1  (not used)
str_GetByte                         -268  0xfffffef4 (PmmC func) args[1] r=1  (not used)
str_GetC                            -267  0xfffffef5 (PmmC func) args[2] r=1  (not used)
str_GetD                            -264  0xfffffef8 (PmmC func) args[2] r=1  (not used)
str_GetHexW                         -266  0xfffffef6 (PmmC func) args[2] r=1  (not used)
str_GetW                            -265  0xfffffef7 (PmmC func) args[2] r=1  (not used)
str_GetWord                         -269  0xfffffef3 (PmmC func) args[1] r=1  (not used)
str_Length                          -276  0xfffffeec (PmmC func) args[1] r=1  (not used)
str_Match                           -272  0xfffffef0 (PmmC func) args[2] r=1  (not used)
str_MatchI                          -273  0xfffffeef (PmmC func) args[2] r=1  (not used)
str_Printf                          -277  0xfffffeeb (PmmC func) args[2] r=1  (not used)
str_Ptr                             -263  0xfffffef9 (PmmC func) args[1] r=1  (not used)
str_PutByte                         -270  0xfffffef2 (PmmC func) args[2] r=0  (not used)
str_PutWord                         -271  0xfffffef1 (PmmC func) args[2] r=0  (not used)
strheight                           -161  0xffffff5f (PmmC func) args[0] r=1  (not used)
Strings0Count                          1  0x00000001 (const dword)  (not used)
Strings0Size                          11  0x0000000b (const dword)  (usage 3)
Strings0StartH                         0  0x00000000 (const dword)  (usage 3)
Strings0StartL                      1024  0x00000400 (const dword)  (usage 3)
Strings1Count                          2  0x00000002 (const dword)  (not used)
Strings1Size                          20  0x00000014 (const dword)  (usage 3)
Strings1StartH                         0  0x00000000 (const dword)  (usage 3)
Strings1StartL                         0  0x00000000 (const dword)  (usage 3)
Strings2Count                          1  0x00000001 (const dword)  (not used)
Strings2Size                          35  0x00000023 (const dword)  (usage 3)
Strings2StartH                         0  0x00000000 (const dword)  (usage 3)
Strings2StartL                       512  0x00000200 (const dword)  (usage 3)
Strings3Count                          1  0x00000001 (const dword)  (not used)
Strings3Size                          22  0x00000016 (const dword)  (usage 3)
Strings3StartH                         0  0x00000000 (const dword)  (usage 3)
Strings3StartL                      1536  0x00000600 (const dword)  (usage 3)
Strings4Count                          1  0x00000001 (const dword)  (not used)
Strings4Size                          24  0x00000018 (const dword)  (usage 3)
Strings4StartH                         0  0x00000000 (const dword)  (usage 3)
Strings4StartL                      2048  0x00000800 (const dword)  (usage 3)
Strings5Count                          1  0x00000001 (const dword)  (not used)
Strings5Size                          20  0x00000014 (const dword)  (usage 3)
Strings5StartH                         0  0x00000000 (const dword)  (usage 3)
Strings5StartL                      2560  0x00000a00 (const dword)  (usage 3)
stringsCV                             38  0x00000026 (mem) word[6] (global)  (usage 27)
strlen                               -10  0xfffffff6 (PmmC func) args[1] r=1  (not used)
strwidth                            -160  0xffffff60 (PmmC func) args[1] r=1  (not used)
STSize                                 4  0x00000004 (const dword)  (usage 3)
STStartH                               0  0x00000000 (const dword)  (usage 3)
STStartL                               2  0x00000002 (const dword)  (usage 3)
STTransparent                         20  0x00000014 (const dword)  (usage 3)
STx1                                   6  0x00000006 (const dword)  (usage 12)
STx2                                  10  0x0000000a (const dword)  (usage 9)
STy1                                   8  0x00000008 (const dword)  (usage 12)
STy2                                  12  0x0000000c (const dword)  (usage 9)
STYLE1                                 2  0x00000002 (const dword)  (not used)
STYLE2                                 3  0x00000003 (const dword)  (not used)
SWAP                                 -16  0xfffffff0 (PmmC func) args[2] r=0  (usage 3)
sys_DeepSleep                       -295  0xfffffed9 (PmmC func) args[1] r=1  (not used)
sys_EventQueue                      -194  0xffffff3e (PmmC func) args[0] r=1  (not used)
sys_EventsPostpone                  -195  0xffffff3d (PmmC func) args[0] r=0  (not used)
sys_EventsResume                    -196  0xffffff3c (PmmC func) args[0] r=0  (usage 3)
sys_GetTimer                        -192  0xffffff40 (PmmC func) args[1] r=1  (not used)
sys_SetTimer                        -191  0xffffff41 (PmmC func) args[2] r=0  (not used)
sys_SetTimerEvent                   -193  0xffffff3f (PmmC func) args[2] r=1  (not used)
sys_Sleep                           -197  0xffffff3b (PmmC func) args[1] r=1  (not used)
sys_StoreTouchCalibration           -280  0xfffffee8 (PmmC func) args[0] r=1  (not used)
sys_T                               -189  0xffffff43 (PmmC func) args[0] r=1  (not used)
sys_T_HI                            -190  0xffffff42 (PmmC func) args[0] r=1  (not used)
SYS_X_MAX                             44  0x0000002c (const dword)  (not used)
SYS_Y_MAX                             45  0x0000002d (const dword)  (not used)
SYSTEM_TIMER_HI                       35  0x00000023 (const dword)  (not used)
SYSTEM_TIMER_LO                       34  0x00000022 (const dword)  (not used)
t4Dbutton                             30  0x0000001e (const dword)  (usage 66)
TAN                                54705  0x0000d5b1 (const dword)  (not used)
tAngularmeter                          7  0x00000007 (const dword)  (usage 3)
tAniButton                            31  0x0000001f (const dword)  (usage 9)
tColorPicker                          32  0x00000020 (const dword)  (usage 3)
tCoolgauge                             8  0x00000008 (const dword)  (usage 3)
tCustomdigits                          9  0x00000009 (const dword)  (usage 6)
tDipSwitch                             0  0x00000000 (const dword)  (usage 3)
TEAL                                1040  0x00000410 (const dword)  (not used)
TEXT                               63489  0x0000f801 (const dword)  (not used)
TEXT_ATTRIBUTES                       13  0x0000000d (const dword)  (not used)
TEXT_BACKGROUND                        1  0x00000001 (const dword)  (not used)
TEXT_BOLD                              9  0x00000009 (const dword)  (not used)
TEXT_COLOUR                            0  0x00000000 (const dword)  (not used)
TEXT_HEIGHT                            4  0x00000004 (const dword)  (not used)
TEXT_HIGHLIGHT                         1  0x00000001 (const dword)  (not used)
TEXT_INVERSE                          11  0x0000000b (const dword)  (not used)
TEXT_ITALIC                           10  0x0000000a (const dword)  (not used)
TEXT_MARGIN                           97  0x00000061 (const dword)  (not used)
TEXT_OPACITY                           8  0x00000008 (const dword)  (not used)
TEXT_PRINTDELAY                        7  0x00000007 (const dword)  (not used)
TEXT_UNDERLINED                       12  0x0000000c (const dword)  (not used)
TEXT_WIDTH                             3  0x00000003 (const dword)  (not used)
TEXT_WRAP                             14  0x0000000e (const dword)  (not used)
TEXT_XGAP                              5  0x00000005 (const dword)  (not used)
TEXT_XPOS                             95  0x0000005f (const dword)  (not used)
TEXT_YGAP                              6  0x00000006 (const dword)  (not used)
TEXT_YPOS                             96  0x00000060 (const dword)  (not used)
tForm                                 10  0x0000000a (const dword)  (usage 15)
tGauge                                11  0x0000000b (const dword)  (usage 3)
tGSlider                               4  0x00000004 (const dword)  (usage 21)
THISTLE                            56827  0x0000ddfb (const dword)  (not used)
tImage                                12  0x0000000c (const dword)  (usage 3)
TIMER0                                 0  0x00000000 (const dword)  (not used)
TIMER1                                 1  0x00000001 (const dword)  (not used)
TIMER2                                 2  0x00000002 (const dword)  (not used)
TIMER3                                 3  0x00000003 (const dword)  (not used)
TIMER4                                 4  0x00000004 (const dword)  (not used)
TIMER5                                 5  0x00000005 (const dword)  (not used)
TIMER6                                 6  0x00000006 (const dword)  (not used)
TIMER7                                 7  0x00000007 (const dword)  (not used)
tKeyboard                             13  0x0000000d (const dword)  (usage 3)
tKnob                                  1  0x00000001 (const dword)  (usage 9)
tLed                                  14  0x0000000e (const dword)  (usage 3)
tLeddigits                            15  0x0000000f (const dword)  (usage 12)
tMeter                                16  0x00000010 (const dword)  (usage 3)
TMR0                                  36  0x00000024 (const dword)  (not used)
TMR1                                  37  0x00000025 (const dword)  (not used)
TMR2                                  38  0x00000026 (const dword)  (not used)
TMR3                                  39  0x00000027 (const dword)  (not used)
TMR4                                  40  0x00000028 (const dword)  (not used)
TMR5                                  41  0x00000029 (const dword)  (not used)
TMR6                                  42  0x0000002a (const dword)  (not used)
TMR7                                  43  0x0000002b (const dword)  (not used)
TMul                                7408  0x00001cf0 (User func) args[3] r=0  (usage 9)
to                                    -5  0xfffffffb (PmmC func) args[1] r=1  (not used)
tolower                             -212  0xffffff2c (PmmC func) args[1] r=1  (not used)
TOMATO                             64264  0x0000fb08 (const dword)  (not used)
TOP_POS                                3  0x00000003 (const dword)  (not used)
touch_DetectRegion                  -199  0xffffff39 (PmmC func) args[4] r=0  (not used)
TOUCH_DISABLE                          1  0x00000001 (const dword)  (not used)
TOUCH_DRIVE                           78  0x0000004e (const dword)  (not used)
TOUCH_ENABLE                           0  0x00000000 (const dword)  (usage 3)
touch_Get                           -201  0xffffff37 (PmmC func) args[1] r=1  (usage 9)
TOUCH_GETX                             1  0x00000001 (const dword)  (usage 3)
TOUCH_GETY                             2  0x00000002 (const dword)  (usage 3)
TOUCH_MOVING                           3  0x00000003 (const dword)  (usage 3)
TOUCH_PRESSED                          1  0x00000001 (const dword)  (usage 9)
TOUCH_RAW_X                          117  0x00000075 (const dword)  (not used)
TOUCH_RAW_Y                          118  0x00000076 (const dword)  (not used)
TOUCH_REGIONDEFAULT                    2  0x00000002 (const dword)  (not used)
TOUCH_RELEASED                         2  0x00000002 (const dword)  (usage 18)
touch_Set                           -200  0xffffff38 (PmmC func) args[1] r=0  (usage 3)
TOUCH_STATUS                           0  0x00000000 (const dword)  (usage 3)
TOUCH_XMAXCAL                         80  0x00000050 (const dword)  (not used)
TOUCH_XMINCAL                         78  0x0000004e (const dword)  (not used)
TOUCH_YMAXCAL                         81  0x00000051 (const dword)  (not used)
TOUCH_YMINCAL                         79  0x0000004f (const dword)  (not used)
toupper                             -211  0xffffff2d (PmmC func) args[1] r=1  (not used)
tPinInput                             29  0x0000001d (const dword)  (usage 6)
tPinOutput                            28  0x0000001c (const dword)  (usage 6)
translate                             -8  0xfffffff8 (PmmC func) args[4] r=1  (not used)
TRANSPARENCY                          21  0x00000015 (const dword)  (not used)
TRANSPARENT                            0  0x00000000 (const dword)  (usage 3)
TRANSPARENT_COLOUR                    20  0x00000014 (const dword)  (not used)
tRockerSwitch                          2  0x00000002 (const dword)  (usage 3)
tRotarySwitch                          3  0x00000003 (const dword)  (usage 3)
tScope                                25  0x00000019 (const dword)  (not used)
tSounds                               22  0x00000016 (const dword)  (usage 12)
tSpectrum                             24  0x00000018 (const dword)  (usage 3)
TState                               128  0x00000080 (mem) word (global)  (usage 24)
tStaticText                           21  0x00000015 (const dword)  (usage 3)
tStrings                              17  0x00000011 (const dword)  (usage 18)
tTank                                 26  0x0000001a (const dword)  (usage 3)
tThermometer                          18  0x00000012 (const dword)  (usage 3)
tTimer                                23  0x00000017 (const dword)  (usage 6)
tTrackbar                              5  0x00000005 (const dword)  (usage 6)
TurnOffButtons                      6606  0x000019ce (User func) args[1] r=0  (usage 6)
TURQUOISE                          18202  0x0000471a (const dword)  (not used)
tUserButton                           33  0x00000021 (const dword)  (usage 9)
tUserImages                           27  0x0000001b (const dword)  (usage 3)
tUserled                              19  0x00000013 (const dword)  (usage 3)
tVideo                                20  0x00000014 (const dword)  (usage 3)
tWinButton                             6  0x00000006 (const dword)  (usage 51)
txt_Attributes                       -38  0xffffffda (PmmC func) args[1] r=1  (usage 3)
txt_BGcolour                         -26  0xffffffe6 (PmmC func) args[1] r=1  (usage 6)
txt_Bold                             -34  0xffffffde (PmmC func) args[1] r=1  (not used)
txt_Delay                            -32  0xffffffe0 (PmmC func) args[1] r=1  (not used)
txt_FGcolour                         -25  0xffffffe7 (PmmC func) args[1] r=1  (usage 6)
TXT_FONT_HEIGHT                      102  0x00000066 (const dword)  (not used)
TXT_FONT_ID                           98  0x00000062 (const dword)  (not used)
TXT_FONT_MAX                          99  0x00000063 (const dword)  (not used)
TXT_FONT_OFFSET                      100  0x00000064 (const dword)  (not used)
TXT_FONT_WIDTH                       101  0x00000065 (const dword)  (not used)
txt_FontID                           -27  0xffffffe5 (PmmC func) args[1] r=1  (usage 6)
txt_Height                           -29  0xffffffe3 (PmmC func) args[1] r=1  (not used)
txt_Inverse                          -36  0xffffffdc (PmmC func) args[1] r=1  (not used)
txt_Italic                           -35  0xffffffdd (PmmC func) args[1] r=1  (not used)
txt_MoveCursor                       -23  0xffffffe9 (PmmC func) args[2] r=0  (not used)
txt_Opacity                          -33  0xffffffdf (PmmC func) args[1] r=1  (usage 3)
txt_Set                              -24  0xffffffe8 (PmmC func) args[2] r=0  (not used)
txt_Underline                        -37  0xffffffdb (PmmC func) args[1] r=1  (not used)
txt_Width                            -28  0xffffffe4 (PmmC func) args[1] r=1  (not used)
txt_Wrap                             -39  0xffffffd9 (PmmC func) args[1] r=1  (not used)
txt_Xgap                             -30  0xffffffe2 (PmmC func) args[1] r=1  (not used)
txt_Ygap                             -31  0xffffffe1 (PmmC func) args[1] r=1  (not used)
uadd_3232                           -290  0xfffffede (PmmC func) args[3] r=1  (usage 3)
ucmp_3232                           -292  0xfffffedc (PmmC func) args[2] r=1  (not used)
UDEC                               17674  0x0000450a (const dword)  (not used)
UDEC1                              16650  0x0000410a (const dword)  (not used)
UDEC1Z                             20746  0x0000510a (const dword)  (not used)
UDEC1ZB                            24842  0x0000610a (const dword)  (not used)
UDEC2                              16906  0x0000420a (const dword)  (not used)
UDEC2Z                             21002  0x0000520a (const dword)  (not used)
UDEC2ZB                            25098  0x0000620a (const dword)  (not used)
UDEC3                              17162  0x0000430a (const dword)  (not used)
UDEC3Z                             21258  0x0000530a (const dword)  (not used)
UDEC3ZB                            25354  0x0000630a (const dword)  (not used)
UDEC4                              17418  0x0000440a (const dword)  (not used)
UDEC4Z                             21514  0x0000540a (const dword)  (not used)
UDEC4ZB                            25610  0x0000640a (const dword)  (not used)
UDEC5                              17674  0x0000450a (const dword)  (not used)
UDEC5Z                             21770  0x0000550a (const dword)  (not used)
UDEC5ZB                            25866  0x0000650a (const dword)  (not used)
UDECZ                              21770  0x0000550a (const dword)  (not used)
UDECZB                             25866  0x0000650a (const dword)  (not used)
uLCD_43PT_GFX2                         0  0x00000000 (const ??? 0)  (not used)
umul_1616                           -289  0xfffffedf (PmmC func) args[3] r=1  (usage 12)
UNDERLINED                           128  0x00000080 (const dword)  (not used)
unicode_page                        -281  0xfffffee7 (PmmC func) args[3] r=1  (not used)
UP                                     1  0x00000001 (const dword)  (not used)
UpdateObjects                       5320  0x000014c8 (User func) args[1] r=0  (usage 9)
USER_INITIALIZED_DISPLAY              32  0x00000020 (const dword)  (not used)
usub_3232                           -291  0xfffffedd (PmmC func) args[3] r=1  (not used)
VIOLET                             60445  0x0000ec1d (const dword)  (not used)
WHEAT                              63222  0x0000f6f6 (const dword)  (not used)
WHITE                              65535  0x0000ffff (const dword)  (usage 3)
WHITESMOKE                         63422  0x0000f7be (const dword)  (not used)
WRITE_CONTRAST                         4  0x00000004 (const dword)  (usage 3)
WRITE_OBJ                              1  0x00000001 (const dword)  (usage 3)
WRITE_PAGE                            35  0x00000023 (const dword)  (not used)
WRITE_STR                              2  0x00000002 (const dword)  (usage 3)
WRITE_STRU                             3  0x00000003 (const dword)  (usage 3)
WriteCmd                               0  0x00000000 (const dword)  (not used)
WriteObject                         6792  0x00001a88 (User func) args[3] r=0  (usage 30)
x                                    122  0x0000007a (mem) word (global)  (usage 18)
X_MAX                                  0  0x00000000 (const dword)  (not used)
X_ORG                                  6  0x00000006 (const dword)  (not used)
X_ORIGIN                              30  0x0000001e (const dword)  (not used)
XYposToDegree                       7969  0x00001f21 (User func) args[2] r=0  (usage 3)
y                                    124  0x0000007c (mem) word (global)  (usage 15)
Y_MAX                                  1  0x00000001 (const dword)  (not used)
Y_ORG                                  7  0x00000007 (const dword)  (not used)
Y_ORIGIN                              31  0x0000001f (const dword)  (not used)
YELLOW                             65504  0x0000ffe0 (const dword)  (not used)
YELLOWGREEN                        40550  0x00009e66 (const dword)  (not used)
